
STM32H743IIT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eac  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007144  08007144  00008144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800717c  0800717c  0000817c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007184  08007184  00008184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007188  08007188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000018  24000000  0800718c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000194  24000018  080071a4  00009018  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001ac  080071a4  000091ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016565  00000000  00000000  00009046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002731  00000000  00000000  0001f5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001080  00000000  00000000  00021ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cf7  00000000  00000000  00022d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036f6a  00000000  00000000  00023a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000174e1  00000000  00000000  0005a9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162760  00000000  00000000  00071ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d4602  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004620  00000000  00000000  001d4648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009b  00000000  00000000  001d8c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800712c 	.word	0x0800712c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800712c 	.word	0x0800712c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80005cc:	f000 fa82 	bl	8000ad4 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005d0:	f000 fd28 	bl	8001024 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005d4:	f000 f812 	bl	80005fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005d8:	f000 f95c 	bl	8000894 <MX_GPIO_Init>
	MX_UART4_Init();
 80005dc:	f000 f8be 	bl	800075c <MX_UART4_Init>
	MX_USART6_UART_Init();
 80005e0:	f000 f908 	bl	80007f4 <MX_USART6_UART_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_UART_Transmit(&huart4, (uint8_t*) play, 6, 1000);
 80005e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e8:	2206      	movs	r2, #6
 80005ea:	4902      	ldr	r1, [pc, #8]	@ (80005f4 <main+0x2c>)
 80005ec:	4802      	ldr	r0, [pc, #8]	@ (80005f8 <main+0x30>)
 80005ee:	f004 ffb3 	bl	8005558 <HAL_UART_Transmit>
 80005f2:	e7f7      	b.n	80005e4 <main+0x1c>
 80005f4:	24000000 	.word	0x24000000
 80005f8:	24000034 	.word	0x24000034

080005fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09e      	sub	sp, #120	@ 0x78
 8000600:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000602:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000606:	224c      	movs	r2, #76	@ 0x4c
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f006 fd62 	bl	80070d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2220      	movs	r2, #32
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f006 fd5b 	bl	80070d4 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800061e:	2002      	movs	r0, #2
 8000620:	f001 fdee 	bl	8002200 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b49      	ldr	r3, [pc, #292]	@ (8000750 <SystemClock_Config+0x154>)
 800062a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800062c:	4a48      	ldr	r2, [pc, #288]	@ (8000750 <SystemClock_Config+0x154>)
 800062e:	f023 0301 	bic.w	r3, r3, #1
 8000632:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000634:	4b46      	ldr	r3, [pc, #280]	@ (8000750 <SystemClock_Config+0x154>)
 8000636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b45      	ldr	r3, [pc, #276]	@ (8000754 <SystemClock_Config+0x158>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a44      	ldr	r2, [pc, #272]	@ (8000754 <SystemClock_Config+0x158>)
 8000644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b42      	ldr	r3, [pc, #264]	@ (8000754 <SystemClock_Config+0x158>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000656:	bf00      	nop
 8000658:	4b3e      	ldr	r3, [pc, #248]	@ (8000754 <SystemClock_Config+0x158>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000664:	d1f8      	bne.n	8000658 <SystemClock_Config+0x5c>
	}

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	4b3c      	ldr	r3, [pc, #240]	@ (8000758 <SystemClock_Config+0x15c>)
 8000668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800066c:	4a3a      	ldr	r2, [pc, #232]	@ (8000758 <SystemClock_Config+0x15c>)
 800066e:	f043 0302 	orr.w	r3, r3, #2
 8000672:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000676:	4b38      	ldr	r3, [pc, #224]	@ (8000758 <SystemClock_Config+0x15c>)
 8000678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800067c:	f003 0302 	and.w	r3, r3, #2
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <SystemClock_Config+0x158>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a31      	ldr	r2, [pc, #196]	@ (8000754 <SystemClock_Config+0x158>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b2f      	ldr	r3, [pc, #188]	@ (8000754 <SystemClock_Config+0x158>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <SystemClock_Config+0x154>)
 80006a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <SystemClock_Config+0x154>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006aa:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <SystemClock_Config+0x154>)
 80006ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80006b6:	bf00      	nop
 80006b8:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <SystemClock_Config+0x158>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006c4:	d1f8      	bne.n	80006b8 <SystemClock_Config+0xbc>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c6:	2302      	movs	r3, #2
 80006c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ce:	2340      	movs	r3, #64	@ 0x40
 80006d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d6:	2300      	movs	r3, #0
 80006d8:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006da:	2304      	movs	r3, #4
 80006dc:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLN = 60;
 80006de:	233c      	movs	r3, #60	@ 0x3c
 80006e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLP = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ee:	230c      	movs	r3, #12
 80006f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	677b      	str	r3, [r7, #116]	@ 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fdb8 	bl	8002274 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x112>
		Error_Handler();
 800070a:	f000 fa21 	bl	8000b50 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800070e:	233f      	movs	r3, #63	@ 0x3f
 8000710:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2303      	movs	r3, #3
 8000714:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800071a:	2308      	movs	r3, #8
 800071c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800071e:	2340      	movs	r3, #64	@ 0x40
 8000720:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000722:	2340      	movs	r3, #64	@ 0x40
 8000724:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000726:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800072c:	2340      	movs	r3, #64	@ 0x40
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f002 f9f6 	bl	8002b28 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x14a>
		Error_Handler();
 8000742:	f000 fa05 	bl	8000b50 <Error_Handler>
	}
}
 8000746:	bf00      	nop
 8000748:	3778      	adds	r7, #120	@ 0x78
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	58000400 	.word	0x58000400
 8000754:	58024800 	.word	0x58024800
 8000758:	58024400 	.word	0x58024400

0800075c <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000760:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <MX_UART4_Init+0x90>)
 8000762:	4a23      	ldr	r2, [pc, #140]	@ (80007f0 <MX_UART4_Init+0x94>)
 8000764:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <MX_UART4_Init+0x90>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_UART4_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_UART4_Init+0x90>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_UART4_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_UART4_Init+0x90>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_UART4_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_UART4_Init+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_UART4_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_UART4_Init+0x90>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <MX_UART4_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80007a4:	4811      	ldr	r0, [pc, #68]	@ (80007ec <MX_UART4_Init+0x90>)
 80007a6:	f004 fe87 	bl	80054b8 <HAL_UART_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_UART4_Init+0x58>
		Error_Handler();
 80007b0:	f000 f9ce 	bl	8000b50 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 80007b4:	2100      	movs	r1, #0
 80007b6:	480d      	ldr	r0, [pc, #52]	@ (80007ec <MX_UART4_Init+0x90>)
 80007b8:	f006 fbc1 	bl	8006f3e <HAL_UARTEx_SetTxFifoThreshold>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80007c2:	f000 f9c5 	bl	8000b50 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4808      	ldr	r0, [pc, #32]	@ (80007ec <MX_UART4_Init+0x90>)
 80007ca:	f006 fbf6 	bl	8006fba <HAL_UARTEx_SetRxFifoThreshold>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80007d4:	f000 f9bc 	bl	8000b50 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_UART4_Init+0x90>)
 80007da:	f006 fb77 	bl	8006ecc <HAL_UARTEx_DisableFifoMode>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_UART4_Init+0x8c>
		Error_Handler();
 80007e4:	f000 f9b4 	bl	8000b50 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	24000034 	.word	0x24000034
 80007f0:	40004c00 	.word	0x40004c00

080007f4 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80007f8:	4b24      	ldr	r3, [pc, #144]	@ (800088c <MX_USART6_UART_Init+0x98>)
 80007fa:	4a25      	ldr	r2, [pc, #148]	@ (8000890 <MX_USART6_UART_Init+0x9c>)
 80007fc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80007fe:	4b23      	ldr	r3, [pc, #140]	@ (800088c <MX_USART6_UART_Init+0x98>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b21      	ldr	r3, [pc, #132]	@ (800088c <MX_USART6_UART_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_USART6_UART_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8000812:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <MX_USART6_UART_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <MX_USART6_UART_Init+0x98>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <MX_USART6_UART_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b19      	ldr	r3, [pc, #100]	@ (800088c <MX_USART6_UART_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_USART6_UART_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000830:	4b16      	ldr	r3, [pc, #88]	@ (800088c <MX_USART6_UART_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_USART6_UART_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800083c:	2300      	movs	r3, #0
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	4812      	ldr	r0, [pc, #72]	@ (800088c <MX_USART6_UART_Init+0x98>)
 8000844:	f006 faba 	bl	8006dbc <HAL_RS485Ex_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART6_UART_Init+0x5e>
		Error_Handler();
 800084e:	f000 f97f 	bl	8000b50 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 8000852:	2100      	movs	r1, #0
 8000854:	480d      	ldr	r0, [pc, #52]	@ (800088c <MX_USART6_UART_Init+0x98>)
 8000856:	f006 fb72 	bl	8006f3e <HAL_UARTEx_SetTxFifoThreshold>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_USART6_UART_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 8000860:	f000 f976 	bl	8000b50 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 8000864:	2100      	movs	r1, #0
 8000866:	4809      	ldr	r0, [pc, #36]	@ (800088c <MX_USART6_UART_Init+0x98>)
 8000868:	f006 fba7 	bl	8006fba <HAL_UARTEx_SetRxFifoThreshold>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART6_UART_Init+0x82>
			!= HAL_OK) {
		Error_Handler();
 8000872:	f000 f96d 	bl	8000b50 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_USART6_UART_Init+0x98>)
 8000878:	f006 fb28 	bl	8006ecc <HAL_UARTEx_DisableFifoMode>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART6_UART_Init+0x92>
		Error_Handler();
 8000882:	f000 f965 	bl	8000b50 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	240000c8 	.word	0x240000c8
 8000890:	40011400 	.word	0x40011400

08000894 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b08e      	sub	sp, #56	@ 0x38
 8000898:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800089a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80008aa:	4b82      	ldr	r3, [pc, #520]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b0:	4a80      	ldr	r2, [pc, #512]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ba:	4b7e      	ldr	r3, [pc, #504]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c0:	f003 0310 	and.w	r3, r3, #16
 80008c4:	623b      	str	r3, [r7, #32]
 80008c6:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	4b7a      	ldr	r3, [pc, #488]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ce:	4a79      	ldr	r2, [pc, #484]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d8:	4b76      	ldr	r3, [pc, #472]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	61fb      	str	r3, [r7, #28]
 80008e4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80008e6:	4b73      	ldr	r3, [pc, #460]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ec:	4a71      	ldr	r2, [pc, #452]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 80008ee:	f043 0320 	orr.w	r3, r3, #32
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f6:	4b6f      	ldr	r3, [pc, #444]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fc:	f003 0320 	and.w	r3, r3, #32
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000904:	4b6b      	ldr	r3, [pc, #428]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	4a6a      	ldr	r2, [pc, #424]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000914:	4b67      	ldr	r3, [pc, #412]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b64      	ldr	r3, [pc, #400]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	4a62      	ldr	r2, [pc, #392]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000932:	4b60      	ldr	r3, [pc, #384]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000940:	4b5c      	ldr	r3, [pc, #368]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	4a5b      	ldr	r2, [pc, #364]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000950:	4b58      	ldr	r3, [pc, #352]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800095e:	4b55      	ldr	r3, [pc, #340]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	4a53      	ldr	r2, [pc, #332]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 8000966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096e:	4b51      	ldr	r3, [pc, #324]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	4a4c      	ldr	r2, [pc, #304]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098c:	4b49      	ldr	r3, [pc, #292]	@ (8000ab4 <MX_GPIO_Init+0x220>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH, S06_Pin | LED06_Pin | S05_Pin | LED05_Pin,
 800099a:	2200      	movs	r2, #0
 800099c:	213c      	movs	r1, #60	@ 0x3c
 800099e:	4846      	ldr	r0, [pc, #280]	@ (8000ab8 <MX_GPIO_Init+0x224>)
 80009a0:	f001 fc14 	bl	80021cc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80009a4:	2200      	movs	r2, #0
 80009a6:	f24c 01df 	movw	r1, #49375	@ 0xc0df
 80009aa:	4844      	ldr	r0, [pc, #272]	@ (8000abc <MX_GPIO_Init+0x228>)
 80009ac:	f001 fc0e 	bl	80021cc <HAL_GPIO_WritePin>
			S04_Pin | LED04_Pin | LOCK10_Pin | LOCK09_Pin | LOCK08_Pin
					| LOCK07_Pin | LOCK06_Pin | S10_Pin | LED10_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG,
 80009b0:	2200      	movs	r2, #0
 80009b2:	f647 61fc 	movw	r1, #32508	@ 0x7efc
 80009b6:	4842      	ldr	r0, [pc, #264]	@ (8000ac0 <MX_GPIO_Init+0x22c>)
 80009b8:	f001 fc08 	bl	80021cc <HAL_GPIO_WritePin>
			S03_Pin | LED03_Pin | S02_Pin | LED02_Pin | S01_Pin | LED01_Pin
					| S09_Pin | LED09_Pin | S08_Pin | LED08_Pin | S07_Pin
					| LED07_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c2:	4840      	ldr	r0, [pc, #256]	@ (8000ac4 <MX_GPIO_Init+0x230>)
 80009c4:	f001 fc02 	bl	80021cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : DHT22_Pin */
	GPIO_InitStruct.Pin = DHT22_Pin;
 80009c8:	2304      	movs	r3, #4
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d8:	4619      	mov	r1, r3
 80009da:	483b      	ldr	r0, [pc, #236]	@ (8000ac8 <MX_GPIO_Init+0x234>)
 80009dc:	f001 fa46 	bl	8001e6c <HAL_GPIO_Init>

	/*Configure GPIO pins : PF6 PF7 PF8 PF9 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 80009e0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80009f2:	2305      	movs	r3, #5
 80009f4:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fa:	4619      	mov	r1, r3
 80009fc:	4833      	ldr	r0, [pc, #204]	@ (8000acc <MX_GPIO_Init+0x238>)
 80009fe:	f001 fa35 	bl	8001e6c <HAL_GPIO_Init>

	/*Configure GPIO pins : S06_Pin LED06_Pin S05_Pin LED05_Pin */
	GPIO_InitStruct.Pin = S06_Pin | LED06_Pin | S05_Pin | LED05_Pin;
 8000a02:	233c      	movs	r3, #60	@ 0x3c
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4827      	ldr	r0, [pc, #156]	@ (8000ab8 <MX_GPIO_Init+0x224>)
 8000a1a:	f001 fa27 	bl	8001e6c <HAL_GPIO_Init>

	/*Configure GPIO pins : LOCK05_Pin LOCK04_Pin LOCK03_Pin LOCK02_Pin
	 ADD4_Pin ADD3_Pin ADD2_Pin ADD1_Pin */
	GPIO_InitStruct.Pin = LOCK05_Pin | LOCK04_Pin | LOCK03_Pin | LOCK02_Pin
 8000a1e:	f24f 0378 	movw	r3, #61560	@ 0xf078
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
			| ADD4_Pin | ADD3_Pin | ADD2_Pin | ADD1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4827      	ldr	r0, [pc, #156]	@ (8000ad0 <MX_GPIO_Init+0x23c>)
 8000a34:	f001 fa1a 	bl	8001e6c <HAL_GPIO_Init>

	/*Configure GPIO pin : LOCK01_Pin */
	GPIO_InitStruct.Pin = LOCK01_Pin;
 8000a38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(LOCK01_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	481b      	ldr	r0, [pc, #108]	@ (8000abc <MX_GPIO_Init+0x228>)
 8000a4e:	f001 fa0d 	bl	8001e6c <HAL_GPIO_Init>

	/*Configure GPIO pins : S04_Pin LED04_Pin LOCK10_Pin LOCK09_Pin
	 LOCK08_Pin LOCK07_Pin LOCK06_Pin S10_Pin
	 LED10_Pin */
	GPIO_InitStruct.Pin = S04_Pin | LED04_Pin | LOCK10_Pin | LOCK09_Pin
 8000a52:	f24c 03df 	movw	r3, #49375	@ 0xc0df
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
			| LOCK08_Pin | LOCK07_Pin | LOCK06_Pin | S10_Pin | LED10_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4814      	ldr	r0, [pc, #80]	@ (8000abc <MX_GPIO_Init+0x228>)
 8000a6c:	f001 f9fe 	bl	8001e6c <HAL_GPIO_Init>

	/*Configure GPIO pins : S03_Pin LED03_Pin S02_Pin LED02_Pin
	 S01_Pin LED01_Pin S09_Pin LED09_Pin
	 S08_Pin LED08_Pin S07_Pin LED07_Pin */
	GPIO_InitStruct.Pin = S03_Pin | LED03_Pin | S02_Pin | LED02_Pin | S01_Pin
 8000a70:	f647 63fc 	movw	r3, #32508	@ 0x7efc
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
			| LED01_Pin | S09_Pin | LED09_Pin | S08_Pin | LED08_Pin | S07_Pin
			| LED07_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_GPIO_Init+0x22c>)
 8000a8a:	f001 f9ef 	bl	8001e6c <HAL_GPIO_Init>

	/*Configure GPIO pin : BUZZER_Pin */
	GPIO_InitStruct.Pin = BUZZER_Pin;
 8000a8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4807      	ldr	r0, [pc, #28]	@ (8000ac4 <MX_GPIO_Init+0x230>)
 8000aa8:	f001 f9e0 	bl	8001e6c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000aac:	bf00      	nop
 8000aae:	3738      	adds	r7, #56	@ 0x38
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	58024400 	.word	0x58024400
 8000ab8:	58021c00 	.word	0x58021c00
 8000abc:	58020c00 	.word	0x58020c00
 8000ac0:	58021800 	.word	0x58021800
 8000ac4:	58020800 	.word	0x58020800
 8000ac8:	58021000 	.word	0x58021000
 8000acc:	58021400 	.word	0x58021400
 8000ad0:	58020400 	.word	0x58020400

08000ad4 <MPU_Config>:

/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8000ada:	463b      	mov	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000ae6:	f000 fbe5 	bl	80012b4 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aea:	2301      	movs	r3, #1
 8000aec:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000af6:	231f      	movs	r3, #31
 8000af8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000afa:	2387      	movs	r3, #135	@ 0x87
 8000afc:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b02:	2300      	movs	r3, #0
 8000b04:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b06:	2301      	movs	r3, #1
 8000b08:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b16:	463b      	mov	r3, r7
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fc03 	bl	8001324 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b1e:	2004      	movs	r0, #4
 8000b20:	f000 fbe0 	bl	80012e4 <HAL_MPU_Enable>

}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b3e:	f000 faad 	bl	800109c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40001000 	.word	0x40001000

08000b50 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <HAL_MspInit+0x30>)
 8000b64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <HAL_MspInit+0x30>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_MspInit+0x30>)
 8000b74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	58024400 	.word	0x58024400

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0be      	sub	sp, #248	@ 0xf8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba8:	f107 0320 	add.w	r3, r7, #32
 8000bac:	22c0      	movs	r2, #192	@ 0xc0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f006 fa8f 	bl	80070d4 <memset>
  if(huart->Instance==UART4)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a63      	ldr	r2, [pc, #396]	@ (8000d48 <HAL_UART_MspInit+0x1b8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d14f      	bne.n	8000c60 <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000bc0:	f04f 0202 	mov.w	r2, #2
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	f107 0320 	add.w	r3, r7, #32
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fb74 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000be2:	f7ff ffb5 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000be6:	4b59      	ldr	r3, [pc, #356]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bec:	4a57      	ldr	r2, [pc, #348]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000bee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bf2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bf6:	4b55      	ldr	r3, [pc, #340]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c00:	61fb      	str	r3, [r7, #28]
 8000c02:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b51      	ldr	r3, [pc, #324]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0a:	4a50      	ldr	r2, [pc, #320]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c14:	4b4d      	ldr	r3, [pc, #308]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c22:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8000c3c:	2306      	movs	r3, #6
 8000c3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4841      	ldr	r0, [pc, #260]	@ (8000d50 <HAL_UART_MspInit+0x1c0>)
 8000c4a:	f001 f90f 	bl	8001e6c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2034      	movs	r0, #52	@ 0x34
 8000c54:	f000 fb06 	bl	8001264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c58:	2034      	movs	r0, #52	@ 0x34
 8000c5a:	f000 fb1d 	bl	8001298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c5e:	e06f      	b.n	8000d40 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a3b      	ldr	r2, [pc, #236]	@ (8000d54 <HAL_UART_MspInit+0x1c4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d16a      	bne.n	8000d40 <HAL_UART_MspInit+0x1b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000c6a:	f04f 0201 	mov.w	r2, #1
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c76:	2300      	movs	r3, #0
 8000c78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 fb1f 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8000c8c:	f7ff ff60 	bl	8000b50 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c90:	4b2e      	ldr	r3, [pc, #184]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c96:	4a2d      	ldr	r2, [pc, #180]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000c98:	f043 0320 	orr.w	r3, r3, #32
 8000c9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cae:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb4:	4a25      	ldr	r2, [pc, #148]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cbe:	4b23      	ldr	r3, [pc, #140]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <HAL_UART_MspInit+0x1bc>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000d04:	2307      	movs	r3, #7
 8000d06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4811      	ldr	r0, [pc, #68]	@ (8000d58 <HAL_UART_MspInit+0x1c8>)
 8000d12:	f001 f8ab 	bl	8001e6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d16:	23c0      	movs	r3, #192	@ 0xc0
 8000d18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d34:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4808      	ldr	r0, [pc, #32]	@ (8000d5c <HAL_UART_MspInit+0x1cc>)
 8000d3c:	f001 f896 	bl	8001e6c <HAL_GPIO_Init>
}
 8000d40:	bf00      	nop
 8000d42:	37f8      	adds	r7, #248	@ 0xf8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40004c00 	.word	0x40004c00
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58020000 	.word	0x58020000
 8000d54:	40011400 	.word	0x40011400
 8000d58:	58021800 	.word	0x58021800
 8000d5c:	58020800 	.word	0x58020800

08000d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b090      	sub	sp, #64	@ 0x40
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b0f      	cmp	r3, #15
 8000d6c:	d827      	bhi.n	8000dbe <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	2036      	movs	r0, #54	@ 0x36
 8000d74:	f000 fa76 	bl	8001264 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d78:	2036      	movs	r0, #54	@ 0x36
 8000d7a:	f000 fa8d 	bl	8001298 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000d7e:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <HAL_InitTick+0xc4>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d84:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <HAL_InitTick+0xc8>)
 8000d86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d8a:	4a27      	ldr	r2, [pc, #156]	@ (8000e28 <HAL_InitTick+0xc8>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d94:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <HAL_InitTick+0xc8>)
 8000d96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000da2:	f107 0210 	add.w	r2, r7, #16
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 fa47 	bl	8003240 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d106      	bne.n	8000dca <HAL_InitTick+0x6a>
 8000dbc:	e001      	b.n	8000dc2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e02b      	b.n	8000e1a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dc2:	f002 fa11 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8000dc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000dc8:	e004      	b.n	8000dd4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dca:	f002 fa0d 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dd6:	4a15      	ldr	r2, [pc, #84]	@ (8000e2c <HAL_InitTick+0xcc>)
 8000dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ddc:	0c9b      	lsrs	r3, r3, #18
 8000dde:	3b01      	subs	r3, #1
 8000de0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000de4:	4a13      	ldr	r2, [pc, #76]	@ (8000e34 <HAL_InitTick+0xd4>)
 8000de6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000dea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000df0:	4a0f      	ldr	r2, [pc, #60]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000df4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e02:	480b      	ldr	r0, [pc, #44]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000e04:	f004 f88a 	bl	8004f1c <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d104      	bne.n	8000e18 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e0e:	4808      	ldr	r0, [pc, #32]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000e10:	f004 f8e6 	bl	8004fe0 <HAL_TIM_Base_Start_IT>
 8000e14:	4603      	mov	r3, r0
 8000e16:	e000      	b.n	8000e1a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3740      	adds	r7, #64	@ 0x40
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	24000010 	.word	0x24000010
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	431bde83 	.word	0x431bde83
 8000e30:	2400015c 	.word	0x2400015c
 8000e34:	40001000 	.word	0x40001000

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <NMI_Handler+0x4>

08000e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <MemManage_Handler+0x4>

08000e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <UART4_IRQHandler+0x10>)
 8000e9e:	f004 fbe9 	bl	8005674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	24000034 	.word	0x24000034

08000eac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb0:	4802      	ldr	r0, [pc, #8]	@ (8000ebc <TIM6_DAC_IRQHandler+0x10>)
 8000eb2:	f004 f90d 	bl	80050d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2400015c 	.word	0x2400015c

08000ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ec4:	4b37      	ldr	r3, [pc, #220]	@ (8000fa4 <SystemInit+0xe4>)
 8000ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eca:	4a36      	ldr	r2, [pc, #216]	@ (8000fa4 <SystemInit+0xe4>)
 8000ecc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ed4:	4b34      	ldr	r3, [pc, #208]	@ (8000fa8 <SystemInit+0xe8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 030f 	and.w	r3, r3, #15
 8000edc:	2b06      	cmp	r3, #6
 8000ede:	d807      	bhi.n	8000ef0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ee0:	4b31      	ldr	r3, [pc, #196]	@ (8000fa8 <SystemInit+0xe8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f023 030f 	bic.w	r3, r3, #15
 8000ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8000fa8 <SystemInit+0xe8>)
 8000eea:	f043 0307 	orr.w	r3, r3, #7
 8000eee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <SystemInit+0xec>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8000fac <SystemInit+0xec>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000efc:	4b2b      	ldr	r3, [pc, #172]	@ (8000fac <SystemInit+0xec>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f02:	4b2a      	ldr	r3, [pc, #168]	@ (8000fac <SystemInit+0xec>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4929      	ldr	r1, [pc, #164]	@ (8000fac <SystemInit+0xec>)
 8000f08:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <SystemInit+0xf0>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f0e:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <SystemInit+0xe8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f1a:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <SystemInit+0xe8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f023 030f 	bic.w	r3, r3, #15
 8000f22:	4a21      	ldr	r2, [pc, #132]	@ (8000fa8 <SystemInit+0xe8>)
 8000f24:	f043 0307 	orr.w	r3, r3, #7
 8000f28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <SystemInit+0xec>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <SystemInit+0xec>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <SystemInit+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <SystemInit+0xec>)
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb4 <SystemInit+0xf4>)
 8000f40:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <SystemInit+0xec>)
 8000f44:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb8 <SystemInit+0xf8>)
 8000f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <SystemInit+0xec>)
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fbc <SystemInit+0xfc>)
 8000f4c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <SystemInit+0xec>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <SystemInit+0xec>)
 8000f56:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <SystemInit+0xfc>)
 8000f58:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <SystemInit+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <SystemInit+0xec>)
 8000f62:	4a16      	ldr	r2, [pc, #88]	@ (8000fbc <SystemInit+0xfc>)
 8000f64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <SystemInit+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <SystemInit+0xec>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0e      	ldr	r2, [pc, #56]	@ (8000fac <SystemInit+0xec>)
 8000f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <SystemInit+0xec>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <SystemInit+0x100>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <SystemInit+0x104>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f8a:	d202      	bcs.n	8000f92 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <SystemInit+0x108>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <SystemInit+0x10c>)
 8000f94:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00
 8000fa8:	52002000 	.word	0x52002000
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fb4:	02020200 	.word	0x02020200
 8000fb8:	01ff0000 	.word	0x01ff0000
 8000fbc:	01010280 	.word	0x01010280
 8000fc0:	5c001000 	.word	0x5c001000
 8000fc4:	ffff0000 	.word	0xffff0000
 8000fc8:	51008108 	.word	0x51008108
 8000fcc:	52004000 	.word	0x52004000

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001008 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fd4:	f7ff ff74 	bl	8000ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	@ (800100c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	@ (8001010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800101c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f006 f871 	bl	80070e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fae1 	bl	80005c8 <main>
  bx  lr
 8001006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800100c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001010:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8001014:	0800718c 	.word	0x0800718c
  ldr r2, =_sbss
 8001018:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 800101c:	240001ac 	.word	0x240001ac

08001020 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC3_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102a:	2003      	movs	r0, #3
 800102c:	f000 f90f 	bl	800124e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001030:	f001 ff30 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8001034:	4602      	mov	r2, r0
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <HAL_Init+0x68>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	4913      	ldr	r1, [pc, #76]	@ (8001090 <HAL_Init+0x6c>)
 8001042:	5ccb      	ldrb	r3, [r1, r3]
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	fa22 f303 	lsr.w	r3, r2, r3
 800104c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HAL_Init+0x68>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	4a0e      	ldr	r2, [pc, #56]	@ (8001090 <HAL_Init+0x6c>)
 8001058:	5cd3      	ldrb	r3, [r2, r3]
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <HAL_Init+0x70>)
 8001066:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001068:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <HAL_Init+0x74>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106e:	200f      	movs	r0, #15
 8001070:	f7ff fe76 	bl	8000d60 <HAL_InitTick>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e002      	b.n	8001084 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800107e:	f7ff fd6d 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	58024400 	.word	0x58024400
 8001090:	08007144 	.word	0x08007144
 8001094:	2400000c 	.word	0x2400000c
 8001098:	24000008 	.word	0x24000008

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	24000014 	.word	0x24000014
 80010c0:	240001a8 	.word	0x240001a8

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	240001a8 	.word	0x240001a8

080010dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010e0:	4b03      	ldr	r3, [pc, #12]	@ (80010f0 <HAL_GetREVID+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0c1b      	lsrs	r3, r3, #16
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	5c001000 	.word	0x5c001000

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <__NVIC_SetPriorityGrouping+0x40>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	4313      	orrs	r3, r2
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <__NVIC_SetPriorityGrouping+0x40>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	05fa0000 	.word	0x05fa0000

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	@ (8001190 <__NVIC_EnableIRQ+0x38>)
 8001172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	@ (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	@ (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	@ 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	@ 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff4c 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001272:	f7ff ff63 	bl	800113c <__NVIC_GetPriorityGrouping>
 8001276:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	6978      	ldr	r0, [r7, #20]
 800127e:	f7ff ffb3 	bl	80011e8 <NVIC_EncodePriority>
 8001282:	4602      	mov	r2, r0
 8001284:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff82 	bl	8001194 <__NVIC_SetPriority>
}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff56 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012b8:	f3bf 8f5f 	dmb	sy
}
 80012bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <HAL_MPU_Disable+0x28>)
 80012c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c2:	4a06      	ldr	r2, [pc, #24]	@ (80012dc <HAL_MPU_Disable+0x28>)
 80012c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012c8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012ca:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_MPU_Disable+0x2c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00
 80012e0:	e000ed90 	.word	0xe000ed90

080012e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80012ec:	4a0b      	ldr	r2, [pc, #44]	@ (800131c <HAL_MPU_Enable+0x38>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <HAL_MPU_Enable+0x3c>)
 80012f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fa:	4a09      	ldr	r2, [pc, #36]	@ (8001320 <HAL_MPU_Enable+0x3c>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001300:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001302:	f3bf 8f4f 	dsb	sy
}
 8001306:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001308:	f3bf 8f6f 	isb	sy
}
 800130c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed90 	.word	0xe000ed90
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	785a      	ldrb	r2, [r3, #1]
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001332:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <HAL_MPU_ConfigRegion+0x7c>)
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001340:	4a17      	ldr	r2, [pc, #92]	@ (80013a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7b1b      	ldrb	r3, [r3, #12]
 800134c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7adb      	ldrb	r3, [r3, #11]
 8001352:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001354:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7a9b      	ldrb	r3, [r3, #10]
 800135a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800135c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7b5b      	ldrb	r3, [r3, #13]
 8001362:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001364:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7b9b      	ldrb	r3, [r3, #14]
 800136a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800136c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7bdb      	ldrb	r3, [r3, #15]
 8001372:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001374:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7a5b      	ldrb	r3, [r3, #9]
 800137a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800137c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7a1b      	ldrb	r3, [r3, #8]
 8001382:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001384:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800138c:	4a04      	ldr	r2, [pc, #16]	@ (80013a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800138e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001390:	6113      	str	r3, [r2, #16]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed90 	.word	0xe000ed90

080013a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff fe8a 	bl	80010c4 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e2dc      	b.n	8001976 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d008      	beq.n	80013da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2280      	movs	r2, #128	@ 0x80
 80013cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e2cd      	b.n	8001976 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a76      	ldr	r2, [pc, #472]	@ (80015b8 <HAL_DMA_Abort+0x214>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d04a      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a74      	ldr	r2, [pc, #464]	@ (80015bc <HAL_DMA_Abort+0x218>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d045      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a73      	ldr	r2, [pc, #460]	@ (80015c0 <HAL_DMA_Abort+0x21c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d040      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a71      	ldr	r2, [pc, #452]	@ (80015c4 <HAL_DMA_Abort+0x220>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d03b      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a70      	ldr	r2, [pc, #448]	@ (80015c8 <HAL_DMA_Abort+0x224>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d036      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a6e      	ldr	r2, [pc, #440]	@ (80015cc <HAL_DMA_Abort+0x228>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d031      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a6d      	ldr	r2, [pc, #436]	@ (80015d0 <HAL_DMA_Abort+0x22c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d02c      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a6b      	ldr	r2, [pc, #428]	@ (80015d4 <HAL_DMA_Abort+0x230>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d027      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a6a      	ldr	r2, [pc, #424]	@ (80015d8 <HAL_DMA_Abort+0x234>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d022      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a68      	ldr	r2, [pc, #416]	@ (80015dc <HAL_DMA_Abort+0x238>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d01d      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a67      	ldr	r2, [pc, #412]	@ (80015e0 <HAL_DMA_Abort+0x23c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d018      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a65      	ldr	r2, [pc, #404]	@ (80015e4 <HAL_DMA_Abort+0x240>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a64      	ldr	r2, [pc, #400]	@ (80015e8 <HAL_DMA_Abort+0x244>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d00e      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a62      	ldr	r2, [pc, #392]	@ (80015ec <HAL_DMA_Abort+0x248>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d009      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a61      	ldr	r2, [pc, #388]	@ (80015f0 <HAL_DMA_Abort+0x24c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d004      	beq.n	800147a <HAL_DMA_Abort+0xd6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a5f      	ldr	r2, [pc, #380]	@ (80015f4 <HAL_DMA_Abort+0x250>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_DMA_Abort+0xda>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_DMA_Abort+0xdc>
 800147e:	2300      	movs	r3, #0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 021e 	bic.w	r2, r2, #30
 8001492:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e00a      	b.n	80014c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 020e 	bic.w	r2, r2, #14
 80014ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a3c      	ldr	r2, [pc, #240]	@ (80015b8 <HAL_DMA_Abort+0x214>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d072      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a3a      	ldr	r2, [pc, #232]	@ (80015bc <HAL_DMA_Abort+0x218>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d06d      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a39      	ldr	r2, [pc, #228]	@ (80015c0 <HAL_DMA_Abort+0x21c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d068      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a37      	ldr	r2, [pc, #220]	@ (80015c4 <HAL_DMA_Abort+0x220>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d063      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a36      	ldr	r2, [pc, #216]	@ (80015c8 <HAL_DMA_Abort+0x224>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d05e      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a34      	ldr	r2, [pc, #208]	@ (80015cc <HAL_DMA_Abort+0x228>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d059      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a33      	ldr	r2, [pc, #204]	@ (80015d0 <HAL_DMA_Abort+0x22c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d054      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a31      	ldr	r2, [pc, #196]	@ (80015d4 <HAL_DMA_Abort+0x230>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d04f      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a30      	ldr	r2, [pc, #192]	@ (80015d8 <HAL_DMA_Abort+0x234>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d04a      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a2e      	ldr	r2, [pc, #184]	@ (80015dc <HAL_DMA_Abort+0x238>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d045      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a2d      	ldr	r2, [pc, #180]	@ (80015e0 <HAL_DMA_Abort+0x23c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d040      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a2b      	ldr	r2, [pc, #172]	@ (80015e4 <HAL_DMA_Abort+0x240>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d03b      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a2a      	ldr	r2, [pc, #168]	@ (80015e8 <HAL_DMA_Abort+0x244>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d036      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a28      	ldr	r2, [pc, #160]	@ (80015ec <HAL_DMA_Abort+0x248>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d031      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a27      	ldr	r2, [pc, #156]	@ (80015f0 <HAL_DMA_Abort+0x24c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d02c      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a25      	ldr	r2, [pc, #148]	@ (80015f4 <HAL_DMA_Abort+0x250>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d027      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a24      	ldr	r2, [pc, #144]	@ (80015f8 <HAL_DMA_Abort+0x254>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d022      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a22      	ldr	r2, [pc, #136]	@ (80015fc <HAL_DMA_Abort+0x258>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01d      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a21      	ldr	r2, [pc, #132]	@ (8001600 <HAL_DMA_Abort+0x25c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d018      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <HAL_DMA_Abort+0x260>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1e      	ldr	r2, [pc, #120]	@ (8001608 <HAL_DMA_Abort+0x264>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d00e      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <HAL_DMA_Abort+0x268>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d009      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001610 <HAL_DMA_Abort+0x26c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d004      	beq.n	80015b2 <HAL_DMA_Abort+0x20e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a19      	ldr	r2, [pc, #100]	@ (8001614 <HAL_DMA_Abort+0x270>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d132      	bne.n	8001618 <HAL_DMA_Abort+0x274>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e031      	b.n	800161a <HAL_DMA_Abort+0x276>
 80015b6:	bf00      	nop
 80015b8:	40020010 	.word	0x40020010
 80015bc:	40020028 	.word	0x40020028
 80015c0:	40020040 	.word	0x40020040
 80015c4:	40020058 	.word	0x40020058
 80015c8:	40020070 	.word	0x40020070
 80015cc:	40020088 	.word	0x40020088
 80015d0:	400200a0 	.word	0x400200a0
 80015d4:	400200b8 	.word	0x400200b8
 80015d8:	40020410 	.word	0x40020410
 80015dc:	40020428 	.word	0x40020428
 80015e0:	40020440 	.word	0x40020440
 80015e4:	40020458 	.word	0x40020458
 80015e8:	40020470 	.word	0x40020470
 80015ec:	40020488 	.word	0x40020488
 80015f0:	400204a0 	.word	0x400204a0
 80015f4:	400204b8 	.word	0x400204b8
 80015f8:	58025408 	.word	0x58025408
 80015fc:	5802541c 	.word	0x5802541c
 8001600:	58025430 	.word	0x58025430
 8001604:	58025444 	.word	0x58025444
 8001608:	58025458 	.word	0x58025458
 800160c:	5802546c 	.word	0x5802546c
 8001610:	58025480 	.word	0x58025480
 8001614:	58025494 	.word	0x58025494
 8001618:	2300      	movs	r3, #0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d007      	beq.n	800162e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001628:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800162c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6d      	ldr	r2, [pc, #436]	@ (80017e8 <HAL_DMA_Abort+0x444>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d04a      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a6b      	ldr	r2, [pc, #428]	@ (80017ec <HAL_DMA_Abort+0x448>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d045      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a6a      	ldr	r2, [pc, #424]	@ (80017f0 <HAL_DMA_Abort+0x44c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d040      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a68      	ldr	r2, [pc, #416]	@ (80017f4 <HAL_DMA_Abort+0x450>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d03b      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a67      	ldr	r2, [pc, #412]	@ (80017f8 <HAL_DMA_Abort+0x454>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d036      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a65      	ldr	r2, [pc, #404]	@ (80017fc <HAL_DMA_Abort+0x458>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d031      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a64      	ldr	r2, [pc, #400]	@ (8001800 <HAL_DMA_Abort+0x45c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d02c      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a62      	ldr	r2, [pc, #392]	@ (8001804 <HAL_DMA_Abort+0x460>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d027      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a61      	ldr	r2, [pc, #388]	@ (8001808 <HAL_DMA_Abort+0x464>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d022      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a5f      	ldr	r2, [pc, #380]	@ (800180c <HAL_DMA_Abort+0x468>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d01d      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a5e      	ldr	r2, [pc, #376]	@ (8001810 <HAL_DMA_Abort+0x46c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d018      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a5c      	ldr	r2, [pc, #368]	@ (8001814 <HAL_DMA_Abort+0x470>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001818 <HAL_DMA_Abort+0x474>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d00e      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a59      	ldr	r2, [pc, #356]	@ (800181c <HAL_DMA_Abort+0x478>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d009      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a58      	ldr	r2, [pc, #352]	@ (8001820 <HAL_DMA_Abort+0x47c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d004      	beq.n	80016ce <HAL_DMA_Abort+0x32a>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a56      	ldr	r2, [pc, #344]	@ (8001824 <HAL_DMA_Abort+0x480>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d108      	bne.n	80016e0 <HAL_DMA_Abort+0x33c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0201 	bic.w	r2, r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e007      	b.n	80016f0 <HAL_DMA_Abort+0x34c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80016f0:	e013      	b.n	800171a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016f2:	f7ff fce7 	bl	80010c4 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d90c      	bls.n	800171a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2220      	movs	r2, #32
 8001704:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2203      	movs	r2, #3
 800170a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e12d      	b.n	8001976 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1e5      	bne.n	80016f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a2f      	ldr	r2, [pc, #188]	@ (80017e8 <HAL_DMA_Abort+0x444>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d04a      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a2d      	ldr	r2, [pc, #180]	@ (80017ec <HAL_DMA_Abort+0x448>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d045      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a2c      	ldr	r2, [pc, #176]	@ (80017f0 <HAL_DMA_Abort+0x44c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d040      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a2a      	ldr	r2, [pc, #168]	@ (80017f4 <HAL_DMA_Abort+0x450>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d03b      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a29      	ldr	r2, [pc, #164]	@ (80017f8 <HAL_DMA_Abort+0x454>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d036      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a27      	ldr	r2, [pc, #156]	@ (80017fc <HAL_DMA_Abort+0x458>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d031      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a26      	ldr	r2, [pc, #152]	@ (8001800 <HAL_DMA_Abort+0x45c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d02c      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a24      	ldr	r2, [pc, #144]	@ (8001804 <HAL_DMA_Abort+0x460>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d027      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a23      	ldr	r2, [pc, #140]	@ (8001808 <HAL_DMA_Abort+0x464>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d022      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a21      	ldr	r2, [pc, #132]	@ (800180c <HAL_DMA_Abort+0x468>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01d      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a20      	ldr	r2, [pc, #128]	@ (8001810 <HAL_DMA_Abort+0x46c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d018      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a1e      	ldr	r2, [pc, #120]	@ (8001814 <HAL_DMA_Abort+0x470>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <HAL_DMA_Abort+0x474>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d00e      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a1b      	ldr	r2, [pc, #108]	@ (800181c <HAL_DMA_Abort+0x478>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d009      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001820 <HAL_DMA_Abort+0x47c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d004      	beq.n	80017c6 <HAL_DMA_Abort+0x422>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a18      	ldr	r2, [pc, #96]	@ (8001824 <HAL_DMA_Abort+0x480>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <HAL_DMA_Abort+0x426>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_DMA_Abort+0x428>
 80017ca:	2300      	movs	r3, #0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d02b      	beq.n	8001828 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	223f      	movs	r2, #63	@ 0x3f
 80017e0:	409a      	lsls	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	e02a      	b.n	800183e <HAL_DMA_Abort+0x49a>
 80017e8:	40020010 	.word	0x40020010
 80017ec:	40020028 	.word	0x40020028
 80017f0:	40020040 	.word	0x40020040
 80017f4:	40020058 	.word	0x40020058
 80017f8:	40020070 	.word	0x40020070
 80017fc:	40020088 	.word	0x40020088
 8001800:	400200a0 	.word	0x400200a0
 8001804:	400200b8 	.word	0x400200b8
 8001808:	40020410 	.word	0x40020410
 800180c:	40020428 	.word	0x40020428
 8001810:	40020440 	.word	0x40020440
 8001814:	40020458 	.word	0x40020458
 8001818:	40020470 	.word	0x40020470
 800181c:	40020488 	.word	0x40020488
 8001820:	400204a0 	.word	0x400204a0
 8001824:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	2201      	movs	r2, #1
 8001838:	409a      	lsls	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a4f      	ldr	r2, [pc, #316]	@ (8001980 <HAL_DMA_Abort+0x5dc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d072      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a4d      	ldr	r2, [pc, #308]	@ (8001984 <HAL_DMA_Abort+0x5e0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d06d      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a4c      	ldr	r2, [pc, #304]	@ (8001988 <HAL_DMA_Abort+0x5e4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d068      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a4a      	ldr	r2, [pc, #296]	@ (800198c <HAL_DMA_Abort+0x5e8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d063      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a49      	ldr	r2, [pc, #292]	@ (8001990 <HAL_DMA_Abort+0x5ec>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d05e      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a47      	ldr	r2, [pc, #284]	@ (8001994 <HAL_DMA_Abort+0x5f0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d059      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a46      	ldr	r2, [pc, #280]	@ (8001998 <HAL_DMA_Abort+0x5f4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d054      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a44      	ldr	r2, [pc, #272]	@ (800199c <HAL_DMA_Abort+0x5f8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d04f      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a43      	ldr	r2, [pc, #268]	@ (80019a0 <HAL_DMA_Abort+0x5fc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d04a      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a41      	ldr	r2, [pc, #260]	@ (80019a4 <HAL_DMA_Abort+0x600>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d045      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a40      	ldr	r2, [pc, #256]	@ (80019a8 <HAL_DMA_Abort+0x604>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d040      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3e      	ldr	r2, [pc, #248]	@ (80019ac <HAL_DMA_Abort+0x608>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d03b      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a3d      	ldr	r2, [pc, #244]	@ (80019b0 <HAL_DMA_Abort+0x60c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d036      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3b      	ldr	r2, [pc, #236]	@ (80019b4 <HAL_DMA_Abort+0x610>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d031      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a3a      	ldr	r2, [pc, #232]	@ (80019b8 <HAL_DMA_Abort+0x614>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d02c      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a38      	ldr	r2, [pc, #224]	@ (80019bc <HAL_DMA_Abort+0x618>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d027      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a37      	ldr	r2, [pc, #220]	@ (80019c0 <HAL_DMA_Abort+0x61c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d022      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a35      	ldr	r2, [pc, #212]	@ (80019c4 <HAL_DMA_Abort+0x620>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01d      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a34      	ldr	r2, [pc, #208]	@ (80019c8 <HAL_DMA_Abort+0x624>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d018      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a32      	ldr	r2, [pc, #200]	@ (80019cc <HAL_DMA_Abort+0x628>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a31      	ldr	r2, [pc, #196]	@ (80019d0 <HAL_DMA_Abort+0x62c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00e      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a2f      	ldr	r2, [pc, #188]	@ (80019d4 <HAL_DMA_Abort+0x630>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d009      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a2e      	ldr	r2, [pc, #184]	@ (80019d8 <HAL_DMA_Abort+0x634>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d004      	beq.n	800192e <HAL_DMA_Abort+0x58a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a2c      	ldr	r2, [pc, #176]	@ (80019dc <HAL_DMA_Abort+0x638>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_DMA_Abort+0x58e>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_DMA_Abort+0x590>
 8001932:	2300      	movs	r3, #0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d015      	beq.n	8001964 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001940:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00c      	beq.n	8001964 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001958:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001962:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40020010 	.word	0x40020010
 8001984:	40020028 	.word	0x40020028
 8001988:	40020040 	.word	0x40020040
 800198c:	40020058 	.word	0x40020058
 8001990:	40020070 	.word	0x40020070
 8001994:	40020088 	.word	0x40020088
 8001998:	400200a0 	.word	0x400200a0
 800199c:	400200b8 	.word	0x400200b8
 80019a0:	40020410 	.word	0x40020410
 80019a4:	40020428 	.word	0x40020428
 80019a8:	40020440 	.word	0x40020440
 80019ac:	40020458 	.word	0x40020458
 80019b0:	40020470 	.word	0x40020470
 80019b4:	40020488 	.word	0x40020488
 80019b8:	400204a0 	.word	0x400204a0
 80019bc:	400204b8 	.word	0x400204b8
 80019c0:	58025408 	.word	0x58025408
 80019c4:	5802541c 	.word	0x5802541c
 80019c8:	58025430 	.word	0x58025430
 80019cc:	58025444 	.word	0x58025444
 80019d0:	58025458 	.word	0x58025458
 80019d4:	5802546c 	.word	0x5802546c
 80019d8:	58025480 	.word	0x58025480
 80019dc:	58025494 	.word	0x58025494

080019e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e237      	b.n	8001e62 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d004      	beq.n	8001a08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2280      	movs	r2, #128	@ 0x80
 8001a02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e22c      	b.n	8001e62 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a5c      	ldr	r2, [pc, #368]	@ (8001b80 <HAL_DMA_Abort_IT+0x1a0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d04a      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a5b      	ldr	r2, [pc, #364]	@ (8001b84 <HAL_DMA_Abort_IT+0x1a4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d045      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a59      	ldr	r2, [pc, #356]	@ (8001b88 <HAL_DMA_Abort_IT+0x1a8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d040      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a58      	ldr	r2, [pc, #352]	@ (8001b8c <HAL_DMA_Abort_IT+0x1ac>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d03b      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a56      	ldr	r2, [pc, #344]	@ (8001b90 <HAL_DMA_Abort_IT+0x1b0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d036      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a55      	ldr	r2, [pc, #340]	@ (8001b94 <HAL_DMA_Abort_IT+0x1b4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d031      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a53      	ldr	r2, [pc, #332]	@ (8001b98 <HAL_DMA_Abort_IT+0x1b8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d02c      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a52      	ldr	r2, [pc, #328]	@ (8001b9c <HAL_DMA_Abort_IT+0x1bc>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d027      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	@ (8001ba0 <HAL_DMA_Abort_IT+0x1c0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d022      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba4 <HAL_DMA_Abort_IT+0x1c4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d01d      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba8 <HAL_DMA_Abort_IT+0x1c8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d018      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a4c      	ldr	r2, [pc, #304]	@ (8001bac <HAL_DMA_Abort_IT+0x1cc>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d013      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a4a      	ldr	r2, [pc, #296]	@ (8001bb0 <HAL_DMA_Abort_IT+0x1d0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00e      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a49      	ldr	r2, [pc, #292]	@ (8001bb4 <HAL_DMA_Abort_IT+0x1d4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d009      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a47      	ldr	r2, [pc, #284]	@ (8001bb8 <HAL_DMA_Abort_IT+0x1d8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d004      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a46      	ldr	r2, [pc, #280]	@ (8001bbc <HAL_DMA_Abort_IT+0x1dc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d101      	bne.n	8001aac <HAL_DMA_Abort_IT+0xcc>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_DMA_Abort_IT+0xce>
 8001aac:	2300      	movs	r3, #0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8086 	beq.w	8001bc0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2f      	ldr	r2, [pc, #188]	@ (8001b80 <HAL_DMA_Abort_IT+0x1a0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d04a      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2e      	ldr	r2, [pc, #184]	@ (8001b84 <HAL_DMA_Abort_IT+0x1a4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d045      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a2c      	ldr	r2, [pc, #176]	@ (8001b88 <HAL_DMA_Abort_IT+0x1a8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d040      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a2b      	ldr	r2, [pc, #172]	@ (8001b8c <HAL_DMA_Abort_IT+0x1ac>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d03b      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a29      	ldr	r2, [pc, #164]	@ (8001b90 <HAL_DMA_Abort_IT+0x1b0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d036      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a28      	ldr	r2, [pc, #160]	@ (8001b94 <HAL_DMA_Abort_IT+0x1b4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d031      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a26      	ldr	r2, [pc, #152]	@ (8001b98 <HAL_DMA_Abort_IT+0x1b8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02c      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a25      	ldr	r2, [pc, #148]	@ (8001b9c <HAL_DMA_Abort_IT+0x1bc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d027      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a23      	ldr	r2, [pc, #140]	@ (8001ba0 <HAL_DMA_Abort_IT+0x1c0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d022      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a22      	ldr	r2, [pc, #136]	@ (8001ba4 <HAL_DMA_Abort_IT+0x1c4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d01d      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a20      	ldr	r2, [pc, #128]	@ (8001ba8 <HAL_DMA_Abort_IT+0x1c8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d018      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bac <HAL_DMA_Abort_IT+0x1cc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb0 <HAL_DMA_Abort_IT+0x1d0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb4 <HAL_DMA_Abort_IT+0x1d4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb8 <HAL_DMA_Abort_IT+0x1d8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x17c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a19      	ldr	r2, [pc, #100]	@ (8001bbc <HAL_DMA_Abort_IT+0x1dc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d108      	bne.n	8001b6e <HAL_DMA_Abort_IT+0x18e>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e178      	b.n	8001e60 <HAL_DMA_Abort_IT+0x480>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0201 	bic.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e16f      	b.n	8001e60 <HAL_DMA_Abort_IT+0x480>
 8001b80:	40020010 	.word	0x40020010
 8001b84:	40020028 	.word	0x40020028
 8001b88:	40020040 	.word	0x40020040
 8001b8c:	40020058 	.word	0x40020058
 8001b90:	40020070 	.word	0x40020070
 8001b94:	40020088 	.word	0x40020088
 8001b98:	400200a0 	.word	0x400200a0
 8001b9c:	400200b8 	.word	0x400200b8
 8001ba0:	40020410 	.word	0x40020410
 8001ba4:	40020428 	.word	0x40020428
 8001ba8:	40020440 	.word	0x40020440
 8001bac:	40020458 	.word	0x40020458
 8001bb0:	40020470 	.word	0x40020470
 8001bb4:	40020488 	.word	0x40020488
 8001bb8:	400204a0 	.word	0x400204a0
 8001bbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 020e 	bic.w	r2, r2, #14
 8001bce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a6c      	ldr	r2, [pc, #432]	@ (8001d88 <HAL_DMA_Abort_IT+0x3a8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d04a      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a6b      	ldr	r2, [pc, #428]	@ (8001d8c <HAL_DMA_Abort_IT+0x3ac>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d045      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a69      	ldr	r2, [pc, #420]	@ (8001d90 <HAL_DMA_Abort_IT+0x3b0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d040      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a68      	ldr	r2, [pc, #416]	@ (8001d94 <HAL_DMA_Abort_IT+0x3b4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d03b      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a66      	ldr	r2, [pc, #408]	@ (8001d98 <HAL_DMA_Abort_IT+0x3b8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d036      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a65      	ldr	r2, [pc, #404]	@ (8001d9c <HAL_DMA_Abort_IT+0x3bc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d031      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a63      	ldr	r2, [pc, #396]	@ (8001da0 <HAL_DMA_Abort_IT+0x3c0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d02c      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a62      	ldr	r2, [pc, #392]	@ (8001da4 <HAL_DMA_Abort_IT+0x3c4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d027      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a60      	ldr	r2, [pc, #384]	@ (8001da8 <HAL_DMA_Abort_IT+0x3c8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d022      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a5f      	ldr	r2, [pc, #380]	@ (8001dac <HAL_DMA_Abort_IT+0x3cc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d01d      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a5d      	ldr	r2, [pc, #372]	@ (8001db0 <HAL_DMA_Abort_IT+0x3d0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d018      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a5c      	ldr	r2, [pc, #368]	@ (8001db4 <HAL_DMA_Abort_IT+0x3d4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d013      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a5a      	ldr	r2, [pc, #360]	@ (8001db8 <HAL_DMA_Abort_IT+0x3d8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00e      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a59      	ldr	r2, [pc, #356]	@ (8001dbc <HAL_DMA_Abort_IT+0x3dc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d009      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a57      	ldr	r2, [pc, #348]	@ (8001dc0 <HAL_DMA_Abort_IT+0x3e0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d004      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x290>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a56      	ldr	r2, [pc, #344]	@ (8001dc4 <HAL_DMA_Abort_IT+0x3e4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d108      	bne.n	8001c82 <HAL_DMA_Abort_IT+0x2a2>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e007      	b.n	8001c92 <HAL_DMA_Abort_IT+0x2b2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a3c      	ldr	r2, [pc, #240]	@ (8001d88 <HAL_DMA_Abort_IT+0x3a8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d072      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a3a      	ldr	r2, [pc, #232]	@ (8001d8c <HAL_DMA_Abort_IT+0x3ac>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d06d      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a39      	ldr	r2, [pc, #228]	@ (8001d90 <HAL_DMA_Abort_IT+0x3b0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d068      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a37      	ldr	r2, [pc, #220]	@ (8001d94 <HAL_DMA_Abort_IT+0x3b4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d063      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a36      	ldr	r2, [pc, #216]	@ (8001d98 <HAL_DMA_Abort_IT+0x3b8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d05e      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a34      	ldr	r2, [pc, #208]	@ (8001d9c <HAL_DMA_Abort_IT+0x3bc>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d059      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a33      	ldr	r2, [pc, #204]	@ (8001da0 <HAL_DMA_Abort_IT+0x3c0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d054      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a31      	ldr	r2, [pc, #196]	@ (8001da4 <HAL_DMA_Abort_IT+0x3c4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d04f      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a30      	ldr	r2, [pc, #192]	@ (8001da8 <HAL_DMA_Abort_IT+0x3c8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d04a      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8001dac <HAL_DMA_Abort_IT+0x3cc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d045      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8001db0 <HAL_DMA_Abort_IT+0x3d0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d040      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a2b      	ldr	r2, [pc, #172]	@ (8001db4 <HAL_DMA_Abort_IT+0x3d4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d03b      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001db8 <HAL_DMA_Abort_IT+0x3d8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d036      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a28      	ldr	r2, [pc, #160]	@ (8001dbc <HAL_DMA_Abort_IT+0x3dc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d031      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <HAL_DMA_Abort_IT+0x3e0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d02c      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a25      	ldr	r2, [pc, #148]	@ (8001dc4 <HAL_DMA_Abort_IT+0x3e4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d027      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a24      	ldr	r2, [pc, #144]	@ (8001dc8 <HAL_DMA_Abort_IT+0x3e8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d022      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a22      	ldr	r2, [pc, #136]	@ (8001dcc <HAL_DMA_Abort_IT+0x3ec>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01d      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a21      	ldr	r2, [pc, #132]	@ (8001dd0 <HAL_DMA_Abort_IT+0x3f0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d018      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd4 <HAL_DMA_Abort_IT+0x3f4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd8 <HAL_DMA_Abort_IT+0x3f8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d00e      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1c      	ldr	r2, [pc, #112]	@ (8001ddc <HAL_DMA_Abort_IT+0x3fc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d009      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1b      	ldr	r2, [pc, #108]	@ (8001de0 <HAL_DMA_Abort_IT+0x400>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d004      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x3a2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	@ (8001de4 <HAL_DMA_Abort_IT+0x404>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d132      	bne.n	8001de8 <HAL_DMA_Abort_IT+0x408>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e031      	b.n	8001dea <HAL_DMA_Abort_IT+0x40a>
 8001d86:	bf00      	nop
 8001d88:	40020010 	.word	0x40020010
 8001d8c:	40020028 	.word	0x40020028
 8001d90:	40020040 	.word	0x40020040
 8001d94:	40020058 	.word	0x40020058
 8001d98:	40020070 	.word	0x40020070
 8001d9c:	40020088 	.word	0x40020088
 8001da0:	400200a0 	.word	0x400200a0
 8001da4:	400200b8 	.word	0x400200b8
 8001da8:	40020410 	.word	0x40020410
 8001dac:	40020428 	.word	0x40020428
 8001db0:	40020440 	.word	0x40020440
 8001db4:	40020458 	.word	0x40020458
 8001db8:	40020470 	.word	0x40020470
 8001dbc:	40020488 	.word	0x40020488
 8001dc0:	400204a0 	.word	0x400204a0
 8001dc4:	400204b8 	.word	0x400204b8
 8001dc8:	58025408 	.word	0x58025408
 8001dcc:	5802541c 	.word	0x5802541c
 8001dd0:	58025430 	.word	0x58025430
 8001dd4:	58025444 	.word	0x58025444
 8001dd8:	58025458 	.word	0x58025458
 8001ddc:	5802546c 	.word	0x5802546c
 8001de0:	58025480 	.word	0x58025480
 8001de4:	58025494 	.word	0x58025494
 8001de8:	2300      	movs	r3, #0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d028      	beq.n	8001e40 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00c      	beq.n	8001e40 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	@ 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e7a:	4b89      	ldr	r3, [pc, #548]	@ (80020a0 <HAL_GPIO_Init+0x234>)
 8001e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e7e:	e194      	b.n	80021aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2101      	movs	r1, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8186 	beq.w	80021a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d005      	beq.n	8001eb0 <HAL_GPIO_Init+0x44>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d130      	bne.n	8001f12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	f003 0201 	and.w	r2, r3, #1
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d017      	beq.n	8001f4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d123      	bne.n	8001fa2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	08da      	lsrs	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3208      	adds	r2, #8
 8001f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	220f      	movs	r2, #15
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	08da      	lsrs	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3208      	adds	r2, #8
 8001f9c:	69b9      	ldr	r1, [r7, #24]
 8001f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0203 	and.w	r2, r3, #3
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80e0 	beq.w	80021a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80020a4 <HAL_GPIO_Init+0x238>)
 8001fe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fea:	4a2e      	ldr	r2, [pc, #184]	@ (80020a4 <HAL_GPIO_Init+0x238>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80020a4 <HAL_GPIO_Init+0x238>)
 8001ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002002:	4a29      	ldr	r2, [pc, #164]	@ (80020a8 <HAL_GPIO_Init+0x23c>)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	220f      	movs	r2, #15
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a20      	ldr	r2, [pc, #128]	@ (80020ac <HAL_GPIO_Init+0x240>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d052      	beq.n	80020d4 <HAL_GPIO_Init+0x268>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a1f      	ldr	r2, [pc, #124]	@ (80020b0 <HAL_GPIO_Init+0x244>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d031      	beq.n	800209a <HAL_GPIO_Init+0x22e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1e      	ldr	r2, [pc, #120]	@ (80020b4 <HAL_GPIO_Init+0x248>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d02b      	beq.n	8002096 <HAL_GPIO_Init+0x22a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <HAL_GPIO_Init+0x24c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d025      	beq.n	8002092 <HAL_GPIO_Init+0x226>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a1c      	ldr	r2, [pc, #112]	@ (80020bc <HAL_GPIO_Init+0x250>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <HAL_GPIO_Init+0x222>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1b      	ldr	r2, [pc, #108]	@ (80020c0 <HAL_GPIO_Init+0x254>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d019      	beq.n	800208a <HAL_GPIO_Init+0x21e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1a      	ldr	r2, [pc, #104]	@ (80020c4 <HAL_GPIO_Init+0x258>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_GPIO_Init+0x21a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a19      	ldr	r2, [pc, #100]	@ (80020c8 <HAL_GPIO_Init+0x25c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00d      	beq.n	8002082 <HAL_GPIO_Init+0x216>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a18      	ldr	r2, [pc, #96]	@ (80020cc <HAL_GPIO_Init+0x260>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d007      	beq.n	800207e <HAL_GPIO_Init+0x212>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a17      	ldr	r2, [pc, #92]	@ (80020d0 <HAL_GPIO_Init+0x264>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_GPIO_Init+0x20e>
 8002076:	2309      	movs	r3, #9
 8002078:	e02d      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 800207a:	230a      	movs	r3, #10
 800207c:	e02b      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 800207e:	2308      	movs	r3, #8
 8002080:	e029      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 8002082:	2307      	movs	r3, #7
 8002084:	e027      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 8002086:	2306      	movs	r3, #6
 8002088:	e025      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 800208a:	2305      	movs	r3, #5
 800208c:	e023      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 800208e:	2304      	movs	r3, #4
 8002090:	e021      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 8002092:	2303      	movs	r3, #3
 8002094:	e01f      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 8002096:	2302      	movs	r3, #2
 8002098:	e01d      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 800209a:	2301      	movs	r3, #1
 800209c:	e01b      	b.n	80020d6 <HAL_GPIO_Init+0x26a>
 800209e:	bf00      	nop
 80020a0:	58000080 	.word	0x58000080
 80020a4:	58024400 	.word	0x58024400
 80020a8:	58000400 	.word	0x58000400
 80020ac:	58020000 	.word	0x58020000
 80020b0:	58020400 	.word	0x58020400
 80020b4:	58020800 	.word	0x58020800
 80020b8:	58020c00 	.word	0x58020c00
 80020bc:	58021000 	.word	0x58021000
 80020c0:	58021400 	.word	0x58021400
 80020c4:	58021800 	.word	0x58021800
 80020c8:	58021c00 	.word	0x58021c00
 80020cc:	58022000 	.word	0x58022000
 80020d0:	58022400 	.word	0x58022400
 80020d4:	2300      	movs	r3, #0
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	f002 0203 	and.w	r2, r2, #3
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	4093      	lsls	r3, r2
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e6:	4938      	ldr	r1, [pc, #224]	@ (80021c8 <HAL_GPIO_Init+0x35c>)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800211a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	3301      	adds	r3, #1
 80021a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa22 f303 	lsr.w	r3, r2, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f47f ae63 	bne.w	8001e80 <HAL_GPIO_Init+0x14>
  }
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	3724      	adds	r7, #36	@ 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	58000400 	.word	0x58000400

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002208:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <HAL_PWREx_ConfigSupply+0x70>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b04      	cmp	r3, #4
 8002212:	d00a      	beq.n	800222a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002214:	4b16      	ldr	r3, [pc, #88]	@ (8002270 <HAL_PWREx_ConfigSupply+0x70>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	429a      	cmp	r2, r3
 8002220:	d001      	beq.n	8002226 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e01f      	b.n	8002266 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e01d      	b.n	8002266 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <HAL_PWREx_ConfigSupply+0x70>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f023 0207 	bic.w	r2, r3, #7
 8002232:	490f      	ldr	r1, [pc, #60]	@ (8002270 <HAL_PWREx_ConfigSupply+0x70>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4313      	orrs	r3, r2
 8002238:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800223a:	f7fe ff43 	bl	80010c4 <HAL_GetTick>
 800223e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002240:	e009      	b.n	8002256 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002242:	f7fe ff3f 	bl	80010c4 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002250:	d901      	bls.n	8002256 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e007      	b.n	8002266 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_PWREx_ConfigSupply+0x70>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800225e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002262:	d1ee      	bne.n	8002242 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	58024800 	.word	0x58024800

08002274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	@ 0x30
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f000 bc48 	b.w	8002b18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8088 	beq.w	80023a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002296:	4b99      	ldr	r3, [pc, #612]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800229e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022a0:	4b96      	ldr	r3, [pc, #600]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a8:	2b10      	cmp	r3, #16
 80022aa:	d007      	beq.n	80022bc <HAL_RCC_OscConfig+0x48>
 80022ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ae:	2b18      	cmp	r3, #24
 80022b0:	d111      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62>
 80022b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d10c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b8f      	ldr	r3, [pc, #572]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d06d      	beq.n	80023a4 <HAL_RCC_OscConfig+0x130>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d169      	bne.n	80023a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f000 bc21 	b.w	8002b18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x7a>
 80022e0:	4b86      	ldr	r3, [pc, #536]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a85      	ldr	r2, [pc, #532]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e02e      	b.n	800234c <HAL_RCC_OscConfig+0xd8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x9c>
 80022f6:	4b81      	ldr	r3, [pc, #516]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a80      	ldr	r2, [pc, #512]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b7e      	ldr	r3, [pc, #504]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a7d      	ldr	r2, [pc, #500]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002308:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xd8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0xc0>
 800231a:	4b78      	ldr	r3, [pc, #480]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a77      	ldr	r2, [pc, #476]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b75      	ldr	r3, [pc, #468]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a74      	ldr	r2, [pc, #464]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xd8>
 8002334:	4b71      	ldr	r3, [pc, #452]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a70      	ldr	r2, [pc, #448]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b6e      	ldr	r3, [pc, #440]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6d      	ldr	r2, [pc, #436]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800234a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe feb6 	bl	80010c4 <HAL_GetTick>
 8002358:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe feb2 	bl	80010c4 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	@ 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e3d4      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800236e:	4b63      	ldr	r3, [pc, #396]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xe8>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fea2 	bl	80010c4 <HAL_GetTick>
 8002380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe fe9e 	bl	80010c4 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	@ 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e3c0      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002396:	4b59      	ldr	r3, [pc, #356]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x110>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80ca 	beq.w	8002548 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b4:	4b51      	ldr	r3, [pc, #324]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023be:	4b4f      	ldr	r3, [pc, #316]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80023c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_RCC_OscConfig+0x166>
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	2b18      	cmp	r3, #24
 80023ce:	d156      	bne.n	800247e <HAL_RCC_OscConfig+0x20a>
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d151      	bne.n	800247e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023da:	4b48      	ldr	r3, [pc, #288]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_RCC_OscConfig+0x17e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e392      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023f2:	4b42      	ldr	r3, [pc, #264]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0219 	bic.w	r2, r3, #25
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	493f      	ldr	r1, [pc, #252]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fe5e 	bl	80010c4 <HAL_GetTick>
 8002408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240c:	f7fe fe5a 	bl	80010c4 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e37c      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800241e:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	f7fe fe57 	bl	80010dc <HAL_GetREVID>
 800242e:	4603      	mov	r3, r0
 8002430:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002434:	4293      	cmp	r3, r2
 8002436:	d817      	bhi.n	8002468 <HAL_RCC_OscConfig+0x1f4>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b40      	cmp	r3, #64	@ 0x40
 800243e:	d108      	bne.n	8002452 <HAL_RCC_OscConfig+0x1de>
 8002440:	4b2e      	ldr	r3, [pc, #184]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002448:	4a2c      	ldr	r2, [pc, #176]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 800244a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800244e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002450:	e07a      	b.n	8002548 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002452:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	031b      	lsls	r3, r3, #12
 8002460:	4926      	ldr	r1, [pc, #152]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002466:	e06f      	b.n	8002548 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b24      	ldr	r3, [pc, #144]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	4921      	ldr	r1, [pc, #132]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247c:	e064      	b.n	8002548 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d047      	beq.n	8002516 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002486:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0219 	bic.w	r2, r3, #25
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	491a      	ldr	r1, [pc, #104]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fe14 	bl	80010c4 <HAL_GetTick>
 800249c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a0:	f7fe fe10 	bl	80010c4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e332      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024b2:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	f7fe fe0d 	bl	80010dc <HAL_GetREVID>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d819      	bhi.n	8002500 <HAL_RCC_OscConfig+0x28c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b40      	cmp	r3, #64	@ 0x40
 80024d2:	d108      	bne.n	80024e6 <HAL_RCC_OscConfig+0x272>
 80024d4:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024dc:	4a07      	ldr	r2, [pc, #28]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80024de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024e2:	6053      	str	r3, [r2, #4]
 80024e4:	e030      	b.n	8002548 <HAL_RCC_OscConfig+0x2d4>
 80024e6:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	031b      	lsls	r3, r3, #12
 80024f4:	4901      	ldr	r1, [pc, #4]	@ (80024fc <HAL_RCC_OscConfig+0x288>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
 80024fa:	e025      	b.n	8002548 <HAL_RCC_OscConfig+0x2d4>
 80024fc:	58024400 	.word	0x58024400
 8002500:	4b9a      	ldr	r3, [pc, #616]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	4997      	ldr	r1, [pc, #604]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
 8002514:	e018      	b.n	8002548 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b95      	ldr	r3, [pc, #596]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a94      	ldr	r2, [pc, #592]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7fe fdcf 	bl	80010c4 <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252a:	f7fe fdcb 	bl	80010c4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e2ed      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800253c:	4b8b      	ldr	r3, [pc, #556]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a9 	beq.w	80026a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002556:	4b85      	ldr	r3, [pc, #532]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800255e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002560:	4b82      	ldr	r3, [pc, #520]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d007      	beq.n	800257c <HAL_RCC_OscConfig+0x308>
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b18      	cmp	r3, #24
 8002570:	d13a      	bne.n	80025e8 <HAL_RCC_OscConfig+0x374>
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d135      	bne.n	80025e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800257c:	4b7b      	ldr	r3, [pc, #492]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_OscConfig+0x320>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b80      	cmp	r3, #128	@ 0x80
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e2c1      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002594:	f7fe fda2 	bl	80010dc <HAL_GetREVID>
 8002598:	4603      	mov	r3, r0
 800259a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800259e:	4293      	cmp	r3, r2
 80025a0:	d817      	bhi.n	80025d2 <HAL_RCC_OscConfig+0x35e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d108      	bne.n	80025bc <HAL_RCC_OscConfig+0x348>
 80025aa:	4b70      	ldr	r3, [pc, #448]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025b2:	4a6e      	ldr	r2, [pc, #440]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80025b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025ba:	e075      	b.n	80026a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025bc:	4b6b      	ldr	r3, [pc, #428]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	069b      	lsls	r3, r3, #26
 80025ca:	4968      	ldr	r1, [pc, #416]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025d0:	e06a      	b.n	80026a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025d2:	4b66      	ldr	r3, [pc, #408]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	061b      	lsls	r3, r3, #24
 80025e0:	4962      	ldr	r1, [pc, #392]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025e6:	e05f      	b.n	80026a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d042      	beq.n	8002676 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025f0:	4b5e      	ldr	r3, [pc, #376]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5d      	ldr	r2, [pc, #372]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fd62 	bl	80010c4 <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002604:	f7fe fd5e 	bl	80010c4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e280      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002616:	4b55      	ldr	r3, [pc, #340]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002622:	f7fe fd5b 	bl	80010dc <HAL_GetREVID>
 8002626:	4603      	mov	r3, r0
 8002628:	f241 0203 	movw	r2, #4099	@ 0x1003
 800262c:	4293      	cmp	r3, r2
 800262e:	d817      	bhi.n	8002660 <HAL_RCC_OscConfig+0x3ec>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	2b20      	cmp	r3, #32
 8002636:	d108      	bne.n	800264a <HAL_RCC_OscConfig+0x3d6>
 8002638:	4b4c      	ldr	r3, [pc, #304]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002640:	4a4a      	ldr	r2, [pc, #296]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002642:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002646:	6053      	str	r3, [r2, #4]
 8002648:	e02e      	b.n	80026a8 <HAL_RCC_OscConfig+0x434>
 800264a:	4b48      	ldr	r3, [pc, #288]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	069b      	lsls	r3, r3, #26
 8002658:	4944      	ldr	r1, [pc, #272]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
 800265e:	e023      	b.n	80026a8 <HAL_RCC_OscConfig+0x434>
 8002660:	4b42      	ldr	r3, [pc, #264]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	493f      	ldr	r1, [pc, #252]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002670:	4313      	orrs	r3, r2
 8002672:	60cb      	str	r3, [r1, #12]
 8002674:	e018      	b.n	80026a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002676:	4b3d      	ldr	r3, [pc, #244]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a3c      	ldr	r2, [pc, #240]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 800267c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe fd1f 	bl	80010c4 <HAL_GetTick>
 8002686:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800268a:	f7fe fd1b 	bl	80010c4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e23d      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800269c:	4b33      	ldr	r3, [pc, #204]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d036      	beq.n	8002722 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d019      	beq.n	80026f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026bc:	4b2b      	ldr	r3, [pc, #172]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c0:	4a2a      	ldr	r2, [pc, #168]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe fcfc 	bl	80010c4 <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe fcf8 	bl	80010c4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e21a      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026e2:	4b22      	ldr	r3, [pc, #136]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80026e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x45c>
 80026ee:	e018      	b.n	8002722 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f0:	4b1e      	ldr	r3, [pc, #120]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f4:	4a1d      	ldr	r2, [pc, #116]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe fce2 	bl	80010c4 <HAL_GetTick>
 8002700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe fcde 	bl	80010c4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e200      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002716:	4b15      	ldr	r3, [pc, #84]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d039      	beq.n	80027a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01c      	beq.n	8002770 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002736:	4b0d      	ldr	r3, [pc, #52]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a0c      	ldr	r2, [pc, #48]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 800273c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002740:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002742:	f7fe fcbf 	bl	80010c4 <HAL_GetTick>
 8002746:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800274a:	f7fe fcbb 	bl	80010c4 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1dd      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800275c:	4b03      	ldr	r3, [pc, #12]	@ (800276c <HAL_RCC_OscConfig+0x4f8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x4d6>
 8002768:	e01b      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
 800276a:	bf00      	nop
 800276c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002770:	4b9b      	ldr	r3, [pc, #620]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a9a      	ldr	r2, [pc, #616]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800277a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800277c:	f7fe fca2 	bl	80010c4 <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002784:	f7fe fc9e 	bl	80010c4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e1c0      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002796:	4b92      	ldr	r3, [pc, #584]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8081 	beq.w	80028b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027b0:	4b8c      	ldr	r3, [pc, #560]	@ (80029e4 <HAL_RCC_OscConfig+0x770>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a8b      	ldr	r2, [pc, #556]	@ (80029e4 <HAL_RCC_OscConfig+0x770>)
 80027b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027bc:	f7fe fc82 	bl	80010c4 <HAL_GetTick>
 80027c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c4:	f7fe fc7e 	bl	80010c4 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	@ 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1a0      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027d6:	4b83      	ldr	r3, [pc, #524]	@ (80029e4 <HAL_RCC_OscConfig+0x770>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d106      	bne.n	80027f8 <HAL_RCC_OscConfig+0x584>
 80027ea:	4b7d      	ldr	r3, [pc, #500]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ee:	4a7c      	ldr	r2, [pc, #496]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f6:	e02d      	b.n	8002854 <HAL_RCC_OscConfig+0x5e0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10c      	bne.n	800281a <HAL_RCC_OscConfig+0x5a6>
 8002800:	4b77      	ldr	r3, [pc, #476]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	4a76      	ldr	r2, [pc, #472]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	6713      	str	r3, [r2, #112]	@ 0x70
 800280c:	4b74      	ldr	r3, [pc, #464]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002810:	4a73      	ldr	r2, [pc, #460]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002812:	f023 0304 	bic.w	r3, r3, #4
 8002816:	6713      	str	r3, [r2, #112]	@ 0x70
 8002818:	e01c      	b.n	8002854 <HAL_RCC_OscConfig+0x5e0>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b05      	cmp	r3, #5
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x5c8>
 8002822:	4b6f      	ldr	r3, [pc, #444]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	4a6e      	ldr	r2, [pc, #440]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6713      	str	r3, [r2, #112]	@ 0x70
 800282e:	4b6c      	ldr	r3, [pc, #432]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002832:	4a6b      	ldr	r2, [pc, #428]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6713      	str	r3, [r2, #112]	@ 0x70
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0x5e0>
 800283c:	4b68      	ldr	r3, [pc, #416]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002840:	4a67      	ldr	r2, [pc, #412]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6713      	str	r3, [r2, #112]	@ 0x70
 8002848:	4b65      	ldr	r3, [pc, #404]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284c:	4a64      	ldr	r2, [pc, #400]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800284e:	f023 0304 	bic.w	r3, r3, #4
 8002852:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d015      	beq.n	8002888 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe fc32 	bl	80010c4 <HAL_GetTick>
 8002860:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002862:	e00a      	b.n	800287a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f7fe fc2e 	bl	80010c4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e14e      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800287a:	4b59      	ldr	r3, [pc, #356]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0ee      	beq.n	8002864 <HAL_RCC_OscConfig+0x5f0>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe fc1c 	bl	80010c4 <HAL_GetTick>
 800288c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7fe fc18 	bl	80010c4 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e138      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028a6:	4b4e      	ldr	r3, [pc, #312]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1ee      	bne.n	8002890 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 812d 	beq.w	8002b16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028bc:	4b48      	ldr	r3, [pc, #288]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028c4:	2b18      	cmp	r3, #24
 80028c6:	f000 80bd 	beq.w	8002a44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	f040 809e 	bne.w	8002a10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d4:	4b42      	ldr	r3, [pc, #264]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a41      	ldr	r2, [pc, #260]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80028da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fbf0 	bl	80010c4 <HAL_GetTick>
 80028e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe fbec 	bl	80010c4 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e10e      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028fa:	4b39      	ldr	r3, [pc, #228]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002906:	4b36      	ldr	r3, [pc, #216]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800290a:	4b37      	ldr	r3, [pc, #220]	@ (80029e8 <HAL_RCC_OscConfig+0x774>)
 800290c:	4013      	ands	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	430a      	orrs	r2, r1
 800291a:	4931      	ldr	r1, [pc, #196]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800291c:	4313      	orrs	r3, r2
 800291e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002924:	3b01      	subs	r3, #1
 8002926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292e:	3b01      	subs	r3, #1
 8002930:	025b      	lsls	r3, r3, #9
 8002932:	b29b      	uxth	r3, r3
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293a:	3b01      	subs	r3, #1
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002948:	3b01      	subs	r3, #1
 800294a:	061b      	lsls	r3, r3, #24
 800294c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002950:	4923      	ldr	r1, [pc, #140]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002952:	4313      	orrs	r3, r2
 8002954:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002956:	4b22      	ldr	r3, [pc, #136]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295a:	4a21      	ldr	r2, [pc, #132]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002962:	4b1f      	ldr	r3, [pc, #124]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002966:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <HAL_RCC_OscConfig+0x778>)
 8002968:	4013      	ands	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800296e:	00d2      	lsls	r2, r2, #3
 8002970:	491b      	ldr	r1, [pc, #108]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002972:	4313      	orrs	r3, r2
 8002974:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002976:	4b1a      	ldr	r3, [pc, #104]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297a:	f023 020c 	bic.w	r2, r3, #12
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	4917      	ldr	r1, [pc, #92]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002984:	4313      	orrs	r3, r2
 8002986:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002988:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	f023 0202 	bic.w	r2, r3, #2
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	4912      	ldr	r1, [pc, #72]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 8002996:	4313      	orrs	r3, r2
 8002998:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800299a:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 800299c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299e:	4a10      	ldr	r2, [pc, #64]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029a6:	4b0e      	ldr	r3, [pc, #56]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	4a0d      	ldr	r2, [pc, #52]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029b2:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	4a0a      	ldr	r2, [pc, #40]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	4a07      	ldr	r2, [pc, #28]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ca:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a04      	ldr	r2, [pc, #16]	@ (80029e0 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fb75 	bl	80010c4 <HAL_GetTick>
 80029da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029dc:	e011      	b.n	8002a02 <HAL_RCC_OscConfig+0x78e>
 80029de:	bf00      	nop
 80029e0:	58024400 	.word	0x58024400
 80029e4:	58024800 	.word	0x58024800
 80029e8:	fffffc0c 	.word	0xfffffc0c
 80029ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fb68 	bl	80010c4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e08a      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a02:	4b47      	ldr	r3, [pc, #284]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x77c>
 8002a0e:	e082      	b.n	8002b16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a10:	4b43      	ldr	r3, [pc, #268]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a42      	ldr	r2, [pc, #264]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fb52 	bl	80010c4 <HAL_GetTick>
 8002a20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe fb4e 	bl	80010c4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e070      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a36:	4b3a      	ldr	r3, [pc, #232]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x7b0>
 8002a42:	e068      	b.n	8002b16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a44:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a4a:	4b35      	ldr	r3, [pc, #212]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d031      	beq.n	8002abc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0203 	and.w	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d12a      	bne.n	8002abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d122      	bne.n	8002abc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d11a      	bne.n	8002abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	0a5b      	lsrs	r3, r3, #9
 8002a8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d111      	bne.n	8002abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	0c1b      	lsrs	r3, r3, #16
 8002a9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d108      	bne.n	8002abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	0e1b      	lsrs	r3, r3, #24
 8002aae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e02b      	b.n	8002b18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ac0:	4b17      	ldr	r3, [pc, #92]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002aca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d01f      	beq.n	8002b16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ad6:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	4a11      	ldr	r2, [pc, #68]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ae2:	f7fe faef 	bl	80010c4 <HAL_GetTick>
 8002ae6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ae8:	bf00      	nop
 8002aea:	f7fe faeb 	bl	80010c4 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d0f9      	beq.n	8002aea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002af6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002afa:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <HAL_RCC_OscConfig+0x8b0>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b02:	00d2      	lsls	r2, r2, #3
 8002b04:	4906      	ldr	r1, [pc, #24]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b0a:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0e:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <HAL_RCC_OscConfig+0x8ac>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3730      	adds	r7, #48	@ 0x30
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	58024400 	.word	0x58024400
 8002b24:	ffff0007 	.word	0xffff0007

08002b28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e19c      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b8a      	ldr	r3, [pc, #552]	@ (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d910      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b87      	ldr	r3, [pc, #540]	@ (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 020f 	bic.w	r2, r3, #15
 8002b52:	4985      	ldr	r1, [pc, #532]	@ (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b83      	ldr	r3, [pc, #524]	@ (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e184      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	4b7b      	ldr	r3, [pc, #492]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d908      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b88:	4b78      	ldr	r3, [pc, #480]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	4975      	ldr	r1, [pc, #468]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d010      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	4b70      	ldr	r3, [pc, #448]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d908      	bls.n	8002bc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	496a      	ldr	r1, [pc, #424]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d010      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	4b64      	ldr	r3, [pc, #400]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d908      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002be4:	4b61      	ldr	r3, [pc, #388]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	495e      	ldr	r1, [pc, #376]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d010      	beq.n	8002c24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	4b59      	ldr	r3, [pc, #356]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d908      	bls.n	8002c24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c12:	4b56      	ldr	r3, [pc, #344]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4953      	ldr	r1, [pc, #332]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d010      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	4b4d      	ldr	r3, [pc, #308]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d908      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c40:	4b4a      	ldr	r3, [pc, #296]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f023 020f 	bic.w	r2, r3, #15
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4947      	ldr	r1, [pc, #284]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d055      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c5e:	4b43      	ldr	r3, [pc, #268]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	4940      	ldr	r1, [pc, #256]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d107      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c78:	4b3c      	ldr	r3, [pc, #240]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d121      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0f6      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c90:	4b36      	ldr	r3, [pc, #216]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d115      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0ea      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ca8:	4b30      	ldr	r3, [pc, #192]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0de      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0d6      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cc8:	4b28      	ldr	r3, [pc, #160]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f023 0207 	bic.w	r2, r3, #7
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4925      	ldr	r1, [pc, #148]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cda:	f7fe f9f3 	bl	80010c4 <HAL_GetTick>
 8002cde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce2:	f7fe f9ef 	bl	80010c4 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0be      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d1eb      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d010      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	4b14      	ldr	r3, [pc, #80]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d208      	bcs.n	8002d38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d26:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f023 020f 	bic.w	r2, r3, #15
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	490e      	ldr	r1, [pc, #56]	@ (8002d6c <HAL_RCC_ClockConfig+0x244>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d214      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 020f 	bic.w	r2, r3, #15
 8002d4e:	4906      	ldr	r1, [pc, #24]	@ (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <HAL_RCC_ClockConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e086      	b.n	8002e76 <HAL_RCC_ClockConfig+0x34e>
 8002d68:	52002000 	.word	0x52002000
 8002d6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d010      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	4b3f      	ldr	r3, [pc, #252]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d208      	bcs.n	8002d9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	4939      	ldr	r1, [pc, #228]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d010      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	4b34      	ldr	r3, [pc, #208]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d208      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dba:	4b31      	ldr	r3, [pc, #196]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	492e      	ldr	r1, [pc, #184]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d010      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	4b28      	ldr	r3, [pc, #160]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d208      	bcs.n	8002dfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002de8:	4b25      	ldr	r3, [pc, #148]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	4922      	ldr	r1, [pc, #136]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d208      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e16:	4b1a      	ldr	r3, [pc, #104]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	4917      	ldr	r1, [pc, #92]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e28:	f000 f834 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	4912      	ldr	r1, [pc, #72]	@ (8002e84 <HAL_RCC_ClockConfig+0x35c>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
 8002e44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <HAL_RCC_ClockConfig+0x358>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e84 <HAL_RCC_ClockConfig+0x35c>)
 8002e50:	5cd3      	ldrb	r3, [r2, r3]
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e88 <HAL_RCC_ClockConfig+0x360>)
 8002e5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e60:	4a0a      	ldr	r2, [pc, #40]	@ (8002e8c <HAL_RCC_ClockConfig+0x364>)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e66:	4b0a      	ldr	r3, [pc, #40]	@ (8002e90 <HAL_RCC_ClockConfig+0x368>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd ff78 	bl	8000d60 <HAL_InitTick>
 8002e70:	4603      	mov	r3, r0
 8002e72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	58024400 	.word	0x58024400
 8002e84:	08007144 	.word	0x08007144
 8002e88:	2400000c 	.word	0x2400000c
 8002e8c:	24000008 	.word	0x24000008
 8002e90:	24000010 	.word	0x24000010

08002e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b089      	sub	sp, #36	@ 0x24
 8002e98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e9a:	4bb3      	ldr	r3, [pc, #716]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ea2:	2b18      	cmp	r3, #24
 8002ea4:	f200 8155 	bhi.w	8003152 <HAL_RCC_GetSysClockFreq+0x2be>
 8002ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002f15 	.word	0x08002f15
 8002eb4:	08003153 	.word	0x08003153
 8002eb8:	08003153 	.word	0x08003153
 8002ebc:	08003153 	.word	0x08003153
 8002ec0:	08003153 	.word	0x08003153
 8002ec4:	08003153 	.word	0x08003153
 8002ec8:	08003153 	.word	0x08003153
 8002ecc:	08003153 	.word	0x08003153
 8002ed0:	08002f3b 	.word	0x08002f3b
 8002ed4:	08003153 	.word	0x08003153
 8002ed8:	08003153 	.word	0x08003153
 8002edc:	08003153 	.word	0x08003153
 8002ee0:	08003153 	.word	0x08003153
 8002ee4:	08003153 	.word	0x08003153
 8002ee8:	08003153 	.word	0x08003153
 8002eec:	08003153 	.word	0x08003153
 8002ef0:	08002f41 	.word	0x08002f41
 8002ef4:	08003153 	.word	0x08003153
 8002ef8:	08003153 	.word	0x08003153
 8002efc:	08003153 	.word	0x08003153
 8002f00:	08003153 	.word	0x08003153
 8002f04:	08003153 	.word	0x08003153
 8002f08:	08003153 	.word	0x08003153
 8002f0c:	08003153 	.word	0x08003153
 8002f10:	08002f47 	.word	0x08002f47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f14:	4b94      	ldr	r3, [pc, #592]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f20:	4b91      	ldr	r3, [pc, #580]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	08db      	lsrs	r3, r3, #3
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	4a90      	ldr	r2, [pc, #576]	@ (800316c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f32:	e111      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f34:	4b8d      	ldr	r3, [pc, #564]	@ (800316c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f36:	61bb      	str	r3, [r7, #24]
      break;
 8002f38:	e10e      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f3c:	61bb      	str	r3, [r7, #24]
      break;
 8002f3e:	e10b      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f40:	4b8c      	ldr	r3, [pc, #560]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f42:	61bb      	str	r3, [r7, #24]
      break;
 8002f44:	e108      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f46:	4b88      	ldr	r3, [pc, #544]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f50:	4b85      	ldr	r3, [pc, #532]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f5c:	4b82      	ldr	r3, [pc, #520]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f66:	4b80      	ldr	r3, [pc, #512]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6a:	08db      	lsrs	r3, r3, #3
 8002f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80e1 	beq.w	800314c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	f000 8083 	beq.w	8003098 <HAL_RCC_GetSysClockFreq+0x204>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	f200 80a1 	bhi.w	80030dc <HAL_RCC_GetSysClockFreq+0x248>
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x114>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d056      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002fa6:	e099      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fa8:	4b6f      	ldr	r3, [pc, #444]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d02d      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	08db      	lsrs	r3, r3, #3
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	4a6b      	ldr	r2, [pc, #428]	@ (800316c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fde:	4b62      	ldr	r3, [pc, #392]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ff2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003178 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800300e:	e087      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800317c <HAL_RCC_GetSysClockFreq+0x2e8>
 800301e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003022:	4b51      	ldr	r3, [pc, #324]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003032:	ed97 6a02 	vldr	s12, [r7, #8]
 8003036:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800303a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800303e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800304a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003052:	e065      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003180 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003066:	4b40      	ldr	r3, [pc, #256]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003076:	ed97 6a02 	vldr	s12, [r7, #8]
 800307a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800307e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800308a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003096:	e043      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003184 <HAL_RCC_GetSysClockFreq+0x2f0>
 80030a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80030be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003178 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030da:	e021      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003180 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003102:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003178 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800310a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800310e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800311e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003120:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	0a5b      	lsrs	r3, r3, #9
 8003126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800312a:	3301      	adds	r3, #1
 800312c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003138:	edd7 6a07 	vldr	s13, [r7, #28]
 800313c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003144:	ee17 3a90 	vmov	r3, s15
 8003148:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800314a:	e005      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
      break;
 8003150:	e002      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003152:	4b07      	ldr	r3, [pc, #28]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003154:	61bb      	str	r3, [r7, #24]
      break;
 8003156:	bf00      	nop
  }

  return sysclockfreq;
 8003158:	69bb      	ldr	r3, [r7, #24]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	@ 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	58024400 	.word	0x58024400
 800316c:	03d09000 	.word	0x03d09000
 8003170:	003d0900 	.word	0x003d0900
 8003174:	017d7840 	.word	0x017d7840
 8003178:	46000000 	.word	0x46000000
 800317c:	4c742400 	.word	0x4c742400
 8003180:	4a742400 	.word	0x4a742400
 8003184:	4bbebc20 	.word	0x4bbebc20

08003188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800318e:	f7ff fe81 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8003192:	4602      	mov	r2, r0
 8003194:	4b10      	ldr	r3, [pc, #64]	@ (80031d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	490f      	ldr	r1, [pc, #60]	@ (80031dc <HAL_RCC_GetHCLKFreq+0x54>)
 80031a0:	5ccb      	ldrb	r3, [r1, r3]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	fa22 f303 	lsr.w	r3, r2, r3
 80031aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031ac:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	4a09      	ldr	r2, [pc, #36]	@ (80031dc <HAL_RCC_GetHCLKFreq+0x54>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	fa22 f303 	lsr.w	r3, r2, r3
 80031c2:	4a07      	ldr	r2, [pc, #28]	@ (80031e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80031c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031c6:	4a07      	ldr	r2, [pc, #28]	@ (80031e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031cc:	4b04      	ldr	r3, [pc, #16]	@ (80031e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	58024400 	.word	0x58024400
 80031dc:	08007144 	.word	0x08007144
 80031e0:	2400000c 	.word	0x2400000c
 80031e4:	24000008 	.word	0x24000008

080031e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031ec:	f7ff ffcc 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4904      	ldr	r1, [pc, #16]	@ (8003210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	58024400 	.word	0x58024400
 8003210:	08007144 	.word	0x08007144

08003214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003218:	f7ff ffb6 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4904      	ldr	r1, [pc, #16]	@ (800323c <HAL_RCC_GetPCLK2Freq+0x28>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	58024400 	.word	0x58024400
 800323c:	08007144 	.word	0x08007144

08003240 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	223f      	movs	r2, #63	@ 0x3f
 800324e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003250:	4b1a      	ldr	r3, [pc, #104]	@ (80032bc <HAL_RCC_GetClockConfig+0x7c>)
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f003 0207 	and.w	r2, r3, #7
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800325c:	4b17      	ldr	r3, [pc, #92]	@ (80032bc <HAL_RCC_GetClockConfig+0x7c>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003268:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <HAL_RCC_GetClockConfig+0x7c>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 020f 	and.w	r2, r3, #15
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003274:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <HAL_RCC_GetClockConfig+0x7c>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003280:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <HAL_RCC_GetClockConfig+0x7c>)
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800328c:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <HAL_RCC_GetClockConfig+0x7c>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003298:	4b08      	ldr	r3, [pc, #32]	@ (80032bc <HAL_RCC_GetClockConfig+0x7c>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_RCC_GetClockConfig+0x80>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 020f 	and.w	r2, r3, #15
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	601a      	str	r2, [r3, #0]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	58024400 	.word	0x58024400
 80032c0:	52002000 	.word	0x52002000

080032c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c8:	b0ca      	sub	sp, #296	@ 0x128
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80032e8:	2500      	movs	r5, #0
 80032ea:	ea54 0305 	orrs.w	r3, r4, r5
 80032ee:	d049      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032fa:	d02f      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003300:	d828      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003302:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003306:	d01a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003308:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800330c:	d822      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003316:	d007      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003318:	e01c      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800331a:	4bb8      	ldr	r3, [pc, #736]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800331c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331e:	4ab7      	ldr	r2, [pc, #732]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003324:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003326:	e01a      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332c:	3308      	adds	r3, #8
 800332e:	2102      	movs	r1, #2
 8003330:	4618      	mov	r0, r3
 8003332:	f001 fc8f 	bl	8004c54 <RCCEx_PLL2_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800333c:	e00f      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800333e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003342:	3328      	adds	r3, #40	@ 0x28
 8003344:	2102      	movs	r1, #2
 8003346:	4618      	mov	r0, r3
 8003348:	f001 fd36 	bl	8004db8 <RCCEx_PLL3_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003352:	e004      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800335a:	e000      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800335c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003366:	4ba5      	ldr	r3, [pc, #660]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800336a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800336e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003372:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003374:	4aa1      	ldr	r2, [pc, #644]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003376:	430b      	orrs	r3, r1
 8003378:	6513      	str	r3, [r2, #80]	@ 0x50
 800337a:	e003      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003390:	f04f 0900 	mov.w	r9, #0
 8003394:	ea58 0309 	orrs.w	r3, r8, r9
 8003398:	d047      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800339a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d82a      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033a4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033c1 	.word	0x080033c1
 80033b0:	080033cf 	.word	0x080033cf
 80033b4:	080033e5 	.word	0x080033e5
 80033b8:	08003403 	.word	0x08003403
 80033bc:	08003403 	.word	0x08003403
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c0:	4b8e      	ldr	r3, [pc, #568]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	4a8d      	ldr	r2, [pc, #564]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033cc:	e01a      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d2:	3308      	adds	r3, #8
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 fc3c 	bl	8004c54 <RCCEx_PLL2_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033e2:	e00f      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e8:	3328      	adds	r3, #40	@ 0x28
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f001 fce3 	bl	8004db8 <RCCEx_PLL3_Config>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033f8:	e004      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003400:	e000      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800340c:	4b7b      	ldr	r3, [pc, #492]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800340e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003410:	f023 0107 	bic.w	r1, r3, #7
 8003414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341a:	4a78      	ldr	r2, [pc, #480]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800341c:	430b      	orrs	r3, r1
 800341e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003420:	e003      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003436:	f04f 0b00 	mov.w	fp, #0
 800343a:	ea5a 030b 	orrs.w	r3, sl, fp
 800343e:	d04c      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800344a:	d030      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800344c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003450:	d829      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003452:	2bc0      	cmp	r3, #192	@ 0xc0
 8003454:	d02d      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003456:	2bc0      	cmp	r3, #192	@ 0xc0
 8003458:	d825      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800345a:	2b80      	cmp	r3, #128	@ 0x80
 800345c:	d018      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800345e:	2b80      	cmp	r3, #128	@ 0x80
 8003460:	d821      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003466:	2b40      	cmp	r3, #64	@ 0x40
 8003468:	d007      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800346a:	e01c      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800346c:	4b63      	ldr	r3, [pc, #396]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800346e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003470:	4a62      	ldr	r2, [pc, #392]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003478:	e01c      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800347a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347e:	3308      	adds	r3, #8
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f001 fbe6 	bl	8004c54 <RCCEx_PLL2_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800348e:	e011      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003494:	3328      	adds	r3, #40	@ 0x28
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f001 fc8d 	bl	8004db8 <RCCEx_PLL3_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034a4:	e006      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ac:	e002      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034bc:	4b4f      	ldr	r3, [pc, #316]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ca:	4a4c      	ldr	r2, [pc, #304]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80034d0:	e003      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80034e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80034f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80034f4:	460b      	mov	r3, r1
 80034f6:	4313      	orrs	r3, r2
 80034f8:	d053      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003502:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003506:	d035      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003508:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800350c:	d82e      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800350e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003512:	d031      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003514:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003518:	d828      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800351a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800351e:	d01a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003524:	d822      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800352a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800352e:	d007      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003530:	e01c      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003532:	4b32      	ldr	r3, [pc, #200]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003536:	4a31      	ldr	r2, [pc, #196]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800353c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800353e:	e01c      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003544:	3308      	adds	r3, #8
 8003546:	2100      	movs	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f001 fb83 	bl	8004c54 <RCCEx_PLL2_Config>
 800354e:	4603      	mov	r3, r0
 8003550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003554:	e011      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355a:	3328      	adds	r3, #40	@ 0x28
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fc2a 	bl	8004db8 <RCCEx_PLL3_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800356a:	e006      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003572:	e002      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003574:	bf00      	nop
 8003576:	e000      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003582:	4b1e      	ldr	r3, [pc, #120]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003592:	4a1a      	ldr	r2, [pc, #104]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003594:	430b      	orrs	r3, r1
 8003596:	6593      	str	r3, [r2, #88]	@ 0x58
 8003598:	e003      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800359e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80035b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80035bc:	460b      	mov	r3, r1
 80035be:	4313      	orrs	r3, r2
 80035c0:	d056      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035ce:	d038      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035d4:	d831      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035da:	d034      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80035dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035e0:	d82b      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035e6:	d01d      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80035e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035ec:	d825      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80035f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80035f8:	e01f      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035fa:	bf00      	nop
 80035fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003600:	4ba2      	ldr	r3, [pc, #648]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	4aa1      	ldr	r2, [pc, #644]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800360a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800360c:	e01c      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003612:	3308      	adds	r3, #8
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fb1c 	bl	8004c54 <RCCEx_PLL2_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003622:	e011      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003628:	3328      	adds	r3, #40	@ 0x28
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f001 fbc3 	bl	8004db8 <RCCEx_PLL3_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003638:	e006      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003640:	e002      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003642:	bf00      	nop
 8003644:	e000      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003650:	4b8e      	ldr	r3, [pc, #568]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003654:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003660:	4a8a      	ldr	r2, [pc, #552]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003662:	430b      	orrs	r3, r1
 8003664:	6593      	str	r3, [r2, #88]	@ 0x58
 8003666:	e003      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800366c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800367c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003680:	2300      	movs	r3, #0
 8003682:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003686:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800368a:	460b      	mov	r3, r1
 800368c:	4313      	orrs	r3, r2
 800368e:	d03a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003696:	2b30      	cmp	r3, #48	@ 0x30
 8003698:	d01f      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800369a:	2b30      	cmp	r3, #48	@ 0x30
 800369c:	d819      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d00c      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d815      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d019      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036aa:	2b10      	cmp	r3, #16
 80036ac:	d111      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ae:	4b77      	ldr	r3, [pc, #476]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	4a76      	ldr	r2, [pc, #472]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036ba:	e011      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c0:	3308      	adds	r3, #8
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 fac5 	bl	8004c54 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036d0:	e006      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036d8:	e002      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036da:	bf00      	nop
 80036dc:	e000      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036e8:	4b68      	ldr	r3, [pc, #416]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f6:	4a65      	ldr	r2, [pc, #404]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f8:	430b      	orrs	r3, r1
 80036fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036fc:	e003      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003712:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800371c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003720:	460b      	mov	r3, r1
 8003722:	4313      	orrs	r3, r2
 8003724:	d051      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003730:	d035      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003732:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003736:	d82e      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003738:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800373c:	d031      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800373e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003742:	d828      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003748:	d01a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800374a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800374e:	d822      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003758:	d007      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800375a:	e01c      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800375c:	4b4b      	ldr	r3, [pc, #300]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	4a4a      	ldr	r2, [pc, #296]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003766:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003768:	e01c      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376e:	3308      	adds	r3, #8
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f001 fa6e 	bl	8004c54 <RCCEx_PLL2_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800377e:	e011      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003784:	3328      	adds	r3, #40	@ 0x28
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f001 fb15 	bl	8004db8 <RCCEx_PLL3_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003794:	e006      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800379c:	e002      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800379e:	bf00      	nop
 80037a0:	e000      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037ac:	4b37      	ldr	r3, [pc, #220]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ba:	4a34      	ldr	r2, [pc, #208]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037bc:	430b      	orrs	r3, r1
 80037be:	6513      	str	r3, [r2, #80]	@ 0x50
 80037c0:	e003      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80037e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80037e4:	460b      	mov	r3, r1
 80037e6:	4313      	orrs	r3, r2
 80037e8:	d056      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037f4:	d033      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80037f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037fa:	d82c      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003800:	d02f      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003802:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003806:	d826      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003808:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800380c:	d02b      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800380e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003812:	d820      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003818:	d012      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800381a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800381e:	d81a      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d022      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003828:	d115      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382e:	3308      	adds	r3, #8
 8003830:	2101      	movs	r1, #1
 8003832:	4618      	mov	r0, r3
 8003834:	f001 fa0e 	bl	8004c54 <RCCEx_PLL2_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800383e:	e015      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003844:	3328      	adds	r3, #40	@ 0x28
 8003846:	2101      	movs	r1, #1
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fab5 	bl	8004db8 <RCCEx_PLL3_Config>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003854:	e00a      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800385c:	e006      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800385e:	bf00      	nop
 8003860:	e004      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003862:	bf00      	nop
 8003864:	e002      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003866:	bf00      	nop
 8003868:	e000      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800386a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10d      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003874:	4b05      	ldr	r3, [pc, #20]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003878:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800387c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003880:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003882:	4a02      	ldr	r2, [pc, #8]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003884:	430b      	orrs	r3, r1
 8003886:	6513      	str	r3, [r2, #80]	@ 0x50
 8003888:	e006      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800388a:	bf00      	nop
 800388c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003894:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038a8:	2300      	movs	r3, #0
 80038aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	d055      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c4:	d033      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ca:	d82c      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d0:	d02f      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d6:	d826      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038dc:	d02b      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80038de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038e2:	d820      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038e8:	d012      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80038ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ee:	d81a      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d022      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80038f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038f8:	d115      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fe:	3308      	adds	r3, #8
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f001 f9a6 	bl	8004c54 <RCCEx_PLL2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800390e:	e015      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003914:	3328      	adds	r3, #40	@ 0x28
 8003916:	2101      	movs	r1, #1
 8003918:	4618      	mov	r0, r3
 800391a:	f001 fa4d 	bl	8004db8 <RCCEx_PLL3_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003924:	e00a      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800392c:	e006      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800392e:	bf00      	nop
 8003930:	e004      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003932:	bf00      	nop
 8003934:	e002      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800393a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10b      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003944:	4ba3      	ldr	r3, [pc, #652]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003948:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003950:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003954:	4a9f      	ldr	r2, [pc, #636]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003956:	430b      	orrs	r3, r1
 8003958:	6593      	str	r3, [r2, #88]	@ 0x58
 800395a:	e003      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003970:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800397a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d037      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800398e:	d00e      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003994:	d816      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800399a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800399e:	d111      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a0:	4b8c      	ldr	r3, [pc, #560]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a4:	4a8b      	ldr	r2, [pc, #556]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039ac:	e00f      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	3308      	adds	r3, #8
 80039b4:	2101      	movs	r1, #1
 80039b6:	4618      	mov	r0, r3
 80039b8:	f001 f94c 	bl	8004c54 <RCCEx_PLL2_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039c2:	e004      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039ca:	e000      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039d6:	4b7f      	ldr	r3, [pc, #508]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80039de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e4:	4a7b      	ldr	r2, [pc, #492]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039e6:	430b      	orrs	r3, r1
 80039e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ea:	e003      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a0a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4313      	orrs	r3, r2
 8003a12:	d039      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d81c      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a24 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a24:	08003a61 	.word	0x08003a61
 8003a28:	08003a35 	.word	0x08003a35
 8003a2c:	08003a43 	.word	0x08003a43
 8003a30:	08003a61 	.word	0x08003a61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a34:	4b67      	ldr	r3, [pc, #412]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	4a66      	ldr	r2, [pc, #408]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a40:	e00f      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	3308      	adds	r3, #8
 8003a48:	2102      	movs	r1, #2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 f902 	bl	8004c54 <RCCEx_PLL2_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a56:	e004      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a5e:	e000      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a6a:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a6e:	f023 0103 	bic.w	r1, r3, #3
 8003a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a78:	4a56      	ldr	r2, [pc, #344]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a7e:	e003      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f000 809f 	beq.w	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a4a      	ldr	r2, [pc, #296]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ab6:	f7fd fb05 	bl	80010c4 <HAL_GetTick>
 8003aba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac0:	f7fd fb00 	bl	80010c4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b64      	cmp	r3, #100	@ 0x64
 8003ace:	d903      	bls.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ad6:	e005      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0ed      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d179      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003aec:	4b39      	ldr	r3, [pc, #228]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003af8:	4053      	eors	r3, r2
 8003afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d015      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b02:	4b34      	ldr	r3, [pc, #208]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b0e:	4b31      	ldr	r3, [pc, #196]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b12:	4a30      	ldr	r2, [pc, #192]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b26:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b3a:	d118      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fac2 	bl	80010c4 <HAL_GetTick>
 8003b40:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b44:	e00d      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fd fabd 	bl	80010c4 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b50:	1ad2      	subs	r2, r2, r3
 8003b52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d903      	bls.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003b60:	e005      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b62:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0eb      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d129      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b86:	d10e      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b88:	4b12      	ldr	r3, [pc, #72]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b98:	091a      	lsrs	r2, r3, #4
 8003b9a:	4b10      	ldr	r3, [pc, #64]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	6113      	str	r3, [r2, #16]
 8003ba4:	e005      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bb0:	6113      	str	r3, [r2, #16]
 8003bb2:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc2:	4a04      	ldr	r2, [pc, #16]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc8:	e00e      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003bd2:	e009      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003bd4:	58024400 	.word	0x58024400
 8003bd8:	58024800 	.word	0x58024800
 8003bdc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f002 0301 	and.w	r3, r2, #1
 8003bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bfe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f000 8089 	beq.w	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c10:	2b28      	cmp	r3, #40	@ 0x28
 8003c12:	d86b      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c14:	a201      	add	r2, pc, #4	@ (adr r2, 8003c1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003cf5 	.word	0x08003cf5
 8003c20:	08003ced 	.word	0x08003ced
 8003c24:	08003ced 	.word	0x08003ced
 8003c28:	08003ced 	.word	0x08003ced
 8003c2c:	08003ced 	.word	0x08003ced
 8003c30:	08003ced 	.word	0x08003ced
 8003c34:	08003ced 	.word	0x08003ced
 8003c38:	08003ced 	.word	0x08003ced
 8003c3c:	08003cc1 	.word	0x08003cc1
 8003c40:	08003ced 	.word	0x08003ced
 8003c44:	08003ced 	.word	0x08003ced
 8003c48:	08003ced 	.word	0x08003ced
 8003c4c:	08003ced 	.word	0x08003ced
 8003c50:	08003ced 	.word	0x08003ced
 8003c54:	08003ced 	.word	0x08003ced
 8003c58:	08003ced 	.word	0x08003ced
 8003c5c:	08003cd7 	.word	0x08003cd7
 8003c60:	08003ced 	.word	0x08003ced
 8003c64:	08003ced 	.word	0x08003ced
 8003c68:	08003ced 	.word	0x08003ced
 8003c6c:	08003ced 	.word	0x08003ced
 8003c70:	08003ced 	.word	0x08003ced
 8003c74:	08003ced 	.word	0x08003ced
 8003c78:	08003ced 	.word	0x08003ced
 8003c7c:	08003cf5 	.word	0x08003cf5
 8003c80:	08003ced 	.word	0x08003ced
 8003c84:	08003ced 	.word	0x08003ced
 8003c88:	08003ced 	.word	0x08003ced
 8003c8c:	08003ced 	.word	0x08003ced
 8003c90:	08003ced 	.word	0x08003ced
 8003c94:	08003ced 	.word	0x08003ced
 8003c98:	08003ced 	.word	0x08003ced
 8003c9c:	08003cf5 	.word	0x08003cf5
 8003ca0:	08003ced 	.word	0x08003ced
 8003ca4:	08003ced 	.word	0x08003ced
 8003ca8:	08003ced 	.word	0x08003ced
 8003cac:	08003ced 	.word	0x08003ced
 8003cb0:	08003ced 	.word	0x08003ced
 8003cb4:	08003ced 	.word	0x08003ced
 8003cb8:	08003ced 	.word	0x08003ced
 8003cbc:	08003cf5 	.word	0x08003cf5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 ffc3 	bl	8004c54 <RCCEx_PLL2_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cd4:	e00f      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cda:	3328      	adds	r3, #40	@ 0x28
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 f86a 	bl	8004db8 <RCCEx_PLL3_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cea:	e004      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cfe:	4bbf      	ldr	r3, [pc, #764]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d02:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d0c:	4abb      	ldr	r2, [pc, #748]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d12:	e003      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f002 0302 	and.w	r3, r2, #2
 8003d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d36:	460b      	mov	r3, r1
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	d041      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d42:	2b05      	cmp	r3, #5
 8003d44:	d824      	bhi.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d46:	a201      	add	r2, pc, #4	@ (adr r2, 8003d4c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4c:	08003d99 	.word	0x08003d99
 8003d50:	08003d65 	.word	0x08003d65
 8003d54:	08003d7b 	.word	0x08003d7b
 8003d58:	08003d99 	.word	0x08003d99
 8003d5c:	08003d99 	.word	0x08003d99
 8003d60:	08003d99 	.word	0x08003d99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d68:	3308      	adds	r3, #8
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 ff71 	bl	8004c54 <RCCEx_PLL2_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d78:	e00f      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7e:	3328      	adds	r3, #40	@ 0x28
 8003d80:	2101      	movs	r1, #1
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 f818 	bl	8004db8 <RCCEx_PLL3_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d8e:	e004      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d96:	e000      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003da2:	4b96      	ldr	r3, [pc, #600]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da6:	f023 0107 	bic.w	r1, r3, #7
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003db0:	4a92      	ldr	r2, [pc, #584]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003db2:	430b      	orrs	r3, r1
 8003db4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003db6:	e003      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	f002 0304 	and.w	r3, r2, #4
 8003dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dd6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	d044      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d825      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003dec:	a201      	add	r2, pc, #4	@ (adr r2, 8003df4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003e41 	.word	0x08003e41
 8003df8:	08003e0d 	.word	0x08003e0d
 8003dfc:	08003e23 	.word	0x08003e23
 8003e00:	08003e41 	.word	0x08003e41
 8003e04:	08003e41 	.word	0x08003e41
 8003e08:	08003e41 	.word	0x08003e41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	3308      	adds	r3, #8
 8003e12:	2101      	movs	r1, #1
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 ff1d 	bl	8004c54 <RCCEx_PLL2_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e20:	e00f      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e26:	3328      	adds	r3, #40	@ 0x28
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 ffc4 	bl	8004db8 <RCCEx_PLL3_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e36:	e004      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e3e:	e000      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e4a:	4b6c      	ldr	r3, [pc, #432]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4e:	f023 0107 	bic.w	r1, r3, #7
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e5a:	4a68      	ldr	r2, [pc, #416]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e60:	e003      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f002 0320 	and.w	r3, r2, #32
 8003e76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e84:	460b      	mov	r3, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	d055      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e96:	d033      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e9c:	d82c      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea2:	d02f      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea8:	d826      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003eae:	d02b      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003eb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003eb4:	d820      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eba:	d012      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ebc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ec0:	d81a      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d022      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003ec6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eca:	d115      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 febd 	bl	8004c54 <RCCEx_PLL2_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ee0:	e015      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee6:	3328      	adds	r3, #40	@ 0x28
 8003ee8:	2102      	movs	r1, #2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 ff64 	bl	8004db8 <RCCEx_PLL3_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003efe:	e006      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f00:	bf00      	nop
 8003f02:	e004      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f04:	bf00      	nop
 8003f06:	e002      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f08:	bf00      	nop
 8003f0a:	e000      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10b      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f16:	4b39      	ldr	r3, [pc, #228]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f26:	4a35      	ldr	r2, [pc, #212]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f2c:	e003      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f46:	2300      	movs	r3, #0
 8003f48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4313      	orrs	r3, r2
 8003f54:	d058      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f62:	d033      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f68:	d82c      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f6e:	d02f      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f74:	d826      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f7a:	d02b      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f80:	d820      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f86:	d012      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f8c:	d81a      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d022      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f96:	d115      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fe57 	bl	8004c54 <RCCEx_PLL2_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fac:	e015      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb2:	3328      	adds	r3, #40	@ 0x28
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fefe 	bl	8004db8 <RCCEx_PLL3_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fc2:	e00a      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fca:	e006      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fcc:	bf00      	nop
 8003fce:	e004      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fd0:	bf00      	nop
 8003fd2:	e002      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fd4:	bf00      	nop
 8003fd6:	e000      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10e      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fe2:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ff2:	4a02      	ldr	r2, [pc, #8]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ff8:	e006      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003ffa:	bf00      	nop
 8003ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004004:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004018:	2300      	movs	r3, #0
 800401a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800401e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004022:	460b      	mov	r3, r1
 8004024:	4313      	orrs	r3, r2
 8004026:	d055      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004030:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004034:	d033      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004036:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800403a:	d82c      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004040:	d02f      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004046:	d826      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004048:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800404c:	d02b      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800404e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004052:	d820      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004058:	d012      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800405a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800405e:	d81a      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d022      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004068:	d115      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406e:	3308      	adds	r3, #8
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fdee 	bl	8004c54 <RCCEx_PLL2_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800407e:	e015      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004084:	3328      	adds	r3, #40	@ 0x28
 8004086:	2102      	movs	r1, #2
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fe95 	bl	8004db8 <RCCEx_PLL3_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004094:	e00a      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800409c:	e006      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800409e:	bf00      	nop
 80040a0:	e004      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040a2:	bf00      	nop
 80040a4:	e002      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040a6:	bf00      	nop
 80040a8:	e000      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10b      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040b4:	4ba1      	ldr	r3, [pc, #644]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040c4:	4a9d      	ldr	r2, [pc, #628]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040c6:	430b      	orrs	r3, r1
 80040c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ca:	e003      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f002 0308 	and.w	r3, r2, #8
 80040e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040e4:	2300      	movs	r3, #0
 80040e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80040ee:	460b      	mov	r3, r1
 80040f0:	4313      	orrs	r3, r2
 80040f2:	d01e      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004100:	d10c      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004106:	3328      	adds	r3, #40	@ 0x28
 8004108:	2102      	movs	r1, #2
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fe54 	bl	8004db8 <RCCEx_PLL3_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800411c:	4b87      	ldr	r3, [pc, #540]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800411e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004120:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800412c:	4a83      	ldr	r2, [pc, #524]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800412e:	430b      	orrs	r3, r1
 8004130:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413a:	f002 0310 	and.w	r3, r2, #16
 800413e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004142:	2300      	movs	r3, #0
 8004144:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004148:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800414c:	460b      	mov	r3, r1
 800414e:	4313      	orrs	r3, r2
 8004150:	d01e      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800415a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800415e:	d10c      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004164:	3328      	adds	r3, #40	@ 0x28
 8004166:	2102      	movs	r1, #2
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fe25 	bl	8004db8 <RCCEx_PLL3_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800417a:	4b70      	ldr	r3, [pc, #448]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004186:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800418a:	4a6c      	ldr	r2, [pc, #432]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800418c:	430b      	orrs	r3, r1
 800418e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800419c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80041aa:	460b      	mov	r3, r1
 80041ac:	4313      	orrs	r3, r2
 80041ae:	d03e      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041bc:	d022      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041c2:	d81b      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041cc:	d00b      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041ce:	e015      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d4:	3308      	adds	r3, #8
 80041d6:	2100      	movs	r1, #0
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fd3b 	bl	8004c54 <RCCEx_PLL2_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041e4:	e00f      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ea:	3328      	adds	r3, #40	@ 0x28
 80041ec:	2102      	movs	r1, #2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fde2 	bl	8004db8 <RCCEx_PLL3_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041fa:	e004      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800420e:	4b4b      	ldr	r3, [pc, #300]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004212:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800421e:	4a47      	ldr	r2, [pc, #284]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004220:	430b      	orrs	r3, r1
 8004222:	6593      	str	r3, [r2, #88]	@ 0x58
 8004224:	e003      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800422a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800423a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800423c:	2300      	movs	r3, #0
 800423e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004240:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004244:	460b      	mov	r3, r1
 8004246:	4313      	orrs	r3, r2
 8004248:	d03b      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004252:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004256:	d01f      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004258:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800425c:	d818      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800425e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004262:	d003      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004264:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004268:	d007      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800426a:	e011      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426c:	4b33      	ldr	r3, [pc, #204]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	4a32      	ldr	r2, [pc, #200]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004278:	e00f      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800427a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427e:	3328      	adds	r3, #40	@ 0x28
 8004280:	2101      	movs	r1, #1
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fd98 	bl	8004db8 <RCCEx_PLL3_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800428e:	e004      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004296:	e000      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10b      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042a2:	4b26      	ldr	r3, [pc, #152]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b2:	4a22      	ldr	r2, [pc, #136]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80042b8:	e003      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80042d0:	2300      	movs	r3, #0
 80042d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80042d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80042d8:	460b      	mov	r3, r1
 80042da:	4313      	orrs	r3, r2
 80042dc:	d034      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ec:	d007      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80042ee:	e011      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f0:	4b12      	ldr	r3, [pc, #72]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f4:	4a11      	ldr	r2, [pc, #68]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042fc:	e00e      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	3308      	adds	r3, #8
 8004304:	2102      	movs	r1, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fca4 	bl	8004c54 <RCCEx_PLL2_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004312:	e003      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800431a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10d      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004324:	4b05      	ldr	r3, [pc, #20]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004328:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004332:	4a02      	ldr	r2, [pc, #8]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004334:	430b      	orrs	r3, r1
 8004336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004338:	e006      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800433a:	bf00      	nop
 800433c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004354:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004356:	2300      	movs	r3, #0
 8004358:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800435a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800435e:	460b      	mov	r3, r1
 8004360:	4313      	orrs	r3, r2
 8004362:	d00c      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004368:	3328      	adds	r3, #40	@ 0x28
 800436a:	2102      	movs	r1, #2
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fd23 	bl	8004db8 <RCCEx_PLL3_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800438a:	663b      	str	r3, [r7, #96]	@ 0x60
 800438c:	2300      	movs	r3, #0
 800438e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004390:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004394:	460b      	mov	r3, r1
 8004396:	4313      	orrs	r3, r2
 8004398:	d038      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043a6:	d018      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80043a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ac:	d811      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b2:	d014      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b8:	d80b      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d011      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043c2:	d106      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c4:	4bc3      	ldr	r3, [pc, #780]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	4ac2      	ldr	r2, [pc, #776]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043d0:	e008      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043d8:	e004      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043da:	bf00      	nop
 80043dc:	e002      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043ec:	4bb9      	ldr	r3, [pc, #740]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043fc:	4ab5      	ldr	r2, [pc, #724]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043fe:	430b      	orrs	r3, r1
 8004400:	6553      	str	r3, [r2, #84]	@ 0x54
 8004402:	e003      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004408:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800440c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800441a:	2300      	movs	r3, #0
 800441c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800441e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004422:	460b      	mov	r3, r1
 8004424:	4313      	orrs	r3, r2
 8004426:	d009      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004428:	4baa      	ldr	r3, [pc, #680]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800442a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800442c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004436:	4aa7      	ldr	r2, [pc, #668]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004438:	430b      	orrs	r3, r1
 800443a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004448:	653b      	str	r3, [r7, #80]	@ 0x50
 800444a:	2300      	movs	r3, #0
 800444c:	657b      	str	r3, [r7, #84]	@ 0x54
 800444e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004452:	460b      	mov	r3, r1
 8004454:	4313      	orrs	r3, r2
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004458:	4b9e      	ldr	r3, [pc, #632]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004464:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004468:	4a9a      	ldr	r2, [pc, #616]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446a:	430b      	orrs	r3, r1
 800446c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800447a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800447c:	2300      	movs	r3, #0
 800447e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004480:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004484:	460b      	mov	r3, r1
 8004486:	4313      	orrs	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800448a:	4b92      	ldr	r3, [pc, #584]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800448c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800448e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004498:	4a8e      	ldr	r2, [pc, #568]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800449a:	430b      	orrs	r3, r1
 800449c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80044aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ac:	2300      	movs	r3, #0
 80044ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80044b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80044b4:	460b      	mov	r3, r1
 80044b6:	4313      	orrs	r3, r2
 80044b8:	d00e      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ba:	4b86      	ldr	r3, [pc, #536]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	4a85      	ldr	r2, [pc, #532]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044c4:	6113      	str	r3, [r2, #16]
 80044c6:	4b83      	ldr	r3, [pc, #524]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c8:	6919      	ldr	r1, [r3, #16]
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044d2:	4a80      	ldr	r2, [pc, #512]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80044e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044e6:	2300      	movs	r3, #0
 80044e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80044ee:	460b      	mov	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	d009      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044f4:	4b77      	ldr	r3, [pc, #476]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	4a74      	ldr	r2, [pc, #464]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004504:	430b      	orrs	r3, r1
 8004506:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004514:	633b      	str	r3, [r7, #48]	@ 0x30
 8004516:	2300      	movs	r3, #0
 8004518:	637b      	str	r3, [r7, #52]	@ 0x34
 800451a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800451e:	460b      	mov	r3, r1
 8004520:	4313      	orrs	r3, r2
 8004522:	d00a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004524:	4b6b      	ldr	r3, [pc, #428]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004528:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004534:	4a67      	ldr	r2, [pc, #412]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004536:	430b      	orrs	r3, r1
 8004538:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	2100      	movs	r1, #0
 8004544:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800454c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004550:	460b      	mov	r3, r1
 8004552:	4313      	orrs	r3, r2
 8004554:	d011      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455a:	3308      	adds	r3, #8
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fb78 	bl	8004c54 <RCCEx_PLL2_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800456a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	2100      	movs	r1, #0
 8004584:	6239      	str	r1, [r7, #32]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
 800458c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004590:	460b      	mov	r3, r1
 8004592:	4313      	orrs	r3, r2
 8004594:	d011      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	3308      	adds	r3, #8
 800459c:	2101      	movs	r1, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fb58 	bl	8004c54 <RCCEx_PLL2_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	2100      	movs	r1, #0
 80045c4:	61b9      	str	r1, [r7, #24]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045d0:	460b      	mov	r3, r1
 80045d2:	4313      	orrs	r3, r2
 80045d4:	d011      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	3308      	adds	r3, #8
 80045dc:	2102      	movs	r1, #2
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fb38 	bl	8004c54 <RCCEx_PLL2_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	2100      	movs	r1, #0
 8004604:	6139      	str	r1, [r7, #16]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004610:	460b      	mov	r3, r1
 8004612:	4313      	orrs	r3, r2
 8004614:	d011      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461a:	3328      	adds	r3, #40	@ 0x28
 800461c:	2100      	movs	r1, #0
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fbca 	bl	8004db8 <RCCEx_PLL3_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800462a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	2100      	movs	r1, #0
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004650:	460b      	mov	r3, r1
 8004652:	4313      	orrs	r3, r2
 8004654:	d011      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465a:	3328      	adds	r3, #40	@ 0x28
 800465c:	2101      	movs	r1, #1
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fbaa 	bl	8004db8 <RCCEx_PLL3_Config>
 8004664:	4603      	mov	r3, r0
 8004666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800466a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	2100      	movs	r1, #0
 8004684:	6039      	str	r1, [r7, #0]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	607b      	str	r3, [r7, #4]
 800468c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004690:	460b      	mov	r3, r1
 8004692:	4313      	orrs	r3, r2
 8004694:	d011      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469a:	3328      	adds	r3, #40	@ 0x28
 800469c:	2102      	movs	r1, #2
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fb8a 	bl	8004db8 <RCCEx_PLL3_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80046ba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e000      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80046ce:	46bd      	mov	sp, r7
 80046d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046d4:	58024400 	.word	0x58024400

080046d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046dc:	f7fe fd54 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4904      	ldr	r1, [pc, #16]	@ (8004700 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	58024400 	.word	0x58024400
 8004700:	08007144 	.word	0x08007144

08004704 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	@ 0x24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800470c:	4ba1      	ldr	r3, [pc, #644]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800470e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004716:	4b9f      	ldr	r3, [pc, #636]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471a:	0b1b      	lsrs	r3, r3, #12
 800471c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004720:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004722:	4b9c      	ldr	r3, [pc, #624]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800472e:	4b99      	ldr	r3, [pc, #612]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004732:	08db      	lsrs	r3, r3, #3
 8004734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8111 	beq.w	8004974 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b02      	cmp	r3, #2
 8004756:	f000 8083 	beq.w	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b02      	cmp	r3, #2
 800475e:	f200 80a1 	bhi.w	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d056      	beq.n	800481c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800476e:	e099      	b.n	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004770:	4b88      	ldr	r3, [pc, #544]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d02d      	beq.n	80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800477c:	4b85      	ldr	r3, [pc, #532]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	08db      	lsrs	r3, r3, #3
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	4a84      	ldr	r2, [pc, #528]	@ (8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004788:	fa22 f303 	lsr.w	r3, r2, r3
 800478c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a6:	4b7b      	ldr	r3, [pc, #492]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047d6:	e087      	b.n	80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800481a:	e065      	b.n	80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b59      	ldr	r3, [pc, #356]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004842:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485e:	e043      	b.n	80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b48      	ldr	r3, [pc, #288]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a03 	vldr	s12, [r7, #12]
 8004886:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048a2:	e021      	b.n	80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b6:	4b37      	ldr	r3, [pc, #220]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	0a5b      	lsrs	r3, r3, #9
 80048ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004902:	edd7 6a07 	vldr	s13, [r7, #28]
 8004906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800490e:	ee17 2a90 	vmov	r2, s15
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004916:	4b1f      	ldr	r3, [pc, #124]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491a:	0c1b      	lsrs	r3, r3, #16
 800491c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004920:	ee07 3a90 	vmov	s15, r3
 8004924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004928:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800492c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004930:	edd7 6a07 	vldr	s13, [r7, #28]
 8004934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800493c:	ee17 2a90 	vmov	r2, s15
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004944:	4b13      	ldr	r3, [pc, #76]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004948:	0e1b      	lsrs	r3, r3, #24
 800494a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004956:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800495a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800495e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800496a:	ee17 2a90 	vmov	r2, s15
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004972:	e008      	b.n	8004986 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	609a      	str	r2, [r3, #8]
}
 8004986:	bf00      	nop
 8004988:	3724      	adds	r7, #36	@ 0x24
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	58024400 	.word	0x58024400
 8004998:	03d09000 	.word	0x03d09000
 800499c:	46000000 	.word	0x46000000
 80049a0:	4c742400 	.word	0x4c742400
 80049a4:	4a742400 	.word	0x4a742400
 80049a8:	4bbebc20 	.word	0x4bbebc20

080049ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b089      	sub	sp, #36	@ 0x24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049b4:	4ba1      	ldr	r3, [pc, #644]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049be:	4b9f      	ldr	r3, [pc, #636]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c2:	0d1b      	lsrs	r3, r3, #20
 80049c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049ca:	4b9c      	ldr	r3, [pc, #624]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	0a1b      	lsrs	r3, r3, #8
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049d6:	4b99      	ldr	r3, [pc, #612]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049da:	08db      	lsrs	r3, r3, #3
 80049dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8111 	beq.w	8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	f000 8083 	beq.w	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	f200 80a1 	bhi.w	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d056      	beq.n	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a16:	e099      	b.n	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a18:	4b88      	ldr	r3, [pc, #544]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d02d      	beq.n	8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a24:	4b85      	ldr	r3, [pc, #532]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	08db      	lsrs	r3, r3, #3
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	4a84      	ldr	r2, [pc, #528]	@ (8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	ee07 3a90 	vmov	s15, r3
 8004a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a7e:	e087      	b.n	8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a92:	4b6a      	ldr	r3, [pc, #424]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ac2:	e065      	b.n	8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b59      	ldr	r3, [pc, #356]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b06:	e043      	b.n	8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b48      	ldr	r3, [pc, #288]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b4a:	e021      	b.n	8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5e:	4b37      	ldr	r3, [pc, #220]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b90:	4b2a      	ldr	r3, [pc, #168]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b94:	0a5b      	lsrs	r3, r3, #9
 8004b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb6:	ee17 2a90 	vmov	r2, s15
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc8:	ee07 3a90 	vmov	s15, r3
 8004bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be4:	ee17 2a90 	vmov	r2, s15
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004bec:	4b13      	ldr	r3, [pc, #76]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	0e1b      	lsrs	r3, r3, #24
 8004bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c12:	ee17 2a90 	vmov	r2, s15
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c1a:	e008      	b.n	8004c2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	609a      	str	r2, [r3, #8]
}
 8004c2e:	bf00      	nop
 8004c30:	3724      	adds	r7, #36	@ 0x24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	58024400 	.word	0x58024400
 8004c40:	03d09000 	.word	0x03d09000
 8004c44:	46000000 	.word	0x46000000
 8004c48:	4c742400 	.word	0x4c742400
 8004c4c:	4a742400 	.word	0x4a742400
 8004c50:	4bbebc20 	.word	0x4bbebc20

08004c54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c62:	4b53      	ldr	r3, [pc, #332]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d101      	bne.n	8004c72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e099      	b.n	8004da6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c72:	4b4f      	ldr	r3, [pc, #316]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a4e      	ldr	r2, [pc, #312]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004c78:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7e:	f7fc fa21 	bl	80010c4 <HAL_GetTick>
 8004c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c84:	e008      	b.n	8004c98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c86:	f7fc fa1d 	bl	80010c4 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e086      	b.n	8004da6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c98:	4b45      	ldr	r3, [pc, #276]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f0      	bne.n	8004c86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ca4:	4b42      	ldr	r3, [pc, #264]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	031b      	lsls	r3, r3, #12
 8004cb2:	493f      	ldr	r1, [pc, #252]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	025b      	lsls	r3, r3, #9
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	041b      	lsls	r3, r3, #16
 8004cd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	061b      	lsls	r3, r3, #24
 8004ce4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ce8:	4931      	ldr	r1, [pc, #196]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cee:	4b30      	ldr	r3, [pc, #192]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	492d      	ldr	r1, [pc, #180]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d00:	4b2b      	ldr	r3, [pc, #172]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d04:	f023 0220 	bic.w	r2, r3, #32
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	4928      	ldr	r1, [pc, #160]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d12:	4b27      	ldr	r3, [pc, #156]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d16:	4a26      	ldr	r2, [pc, #152]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d18:	f023 0310 	bic.w	r3, r3, #16
 8004d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d1e:	4b24      	ldr	r3, [pc, #144]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d22:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <RCCEx_PLL2_Config+0x160>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	69d2      	ldr	r2, [r2, #28]
 8004d2a:	00d2      	lsls	r2, r2, #3
 8004d2c:	4920      	ldr	r1, [pc, #128]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d32:	4b1f      	ldr	r3, [pc, #124]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	4a1e      	ldr	r2, [pc, #120]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	f043 0310 	orr.w	r3, r3, #16
 8004d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d44:	4b1a      	ldr	r3, [pc, #104]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d48:	4a19      	ldr	r2, [pc, #100]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d50:	e00f      	b.n	8004d72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d106      	bne.n	8004d66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d58:	4b15      	ldr	r3, [pc, #84]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5c:	4a14      	ldr	r2, [pc, #80]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d64:	e005      	b.n	8004d72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d66:	4b12      	ldr	r3, [pc, #72]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	4a11      	ldr	r2, [pc, #68]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d72:	4b0f      	ldr	r3, [pc, #60]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a0e      	ldr	r2, [pc, #56]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7e:	f7fc f9a1 	bl	80010c4 <HAL_GetTick>
 8004d82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d84:	e008      	b.n	8004d98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d86:	f7fc f99d 	bl	80010c4 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e006      	b.n	8004da6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d98:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <RCCEx_PLL2_Config+0x15c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	58024400 	.word	0x58024400
 8004db4:	ffff0007 	.word	0xffff0007

08004db8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dc6:	4b53      	ldr	r3, [pc, #332]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d101      	bne.n	8004dd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e099      	b.n	8004f0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a4e      	ldr	r2, [pc, #312]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004ddc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de2:	f7fc f96f 	bl	80010c4 <HAL_GetTick>
 8004de6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004de8:	e008      	b.n	8004dfc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dea:	f7fc f96b 	bl	80010c4 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e086      	b.n	8004f0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dfc:	4b45      	ldr	r3, [pc, #276]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f0      	bne.n	8004dea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e08:	4b42      	ldr	r3, [pc, #264]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	051b      	lsls	r3, r3, #20
 8004e16:	493f      	ldr	r1, [pc, #252]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	025b      	lsls	r3, r3, #9
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	061b      	lsls	r3, r3, #24
 8004e48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e4c:	4931      	ldr	r1, [pc, #196]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e52:	4b30      	ldr	r3, [pc, #192]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	492d      	ldr	r1, [pc, #180]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e64:	4b2b      	ldr	r3, [pc, #172]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	4928      	ldr	r1, [pc, #160]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e76:	4b27      	ldr	r3, [pc, #156]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	4a26      	ldr	r2, [pc, #152]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e82:	4b24      	ldr	r3, [pc, #144]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e86:	4b24      	ldr	r3, [pc, #144]	@ (8004f18 <RCCEx_PLL3_Config+0x160>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	69d2      	ldr	r2, [r2, #28]
 8004e8e:	00d2      	lsls	r2, r2, #3
 8004e90:	4920      	ldr	r1, [pc, #128]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e96:	4b1f      	ldr	r3, [pc, #124]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eac:	4a19      	ldr	r2, [pc, #100]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004eae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004eb4:	e00f      	b.n	8004ed6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d106      	bne.n	8004eca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ebc:	4b15      	ldr	r3, [pc, #84]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	4a14      	ldr	r2, [pc, #80]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ec8:	e005      	b.n	8004ed6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eca:	4b12      	ldr	r3, [pc, #72]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	4a11      	ldr	r2, [pc, #68]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a0e      	ldr	r2, [pc, #56]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee2:	f7fc f8ef 	bl	80010c4 <HAL_GetTick>
 8004ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ee8:	e008      	b.n	8004efc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004eea:	f7fc f8eb 	bl	80010c4 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e006      	b.n	8004f0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004efc:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <RCCEx_PLL3_Config+0x15c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	58024400 	.word	0x58024400
 8004f18:	ffff0007 	.word	0xffff0007

08004f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e049      	b.n	8004fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f841 	bl	8004fca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f000 f9e8 	bl	8005330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d001      	beq.n	8004ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e054      	b.n	80050a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a26      	ldr	r2, [pc, #152]	@ (80050b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d022      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005022:	d01d      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a22      	ldr	r2, [pc, #136]	@ (80050b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d018      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a21      	ldr	r2, [pc, #132]	@ (80050b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1f      	ldr	r2, [pc, #124]	@ (80050bc <HAL_TIM_Base_Start_IT+0xdc>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00e      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1e      	ldr	r2, [pc, #120]	@ (80050c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1c      	ldr	r2, [pc, #112]	@ (80050c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1b      	ldr	r2, [pc, #108]	@ (80050c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d115      	bne.n	800508c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	4b19      	ldr	r3, [pc, #100]	@ (80050cc <HAL_TIM_Base_Start_IT+0xec>)
 8005068:	4013      	ands	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b06      	cmp	r3, #6
 8005070:	d015      	beq.n	800509e <HAL_TIM_Base_Start_IT+0xbe>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005078:	d011      	beq.n	800509e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0201 	orr.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508a:	e008      	b.n	800509e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	e000      	b.n	80050a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40010000 	.word	0x40010000
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40000800 	.word	0x40000800
 80050bc:	40000c00 	.word	0x40000c00
 80050c0:	40010400 	.word	0x40010400
 80050c4:	40001800 	.word	0x40001800
 80050c8:	40014000 	.word	0x40014000
 80050cc:	00010007 	.word	0x00010007

080050d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d020      	beq.n	8005134 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01b      	beq.n	8005134 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0202 	mvn.w	r2, #2
 8005104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f8e9 	bl	80052f2 <HAL_TIM_IC_CaptureCallback>
 8005120:	e005      	b.n	800512e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f8db 	bl	80052de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f8ec 	bl	8005306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d020      	beq.n	8005180 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01b      	beq.n	8005180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0204 	mvn.w	r2, #4
 8005150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f8c3 	bl	80052f2 <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f8b5 	bl	80052de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f8c6 	bl	8005306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d020      	beq.n	80051cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01b      	beq.n	80051cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0208 	mvn.w	r2, #8
 800519c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2204      	movs	r2, #4
 80051a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f89d 	bl	80052f2 <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f88f 	bl	80052de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f8a0 	bl	8005306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 0310 	and.w	r3, r3, #16
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d020      	beq.n	8005218 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01b      	beq.n	8005218 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0210 	mvn.w	r2, #16
 80051e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2208      	movs	r2, #8
 80051ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f877 	bl	80052f2 <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f869 	bl	80052de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f87a 	bl	8005306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00c      	beq.n	800523c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0201 	mvn.w	r2, #1
 8005234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fb fc78 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f913 	bl	8005490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00c      	beq.n	800528e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f90b 	bl	80054a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00c      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f834 	bl	800531a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00c      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f06f 0220 	mvn.w	r2, #32
 80052ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f8d3 	bl	800547c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a46      	ldr	r2, [pc, #280]	@ (800545c <TIM_Base_SetConfig+0x12c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <TIM_Base_SetConfig+0x40>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800534e:	d00f      	beq.n	8005370 <TIM_Base_SetConfig+0x40>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a43      	ldr	r2, [pc, #268]	@ (8005460 <TIM_Base_SetConfig+0x130>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00b      	beq.n	8005370 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a42      	ldr	r2, [pc, #264]	@ (8005464 <TIM_Base_SetConfig+0x134>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d007      	beq.n	8005370 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a41      	ldr	r2, [pc, #260]	@ (8005468 <TIM_Base_SetConfig+0x138>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d003      	beq.n	8005370 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a40      	ldr	r2, [pc, #256]	@ (800546c <TIM_Base_SetConfig+0x13c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d108      	bne.n	8005382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a35      	ldr	r2, [pc, #212]	@ (800545c <TIM_Base_SetConfig+0x12c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01f      	beq.n	80053ca <TIM_Base_SetConfig+0x9a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005390:	d01b      	beq.n	80053ca <TIM_Base_SetConfig+0x9a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a32      	ldr	r2, [pc, #200]	@ (8005460 <TIM_Base_SetConfig+0x130>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d017      	beq.n	80053ca <TIM_Base_SetConfig+0x9a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a31      	ldr	r2, [pc, #196]	@ (8005464 <TIM_Base_SetConfig+0x134>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <TIM_Base_SetConfig+0x9a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a30      	ldr	r2, [pc, #192]	@ (8005468 <TIM_Base_SetConfig+0x138>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00f      	beq.n	80053ca <TIM_Base_SetConfig+0x9a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2f      	ldr	r2, [pc, #188]	@ (800546c <TIM_Base_SetConfig+0x13c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00b      	beq.n	80053ca <TIM_Base_SetConfig+0x9a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005470 <TIM_Base_SetConfig+0x140>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d007      	beq.n	80053ca <TIM_Base_SetConfig+0x9a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2d      	ldr	r2, [pc, #180]	@ (8005474 <TIM_Base_SetConfig+0x144>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d003      	beq.n	80053ca <TIM_Base_SetConfig+0x9a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005478 <TIM_Base_SetConfig+0x148>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d108      	bne.n	80053dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a16      	ldr	r2, [pc, #88]	@ (800545c <TIM_Base_SetConfig+0x12c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00f      	beq.n	8005428 <TIM_Base_SetConfig+0xf8>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a18      	ldr	r2, [pc, #96]	@ (800546c <TIM_Base_SetConfig+0x13c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00b      	beq.n	8005428 <TIM_Base_SetConfig+0xf8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a17      	ldr	r2, [pc, #92]	@ (8005470 <TIM_Base_SetConfig+0x140>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d007      	beq.n	8005428 <TIM_Base_SetConfig+0xf8>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a16      	ldr	r2, [pc, #88]	@ (8005474 <TIM_Base_SetConfig+0x144>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d003      	beq.n	8005428 <TIM_Base_SetConfig+0xf8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a15      	ldr	r2, [pc, #84]	@ (8005478 <TIM_Base_SetConfig+0x148>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d103      	bne.n	8005430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d105      	bne.n	800544e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f023 0201 	bic.w	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	611a      	str	r2, [r3, #16]
  }
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40010000 	.word	0x40010000
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40010400 	.word	0x40010400
 8005470:	40014000 	.word	0x40014000
 8005474:	40014400 	.word	0x40014400
 8005478:	40014800 	.word	0x40014800

0800547c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e042      	b.n	8005550 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d106      	bne.n	80054e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fb fb57 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2224      	movs	r2, #36	@ 0x24
 80054e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0201 	bic.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f001 f9f8 	bl	80068f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fc8d 	bl	8005e28 <UART_SetConfig>
 800550e:	4603      	mov	r3, r0
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e01b      	b.n	8005550 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f001 fa77 	bl	8006a3c <UART_CheckIdleState>
 800554e:	4603      	mov	r3, r0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	@ 0x28
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556e:	2b20      	cmp	r3, #32
 8005570:	d17b      	bne.n	800566a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <HAL_UART_Transmit+0x26>
 8005578:	88fb      	ldrh	r3, [r7, #6]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e074      	b.n	800566c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2221      	movs	r2, #33	@ 0x21
 800558e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005592:	f7fb fd97 	bl	80010c4 <HAL_GetTick>
 8005596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b0:	d108      	bne.n	80055c4 <HAL_UART_Transmit+0x6c>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	e003      	b.n	80055cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055cc:	e030      	b.n	8005630 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	2180      	movs	r1, #128	@ 0x80
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f001 fad9 	bl	8006b90 <UART_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e03d      	b.n	800566c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005604:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3302      	adds	r3, #2
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	e007      	b.n	800561e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	3301      	adds	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1c8      	bne.n	80055ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2200      	movs	r2, #0
 8005644:	2140      	movs	r1, #64	@ 0x40
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f001 faa2 	bl	8006b90 <UART_WaitOnFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e006      	b.n	800566c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e000      	b.n	800566c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800566a:	2302      	movs	r3, #2
  }
}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b0ba      	sub	sp, #232	@ 0xe8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800569a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800569e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80056a2:	4013      	ands	r3, r2
 80056a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80056a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d11b      	bne.n	80056e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d015      	beq.n	80056e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d105      	bne.n	80056d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d009      	beq.n	80056e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8377 	beq.w	8005dcc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
      }
      return;
 80056e6:	e371      	b.n	8005dcc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8123 	beq.w	8005938 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80056f6:	4b8d      	ldr	r3, [pc, #564]	@ (800592c <HAL_UART_IRQHandler+0x2b8>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005702:	4b8b      	ldr	r3, [pc, #556]	@ (8005930 <HAL_UART_IRQHandler+0x2bc>)
 8005704:	4013      	ands	r3, r2
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 8116 	beq.w	8005938 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d011      	beq.n	800573c <HAL_UART_IRQHandler+0xc8>
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800571c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2201      	movs	r2, #1
 800572a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005732:	f043 0201 	orr.w	r2, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800573c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d011      	beq.n	800576c <HAL_UART_IRQHandler+0xf8>
 8005748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2202      	movs	r2, #2
 800575a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005762:	f043 0204 	orr.w	r2, r3, #4
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800576c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d011      	beq.n	800579c <HAL_UART_IRQHandler+0x128>
 8005778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00b      	beq.n	800579c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2204      	movs	r2, #4
 800578a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005792:	f043 0202 	orr.w	r2, r3, #2
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800579c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d017      	beq.n	80057d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80057b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80057b8:	4b5c      	ldr	r3, [pc, #368]	@ (800592c <HAL_UART_IRQHandler+0x2b8>)
 80057ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00b      	beq.n	80057d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2208      	movs	r2, #8
 80057c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ce:	f043 0208 	orr.w	r2, r3, #8
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d012      	beq.n	800580a <HAL_UART_IRQHandler+0x196>
 80057e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005800:	f043 0220 	orr.w	r2, r3, #32
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 82dd 	beq.w	8005dd0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	d013      	beq.n	800584a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800582e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005850:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585e:	2b40      	cmp	r3, #64	@ 0x40
 8005860:	d005      	beq.n	800586e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005866:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800586a:	2b00      	cmp	r3, #0
 800586c:	d054      	beq.n	8005918 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 f9fc 	bl	8006c6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587e:	2b40      	cmp	r3, #64	@ 0x40
 8005880:	d146      	bne.n	8005910 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3308      	adds	r3, #8
 8005888:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005898:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800589c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3308      	adds	r3, #8
 80058aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1d9      	bne.n	8005882 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d017      	beq.n	8005908 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058de:	4a15      	ldr	r2, [pc, #84]	@ (8005934 <HAL_UART_IRQHandler+0x2c0>)
 80058e0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fc f879 	bl	80019e0 <HAL_DMA_Abort_IT>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d019      	beq.n	8005928 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005902:	4610      	mov	r0, r2
 8005904:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005906:	e00f      	b.n	8005928 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fa77 	bl	8005dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590e:	e00b      	b.n	8005928 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fa73 	bl	8005dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005916:	e007      	b.n	8005928 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fa6f 	bl	8005dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005926:	e253      	b.n	8005dd0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005928:	bf00      	nop
    return;
 800592a:	e251      	b.n	8005dd0 <HAL_UART_IRQHandler+0x75c>
 800592c:	10000001 	.word	0x10000001
 8005930:	04000120 	.word	0x04000120
 8005934:	08006d39 	.word	0x08006d39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800593c:	2b01      	cmp	r3, #1
 800593e:	f040 81e7 	bne.w	8005d10 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 81e0 	beq.w	8005d10 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 81d9 	beq.w	8005d10 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2210      	movs	r2, #16
 8005964:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005970:	2b40      	cmp	r3, #64	@ 0x40
 8005972:	f040 8151 	bne.w	8005c18 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a96      	ldr	r2, [pc, #600]	@ (8005bd8 <HAL_UART_IRQHandler+0x564>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d068      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a93      	ldr	r2, [pc, #588]	@ (8005bdc <HAL_UART_IRQHandler+0x568>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d061      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a91      	ldr	r2, [pc, #580]	@ (8005be0 <HAL_UART_IRQHandler+0x56c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d05a      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a8e      	ldr	r2, [pc, #568]	@ (8005be4 <HAL_UART_IRQHandler+0x570>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d053      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a8c      	ldr	r2, [pc, #560]	@ (8005be8 <HAL_UART_IRQHandler+0x574>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d04c      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a89      	ldr	r2, [pc, #548]	@ (8005bec <HAL_UART_IRQHandler+0x578>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d045      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a87      	ldr	r2, [pc, #540]	@ (8005bf0 <HAL_UART_IRQHandler+0x57c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d03e      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a84      	ldr	r2, [pc, #528]	@ (8005bf4 <HAL_UART_IRQHandler+0x580>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d037      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a82      	ldr	r2, [pc, #520]	@ (8005bf8 <HAL_UART_IRQHandler+0x584>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d030      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a7f      	ldr	r2, [pc, #508]	@ (8005bfc <HAL_UART_IRQHandler+0x588>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d029      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a7d      	ldr	r2, [pc, #500]	@ (8005c00 <HAL_UART_IRQHandler+0x58c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d022      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a7a      	ldr	r2, [pc, #488]	@ (8005c04 <HAL_UART_IRQHandler+0x590>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01b      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a78      	ldr	r2, [pc, #480]	@ (8005c08 <HAL_UART_IRQHandler+0x594>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d014      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a75      	ldr	r2, [pc, #468]	@ (8005c0c <HAL_UART_IRQHandler+0x598>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00d      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a73      	ldr	r2, [pc, #460]	@ (8005c10 <HAL_UART_IRQHandler+0x59c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d006      	beq.n	8005a56 <HAL_UART_IRQHandler+0x3e2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a70      	ldr	r2, [pc, #448]	@ (8005c14 <HAL_UART_IRQHandler+0x5a0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d106      	bne.n	8005a64 <HAL_UART_IRQHandler+0x3f0>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	e005      	b.n	8005a70 <HAL_UART_IRQHandler+0x3fc>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 81ab 	beq.w	8005dd4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	f080 81a3 	bcs.w	8005dd4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aa4:	f000 8087 	beq.w	8005bb6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ad6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1da      	bne.n	8005aa8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3308      	adds	r3, #8
 8005af8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3308      	adds	r3, #8
 8005b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e1      	bne.n	8005af2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3308      	adds	r3, #8
 8005b34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e3      	bne.n	8005b2e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b84:	f023 0310 	bic.w	r3, r3, #16
 8005b88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b98:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e4      	bne.n	8005b74 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fb fbf7 	bl	80013a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f91d 	bl	8005e10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bd6:	e0fd      	b.n	8005dd4 <HAL_UART_IRQHandler+0x760>
 8005bd8:	40020010 	.word	0x40020010
 8005bdc:	40020028 	.word	0x40020028
 8005be0:	40020040 	.word	0x40020040
 8005be4:	40020058 	.word	0x40020058
 8005be8:	40020070 	.word	0x40020070
 8005bec:	40020088 	.word	0x40020088
 8005bf0:	400200a0 	.word	0x400200a0
 8005bf4:	400200b8 	.word	0x400200b8
 8005bf8:	40020410 	.word	0x40020410
 8005bfc:	40020428 	.word	0x40020428
 8005c00:	40020440 	.word	0x40020440
 8005c04:	40020458 	.word	0x40020458
 8005c08:	40020470 	.word	0x40020470
 8005c0c:	40020488 	.word	0x40020488
 8005c10:	400204a0 	.word	0x400204a0
 8005c14:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80cf 	beq.w	8005dd8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005c3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 80ca 	beq.w	8005dd8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c68:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e4      	bne.n	8005c44 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3308      	adds	r3, #8
 8005c80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	623b      	str	r3, [r7, #32]
   return(result);
 8005c8a:	6a3a      	ldr	r2, [r7, #32]
 8005c8c:	4b55      	ldr	r3, [pc, #340]	@ (8005de4 <HAL_UART_IRQHandler+0x770>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3308      	adds	r3, #8
 8005c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e3      	bne.n	8005c7a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	e853 3f00 	ldrex	r3, [r3]
 8005cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0310 	bic.w	r3, r3, #16
 8005cda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ce8:	61fb      	str	r3, [r7, #28]
 8005cea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	69b9      	ldr	r1, [r7, #24]
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e4      	bne.n	8005cc6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f881 	bl	8005e10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d0e:	e063      	b.n	8005dd8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00e      	beq.n	8005d3a <HAL_UART_IRQHandler+0x6c6>
 8005d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d008      	beq.n	8005d3a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005d30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 f8ac 	bl	8006e90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d38:	e051      	b.n	8005dde <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d014      	beq.n	8005d70 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d105      	bne.n	8005d5e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d008      	beq.n	8005d70 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d03a      	beq.n	8005ddc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	4798      	blx	r3
    }
    return;
 8005d6e:	e035      	b.n	8005ddc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d009      	beq.n	8005d90 <HAL_UART_IRQHandler+0x71c>
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 ffeb 	bl	8006d64 <UART_EndTransmit_IT>
    return;
 8005d8e:	e026      	b.n	8005dde <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d009      	beq.n	8005db0 <HAL_UART_IRQHandler+0x73c>
 8005d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005da0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 f885 	bl	8006eb8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dae:	e016      	b.n	8005dde <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d010      	beq.n	8005dde <HAL_UART_IRQHandler+0x76a>
 8005dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	da0c      	bge.n	8005dde <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 f86d 	bl	8006ea4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dca:	e008      	b.n	8005dde <HAL_UART_IRQHandler+0x76a>
      return;
 8005dcc:	bf00      	nop
 8005dce:	e006      	b.n	8005dde <HAL_UART_IRQHandler+0x76a>
    return;
 8005dd0:	bf00      	nop
 8005dd2:	e004      	b.n	8005dde <HAL_UART_IRQHandler+0x76a>
      return;
 8005dd4:	bf00      	nop
 8005dd6:	e002      	b.n	8005dde <HAL_UART_IRQHandler+0x76a>
      return;
 8005dd8:	bf00      	nop
 8005dda:	e000      	b.n	8005dde <HAL_UART_IRQHandler+0x76a>
    return;
 8005ddc:	bf00      	nop
  }
}
 8005dde:	37e8      	adds	r7, #232	@ 0xe8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	effffffe 	.word	0xeffffffe

08005de8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e2c:	b092      	sub	sp, #72	@ 0x48
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	4bbe      	ldr	r3, [pc, #760]	@ (8006150 <UART_SetConfig+0x328>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e60:	430b      	orrs	r3, r1
 8005e62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4ab3      	ldr	r2, [pc, #716]	@ (8006154 <UART_SetConfig+0x32c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e90:	4313      	orrs	r3, r2
 8005e92:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	4baf      	ldr	r3, [pc, #700]	@ (8006158 <UART_SetConfig+0x330>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	6812      	ldr	r2, [r2, #0]
 8005ea2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eae:	f023 010f 	bic.w	r1, r3, #15
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4aa6      	ldr	r2, [pc, #664]	@ (800615c <UART_SetConfig+0x334>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d177      	bne.n	8005fb8 <UART_SetConfig+0x190>
 8005ec8:	4ba5      	ldr	r3, [pc, #660]	@ (8006160 <UART_SetConfig+0x338>)
 8005eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ecc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ed0:	2b28      	cmp	r3, #40	@ 0x28
 8005ed2:	d86d      	bhi.n	8005fb0 <UART_SetConfig+0x188>
 8005ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8005edc <UART_SetConfig+0xb4>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005f81 	.word	0x08005f81
 8005ee0:	08005fb1 	.word	0x08005fb1
 8005ee4:	08005fb1 	.word	0x08005fb1
 8005ee8:	08005fb1 	.word	0x08005fb1
 8005eec:	08005fb1 	.word	0x08005fb1
 8005ef0:	08005fb1 	.word	0x08005fb1
 8005ef4:	08005fb1 	.word	0x08005fb1
 8005ef8:	08005fb1 	.word	0x08005fb1
 8005efc:	08005f89 	.word	0x08005f89
 8005f00:	08005fb1 	.word	0x08005fb1
 8005f04:	08005fb1 	.word	0x08005fb1
 8005f08:	08005fb1 	.word	0x08005fb1
 8005f0c:	08005fb1 	.word	0x08005fb1
 8005f10:	08005fb1 	.word	0x08005fb1
 8005f14:	08005fb1 	.word	0x08005fb1
 8005f18:	08005fb1 	.word	0x08005fb1
 8005f1c:	08005f91 	.word	0x08005f91
 8005f20:	08005fb1 	.word	0x08005fb1
 8005f24:	08005fb1 	.word	0x08005fb1
 8005f28:	08005fb1 	.word	0x08005fb1
 8005f2c:	08005fb1 	.word	0x08005fb1
 8005f30:	08005fb1 	.word	0x08005fb1
 8005f34:	08005fb1 	.word	0x08005fb1
 8005f38:	08005fb1 	.word	0x08005fb1
 8005f3c:	08005f99 	.word	0x08005f99
 8005f40:	08005fb1 	.word	0x08005fb1
 8005f44:	08005fb1 	.word	0x08005fb1
 8005f48:	08005fb1 	.word	0x08005fb1
 8005f4c:	08005fb1 	.word	0x08005fb1
 8005f50:	08005fb1 	.word	0x08005fb1
 8005f54:	08005fb1 	.word	0x08005fb1
 8005f58:	08005fb1 	.word	0x08005fb1
 8005f5c:	08005fa1 	.word	0x08005fa1
 8005f60:	08005fb1 	.word	0x08005fb1
 8005f64:	08005fb1 	.word	0x08005fb1
 8005f68:	08005fb1 	.word	0x08005fb1
 8005f6c:	08005fb1 	.word	0x08005fb1
 8005f70:	08005fb1 	.word	0x08005fb1
 8005f74:	08005fb1 	.word	0x08005fb1
 8005f78:	08005fb1 	.word	0x08005fb1
 8005f7c:	08005fa9 	.word	0x08005fa9
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e222      	b.n	80063ce <UART_SetConfig+0x5a6>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e21e      	b.n	80063ce <UART_SetConfig+0x5a6>
 8005f90:	2308      	movs	r3, #8
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e21a      	b.n	80063ce <UART_SetConfig+0x5a6>
 8005f98:	2310      	movs	r3, #16
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e216      	b.n	80063ce <UART_SetConfig+0x5a6>
 8005fa0:	2320      	movs	r3, #32
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e212      	b.n	80063ce <UART_SetConfig+0x5a6>
 8005fa8:	2340      	movs	r3, #64	@ 0x40
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e20e      	b.n	80063ce <UART_SetConfig+0x5a6>
 8005fb0:	2380      	movs	r3, #128	@ 0x80
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e20a      	b.n	80063ce <UART_SetConfig+0x5a6>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a69      	ldr	r2, [pc, #420]	@ (8006164 <UART_SetConfig+0x33c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d130      	bne.n	8006024 <UART_SetConfig+0x1fc>
 8005fc2:	4b67      	ldr	r3, [pc, #412]	@ (8006160 <UART_SetConfig+0x338>)
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	2b05      	cmp	r3, #5
 8005fcc:	d826      	bhi.n	800601c <UART_SetConfig+0x1f4>
 8005fce:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd4 <UART_SetConfig+0x1ac>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005fed 	.word	0x08005fed
 8005fd8:	08005ff5 	.word	0x08005ff5
 8005fdc:	08005ffd 	.word	0x08005ffd
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	0800600d 	.word	0x0800600d
 8005fe8:	08006015 	.word	0x08006015
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff2:	e1ec      	b.n	80063ce <UART_SetConfig+0x5a6>
 8005ff4:	2304      	movs	r3, #4
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e1e8      	b.n	80063ce <UART_SetConfig+0x5a6>
 8005ffc:	2308      	movs	r3, #8
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e1e4      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006004:	2310      	movs	r3, #16
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e1e0      	b.n	80063ce <UART_SetConfig+0x5a6>
 800600c:	2320      	movs	r3, #32
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e1dc      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006014:	2340      	movs	r3, #64	@ 0x40
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e1d8      	b.n	80063ce <UART_SetConfig+0x5a6>
 800601c:	2380      	movs	r3, #128	@ 0x80
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006022:	e1d4      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a4f      	ldr	r2, [pc, #316]	@ (8006168 <UART_SetConfig+0x340>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d130      	bne.n	8006090 <UART_SetConfig+0x268>
 800602e:	4b4c      	ldr	r3, [pc, #304]	@ (8006160 <UART_SetConfig+0x338>)
 8006030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	2b05      	cmp	r3, #5
 8006038:	d826      	bhi.n	8006088 <UART_SetConfig+0x260>
 800603a:	a201      	add	r2, pc, #4	@ (adr r2, 8006040 <UART_SetConfig+0x218>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006059 	.word	0x08006059
 8006044:	08006061 	.word	0x08006061
 8006048:	08006069 	.word	0x08006069
 800604c:	08006071 	.word	0x08006071
 8006050:	08006079 	.word	0x08006079
 8006054:	08006081 	.word	0x08006081
 8006058:	2300      	movs	r3, #0
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605e:	e1b6      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006060:	2304      	movs	r3, #4
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006066:	e1b2      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006068:	2308      	movs	r3, #8
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606e:	e1ae      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006070:	2310      	movs	r3, #16
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006076:	e1aa      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006078:	2320      	movs	r3, #32
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607e:	e1a6      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006080:	2340      	movs	r3, #64	@ 0x40
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006086:	e1a2      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006088:	2380      	movs	r3, #128	@ 0x80
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608e:	e19e      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a35      	ldr	r2, [pc, #212]	@ (800616c <UART_SetConfig+0x344>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d130      	bne.n	80060fc <UART_SetConfig+0x2d4>
 800609a:	4b31      	ldr	r3, [pc, #196]	@ (8006160 <UART_SetConfig+0x338>)
 800609c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	2b05      	cmp	r3, #5
 80060a4:	d826      	bhi.n	80060f4 <UART_SetConfig+0x2cc>
 80060a6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <UART_SetConfig+0x284>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	080060c5 	.word	0x080060c5
 80060b0:	080060cd 	.word	0x080060cd
 80060b4:	080060d5 	.word	0x080060d5
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060ed 	.word	0x080060ed
 80060c4:	2300      	movs	r3, #0
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ca:	e180      	b.n	80063ce <UART_SetConfig+0x5a6>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e17c      	b.n	80063ce <UART_SetConfig+0x5a6>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e178      	b.n	80063ce <UART_SetConfig+0x5a6>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e2:	e174      	b.n	80063ce <UART_SetConfig+0x5a6>
 80060e4:	2320      	movs	r3, #32
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ea:	e170      	b.n	80063ce <UART_SetConfig+0x5a6>
 80060ec:	2340      	movs	r3, #64	@ 0x40
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e16c      	b.n	80063ce <UART_SetConfig+0x5a6>
 80060f4:	2380      	movs	r3, #128	@ 0x80
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e168      	b.n	80063ce <UART_SetConfig+0x5a6>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1b      	ldr	r2, [pc, #108]	@ (8006170 <UART_SetConfig+0x348>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d142      	bne.n	800618c <UART_SetConfig+0x364>
 8006106:	4b16      	ldr	r3, [pc, #88]	@ (8006160 <UART_SetConfig+0x338>)
 8006108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	2b05      	cmp	r3, #5
 8006110:	d838      	bhi.n	8006184 <UART_SetConfig+0x35c>
 8006112:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <UART_SetConfig+0x2f0>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	08006131 	.word	0x08006131
 800611c:	08006139 	.word	0x08006139
 8006120:	08006141 	.word	0x08006141
 8006124:	08006149 	.word	0x08006149
 8006128:	08006175 	.word	0x08006175
 800612c:	0800617d 	.word	0x0800617d
 8006130:	2300      	movs	r3, #0
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006136:	e14a      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006138:	2304      	movs	r3, #4
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613e:	e146      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006140:	2308      	movs	r3, #8
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e142      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006148:	2310      	movs	r3, #16
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e13e      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006150:	cfff69f3 	.word	0xcfff69f3
 8006154:	58000c00 	.word	0x58000c00
 8006158:	11fff4ff 	.word	0x11fff4ff
 800615c:	40011000 	.word	0x40011000
 8006160:	58024400 	.word	0x58024400
 8006164:	40004400 	.word	0x40004400
 8006168:	40004800 	.word	0x40004800
 800616c:	40004c00 	.word	0x40004c00
 8006170:	40005000 	.word	0x40005000
 8006174:	2320      	movs	r3, #32
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617a:	e128      	b.n	80063ce <UART_SetConfig+0x5a6>
 800617c:	2340      	movs	r3, #64	@ 0x40
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006182:	e124      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006184:	2380      	movs	r3, #128	@ 0x80
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618a:	e120      	b.n	80063ce <UART_SetConfig+0x5a6>
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4acb      	ldr	r2, [pc, #812]	@ (80064c0 <UART_SetConfig+0x698>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d176      	bne.n	8006284 <UART_SetConfig+0x45c>
 8006196:	4bcb      	ldr	r3, [pc, #812]	@ (80064c4 <UART_SetConfig+0x69c>)
 8006198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800619e:	2b28      	cmp	r3, #40	@ 0x28
 80061a0:	d86c      	bhi.n	800627c <UART_SetConfig+0x454>
 80061a2:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <UART_SetConfig+0x380>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	0800624d 	.word	0x0800624d
 80061ac:	0800627d 	.word	0x0800627d
 80061b0:	0800627d 	.word	0x0800627d
 80061b4:	0800627d 	.word	0x0800627d
 80061b8:	0800627d 	.word	0x0800627d
 80061bc:	0800627d 	.word	0x0800627d
 80061c0:	0800627d 	.word	0x0800627d
 80061c4:	0800627d 	.word	0x0800627d
 80061c8:	08006255 	.word	0x08006255
 80061cc:	0800627d 	.word	0x0800627d
 80061d0:	0800627d 	.word	0x0800627d
 80061d4:	0800627d 	.word	0x0800627d
 80061d8:	0800627d 	.word	0x0800627d
 80061dc:	0800627d 	.word	0x0800627d
 80061e0:	0800627d 	.word	0x0800627d
 80061e4:	0800627d 	.word	0x0800627d
 80061e8:	0800625d 	.word	0x0800625d
 80061ec:	0800627d 	.word	0x0800627d
 80061f0:	0800627d 	.word	0x0800627d
 80061f4:	0800627d 	.word	0x0800627d
 80061f8:	0800627d 	.word	0x0800627d
 80061fc:	0800627d 	.word	0x0800627d
 8006200:	0800627d 	.word	0x0800627d
 8006204:	0800627d 	.word	0x0800627d
 8006208:	08006265 	.word	0x08006265
 800620c:	0800627d 	.word	0x0800627d
 8006210:	0800627d 	.word	0x0800627d
 8006214:	0800627d 	.word	0x0800627d
 8006218:	0800627d 	.word	0x0800627d
 800621c:	0800627d 	.word	0x0800627d
 8006220:	0800627d 	.word	0x0800627d
 8006224:	0800627d 	.word	0x0800627d
 8006228:	0800626d 	.word	0x0800626d
 800622c:	0800627d 	.word	0x0800627d
 8006230:	0800627d 	.word	0x0800627d
 8006234:	0800627d 	.word	0x0800627d
 8006238:	0800627d 	.word	0x0800627d
 800623c:	0800627d 	.word	0x0800627d
 8006240:	0800627d 	.word	0x0800627d
 8006244:	0800627d 	.word	0x0800627d
 8006248:	08006275 	.word	0x08006275
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006252:	e0bc      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006254:	2304      	movs	r3, #4
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e0b8      	b.n	80063ce <UART_SetConfig+0x5a6>
 800625c:	2308      	movs	r3, #8
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e0b4      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006264:	2310      	movs	r3, #16
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e0b0      	b.n	80063ce <UART_SetConfig+0x5a6>
 800626c:	2320      	movs	r3, #32
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006272:	e0ac      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006274:	2340      	movs	r3, #64	@ 0x40
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627a:	e0a8      	b.n	80063ce <UART_SetConfig+0x5a6>
 800627c:	2380      	movs	r3, #128	@ 0x80
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006282:	e0a4      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a8f      	ldr	r2, [pc, #572]	@ (80064c8 <UART_SetConfig+0x6a0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d130      	bne.n	80062f0 <UART_SetConfig+0x4c8>
 800628e:	4b8d      	ldr	r3, [pc, #564]	@ (80064c4 <UART_SetConfig+0x69c>)
 8006290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	2b05      	cmp	r3, #5
 8006298:	d826      	bhi.n	80062e8 <UART_SetConfig+0x4c0>
 800629a:	a201      	add	r2, pc, #4	@ (adr r2, 80062a0 <UART_SetConfig+0x478>)
 800629c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a0:	080062b9 	.word	0x080062b9
 80062a4:	080062c1 	.word	0x080062c1
 80062a8:	080062c9 	.word	0x080062c9
 80062ac:	080062d1 	.word	0x080062d1
 80062b0:	080062d9 	.word	0x080062d9
 80062b4:	080062e1 	.word	0x080062e1
 80062b8:	2300      	movs	r3, #0
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062be:	e086      	b.n	80063ce <UART_SetConfig+0x5a6>
 80062c0:	2304      	movs	r3, #4
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c6:	e082      	b.n	80063ce <UART_SetConfig+0x5a6>
 80062c8:	2308      	movs	r3, #8
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ce:	e07e      	b.n	80063ce <UART_SetConfig+0x5a6>
 80062d0:	2310      	movs	r3, #16
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d6:	e07a      	b.n	80063ce <UART_SetConfig+0x5a6>
 80062d8:	2320      	movs	r3, #32
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062de:	e076      	b.n	80063ce <UART_SetConfig+0x5a6>
 80062e0:	2340      	movs	r3, #64	@ 0x40
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e6:	e072      	b.n	80063ce <UART_SetConfig+0x5a6>
 80062e8:	2380      	movs	r3, #128	@ 0x80
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ee:	e06e      	b.n	80063ce <UART_SetConfig+0x5a6>
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a75      	ldr	r2, [pc, #468]	@ (80064cc <UART_SetConfig+0x6a4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d130      	bne.n	800635c <UART_SetConfig+0x534>
 80062fa:	4b72      	ldr	r3, [pc, #456]	@ (80064c4 <UART_SetConfig+0x69c>)
 80062fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062fe:	f003 0307 	and.w	r3, r3, #7
 8006302:	2b05      	cmp	r3, #5
 8006304:	d826      	bhi.n	8006354 <UART_SetConfig+0x52c>
 8006306:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <UART_SetConfig+0x4e4>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	08006325 	.word	0x08006325
 8006310:	0800632d 	.word	0x0800632d
 8006314:	08006335 	.word	0x08006335
 8006318:	0800633d 	.word	0x0800633d
 800631c:	08006345 	.word	0x08006345
 8006320:	0800634d 	.word	0x0800634d
 8006324:	2300      	movs	r3, #0
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632a:	e050      	b.n	80063ce <UART_SetConfig+0x5a6>
 800632c:	2304      	movs	r3, #4
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006332:	e04c      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006334:	2308      	movs	r3, #8
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633a:	e048      	b.n	80063ce <UART_SetConfig+0x5a6>
 800633c:	2310      	movs	r3, #16
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006342:	e044      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006344:	2320      	movs	r3, #32
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634a:	e040      	b.n	80063ce <UART_SetConfig+0x5a6>
 800634c:	2340      	movs	r3, #64	@ 0x40
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006352:	e03c      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006354:	2380      	movs	r3, #128	@ 0x80
 8006356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800635a:	e038      	b.n	80063ce <UART_SetConfig+0x5a6>
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a5b      	ldr	r2, [pc, #364]	@ (80064d0 <UART_SetConfig+0x6a8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d130      	bne.n	80063c8 <UART_SetConfig+0x5a0>
 8006366:	4b57      	ldr	r3, [pc, #348]	@ (80064c4 <UART_SetConfig+0x69c>)
 8006368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	2b05      	cmp	r3, #5
 8006370:	d826      	bhi.n	80063c0 <UART_SetConfig+0x598>
 8006372:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <UART_SetConfig+0x550>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	08006391 	.word	0x08006391
 800637c:	08006399 	.word	0x08006399
 8006380:	080063a1 	.word	0x080063a1
 8006384:	080063a9 	.word	0x080063a9
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	2302      	movs	r3, #2
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006396:	e01a      	b.n	80063ce <UART_SetConfig+0x5a6>
 8006398:	2304      	movs	r3, #4
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639e:	e016      	b.n	80063ce <UART_SetConfig+0x5a6>
 80063a0:	2308      	movs	r3, #8
 80063a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063a6:	e012      	b.n	80063ce <UART_SetConfig+0x5a6>
 80063a8:	2310      	movs	r3, #16
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ae:	e00e      	b.n	80063ce <UART_SetConfig+0x5a6>
 80063b0:	2320      	movs	r3, #32
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b6:	e00a      	b.n	80063ce <UART_SetConfig+0x5a6>
 80063b8:	2340      	movs	r3, #64	@ 0x40
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063be:	e006      	b.n	80063ce <UART_SetConfig+0x5a6>
 80063c0:	2380      	movs	r3, #128	@ 0x80
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063c6:	e002      	b.n	80063ce <UART_SetConfig+0x5a6>
 80063c8:	2380      	movs	r3, #128	@ 0x80
 80063ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a3f      	ldr	r2, [pc, #252]	@ (80064d0 <UART_SetConfig+0x6a8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	f040 80f8 	bne.w	80065ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80063de:	2b20      	cmp	r3, #32
 80063e0:	dc46      	bgt.n	8006470 <UART_SetConfig+0x648>
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	f2c0 8082 	blt.w	80064ec <UART_SetConfig+0x6c4>
 80063e8:	3b02      	subs	r3, #2
 80063ea:	2b1e      	cmp	r3, #30
 80063ec:	d87e      	bhi.n	80064ec <UART_SetConfig+0x6c4>
 80063ee:	a201      	add	r2, pc, #4	@ (adr r2, 80063f4 <UART_SetConfig+0x5cc>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	08006477 	.word	0x08006477
 80063f8:	080064ed 	.word	0x080064ed
 80063fc:	0800647f 	.word	0x0800647f
 8006400:	080064ed 	.word	0x080064ed
 8006404:	080064ed 	.word	0x080064ed
 8006408:	080064ed 	.word	0x080064ed
 800640c:	0800648f 	.word	0x0800648f
 8006410:	080064ed 	.word	0x080064ed
 8006414:	080064ed 	.word	0x080064ed
 8006418:	080064ed 	.word	0x080064ed
 800641c:	080064ed 	.word	0x080064ed
 8006420:	080064ed 	.word	0x080064ed
 8006424:	080064ed 	.word	0x080064ed
 8006428:	080064ed 	.word	0x080064ed
 800642c:	0800649f 	.word	0x0800649f
 8006430:	080064ed 	.word	0x080064ed
 8006434:	080064ed 	.word	0x080064ed
 8006438:	080064ed 	.word	0x080064ed
 800643c:	080064ed 	.word	0x080064ed
 8006440:	080064ed 	.word	0x080064ed
 8006444:	080064ed 	.word	0x080064ed
 8006448:	080064ed 	.word	0x080064ed
 800644c:	080064ed 	.word	0x080064ed
 8006450:	080064ed 	.word	0x080064ed
 8006454:	080064ed 	.word	0x080064ed
 8006458:	080064ed 	.word	0x080064ed
 800645c:	080064ed 	.word	0x080064ed
 8006460:	080064ed 	.word	0x080064ed
 8006464:	080064ed 	.word	0x080064ed
 8006468:	080064ed 	.word	0x080064ed
 800646c:	080064df 	.word	0x080064df
 8006470:	2b40      	cmp	r3, #64	@ 0x40
 8006472:	d037      	beq.n	80064e4 <UART_SetConfig+0x6bc>
 8006474:	e03a      	b.n	80064ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006476:	f7fe f92f 	bl	80046d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800647a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800647c:	e03c      	b.n	80064f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800647e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe f93e 	bl	8004704 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800648c:	e034      	b.n	80064f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800648e:	f107 0318 	add.w	r3, r7, #24
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fa8a 	bl	80049ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800649c:	e02c      	b.n	80064f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800649e:	4b09      	ldr	r3, [pc, #36]	@ (80064c4 <UART_SetConfig+0x69c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064aa:	4b06      	ldr	r3, [pc, #24]	@ (80064c4 <UART_SetConfig+0x69c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	08db      	lsrs	r3, r3, #3
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	4a07      	ldr	r2, [pc, #28]	@ (80064d4 <UART_SetConfig+0x6ac>)
 80064b6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064bc:	e01c      	b.n	80064f8 <UART_SetConfig+0x6d0>
 80064be:	bf00      	nop
 80064c0:	40011400 	.word	0x40011400
 80064c4:	58024400 	.word	0x58024400
 80064c8:	40007800 	.word	0x40007800
 80064cc:	40007c00 	.word	0x40007c00
 80064d0:	58000c00 	.word	0x58000c00
 80064d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80064d8:	4b9d      	ldr	r3, [pc, #628]	@ (8006750 <UART_SetConfig+0x928>)
 80064da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064dc:	e00c      	b.n	80064f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064de:	4b9d      	ldr	r3, [pc, #628]	@ (8006754 <UART_SetConfig+0x92c>)
 80064e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e2:	e009      	b.n	80064f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ea:	e005      	b.n	80064f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80064f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 81de 	beq.w	80068bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	4a94      	ldr	r2, [pc, #592]	@ (8006758 <UART_SetConfig+0x930>)
 8006506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800650a:	461a      	mov	r2, r3
 800650c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800650e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006512:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	4613      	mov	r3, r2
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	4413      	add	r3, r2
 800651e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006520:	429a      	cmp	r2, r3
 8006522:	d305      	bcc.n	8006530 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800652a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800652c:	429a      	cmp	r2, r3
 800652e:	d903      	bls.n	8006538 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006536:	e1c1      	b.n	80068bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800653a:	2200      	movs	r2, #0
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	60fa      	str	r2, [r7, #12]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	4a84      	ldr	r2, [pc, #528]	@ (8006758 <UART_SetConfig+0x930>)
 8006546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800654a:	b29b      	uxth	r3, r3
 800654c:	2200      	movs	r2, #0
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	607a      	str	r2, [r7, #4]
 8006552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006556:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800655a:	f7f9 febd 	bl	80002d8 <__aeabi_uldivmod>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4610      	mov	r0, r2
 8006564:	4619      	mov	r1, r3
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	020b      	lsls	r3, r1, #8
 8006570:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006574:	0202      	lsls	r2, r0, #8
 8006576:	6979      	ldr	r1, [r7, #20]
 8006578:	6849      	ldr	r1, [r1, #4]
 800657a:	0849      	lsrs	r1, r1, #1
 800657c:	2000      	movs	r0, #0
 800657e:	460c      	mov	r4, r1
 8006580:	4605      	mov	r5, r0
 8006582:	eb12 0804 	adds.w	r8, r2, r4
 8006586:	eb43 0905 	adc.w	r9, r3, r5
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	469a      	mov	sl, r3
 8006592:	4693      	mov	fp, r2
 8006594:	4652      	mov	r2, sl
 8006596:	465b      	mov	r3, fp
 8006598:	4640      	mov	r0, r8
 800659a:	4649      	mov	r1, r9
 800659c:	f7f9 fe9c 	bl	80002d8 <__aeabi_uldivmod>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4613      	mov	r3, r2
 80065a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065ae:	d308      	bcc.n	80065c2 <UART_SetConfig+0x79a>
 80065b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065b6:	d204      	bcs.n	80065c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065be:	60da      	str	r2, [r3, #12]
 80065c0:	e17c      	b.n	80068bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80065c8:	e178      	b.n	80068bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065d2:	f040 80c5 	bne.w	8006760 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80065d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80065da:	2b20      	cmp	r3, #32
 80065dc:	dc48      	bgt.n	8006670 <UART_SetConfig+0x848>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	db7b      	blt.n	80066da <UART_SetConfig+0x8b2>
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d879      	bhi.n	80066da <UART_SetConfig+0x8b2>
 80065e6:	a201      	add	r2, pc, #4	@ (adr r2, 80065ec <UART_SetConfig+0x7c4>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	08006677 	.word	0x08006677
 80065f0:	0800667f 	.word	0x0800667f
 80065f4:	080066db 	.word	0x080066db
 80065f8:	080066db 	.word	0x080066db
 80065fc:	08006687 	.word	0x08006687
 8006600:	080066db 	.word	0x080066db
 8006604:	080066db 	.word	0x080066db
 8006608:	080066db 	.word	0x080066db
 800660c:	08006697 	.word	0x08006697
 8006610:	080066db 	.word	0x080066db
 8006614:	080066db 	.word	0x080066db
 8006618:	080066db 	.word	0x080066db
 800661c:	080066db 	.word	0x080066db
 8006620:	080066db 	.word	0x080066db
 8006624:	080066db 	.word	0x080066db
 8006628:	080066db 	.word	0x080066db
 800662c:	080066a7 	.word	0x080066a7
 8006630:	080066db 	.word	0x080066db
 8006634:	080066db 	.word	0x080066db
 8006638:	080066db 	.word	0x080066db
 800663c:	080066db 	.word	0x080066db
 8006640:	080066db 	.word	0x080066db
 8006644:	080066db 	.word	0x080066db
 8006648:	080066db 	.word	0x080066db
 800664c:	080066db 	.word	0x080066db
 8006650:	080066db 	.word	0x080066db
 8006654:	080066db 	.word	0x080066db
 8006658:	080066db 	.word	0x080066db
 800665c:	080066db 	.word	0x080066db
 8006660:	080066db 	.word	0x080066db
 8006664:	080066db 	.word	0x080066db
 8006668:	080066db 	.word	0x080066db
 800666c:	080066cd 	.word	0x080066cd
 8006670:	2b40      	cmp	r3, #64	@ 0x40
 8006672:	d02e      	beq.n	80066d2 <UART_SetConfig+0x8aa>
 8006674:	e031      	b.n	80066da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006676:	f7fc fdb7 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 800667a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800667c:	e033      	b.n	80066e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800667e:	f7fc fdc9 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 8006682:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006684:	e02f      	b.n	80066e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800668a:	4618      	mov	r0, r3
 800668c:	f7fe f83a 	bl	8004704 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006694:	e027      	b.n	80066e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006696:	f107 0318 	add.w	r3, r7, #24
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe f986 	bl	80049ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a4:	e01f      	b.n	80066e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066a6:	4b2d      	ldr	r3, [pc, #180]	@ (800675c <UART_SetConfig+0x934>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066b2:	4b2a      	ldr	r3, [pc, #168]	@ (800675c <UART_SetConfig+0x934>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	08db      	lsrs	r3, r3, #3
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	4a24      	ldr	r2, [pc, #144]	@ (8006750 <UART_SetConfig+0x928>)
 80066be:	fa22 f303 	lsr.w	r3, r2, r3
 80066c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066c4:	e00f      	b.n	80066e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80066c6:	4b22      	ldr	r3, [pc, #136]	@ (8006750 <UART_SetConfig+0x928>)
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066ca:	e00c      	b.n	80066e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066cc:	4b21      	ldr	r3, [pc, #132]	@ (8006754 <UART_SetConfig+0x92c>)
 80066ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066d0:	e009      	b.n	80066e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066d8:	e005      	b.n	80066e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80066e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80e7 	beq.w	80068bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f2:	4a19      	ldr	r2, [pc, #100]	@ (8006758 <UART_SetConfig+0x930>)
 80066f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066f8:	461a      	mov	r2, r3
 80066fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006700:	005a      	lsls	r2, r3, #1
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	441a      	add	r2, r3
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006712:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006716:	2b0f      	cmp	r3, #15
 8006718:	d916      	bls.n	8006748 <UART_SetConfig+0x920>
 800671a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006720:	d212      	bcs.n	8006748 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006724:	b29b      	uxth	r3, r3
 8006726:	f023 030f 	bic.w	r3, r3, #15
 800672a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800672c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	b29b      	uxth	r3, r3
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	b29a      	uxth	r2, r3
 8006738:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800673a:	4313      	orrs	r3, r2
 800673c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006744:	60da      	str	r2, [r3, #12]
 8006746:	e0b9      	b.n	80068bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800674e:	e0b5      	b.n	80068bc <UART_SetConfig+0xa94>
 8006750:	03d09000 	.word	0x03d09000
 8006754:	003d0900 	.word	0x003d0900
 8006758:	08007154 	.word	0x08007154
 800675c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006760:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006764:	2b20      	cmp	r3, #32
 8006766:	dc49      	bgt.n	80067fc <UART_SetConfig+0x9d4>
 8006768:	2b00      	cmp	r3, #0
 800676a:	db7c      	blt.n	8006866 <UART_SetConfig+0xa3e>
 800676c:	2b20      	cmp	r3, #32
 800676e:	d87a      	bhi.n	8006866 <UART_SetConfig+0xa3e>
 8006770:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <UART_SetConfig+0x950>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	08006803 	.word	0x08006803
 800677c:	0800680b 	.word	0x0800680b
 8006780:	08006867 	.word	0x08006867
 8006784:	08006867 	.word	0x08006867
 8006788:	08006813 	.word	0x08006813
 800678c:	08006867 	.word	0x08006867
 8006790:	08006867 	.word	0x08006867
 8006794:	08006867 	.word	0x08006867
 8006798:	08006823 	.word	0x08006823
 800679c:	08006867 	.word	0x08006867
 80067a0:	08006867 	.word	0x08006867
 80067a4:	08006867 	.word	0x08006867
 80067a8:	08006867 	.word	0x08006867
 80067ac:	08006867 	.word	0x08006867
 80067b0:	08006867 	.word	0x08006867
 80067b4:	08006867 	.word	0x08006867
 80067b8:	08006833 	.word	0x08006833
 80067bc:	08006867 	.word	0x08006867
 80067c0:	08006867 	.word	0x08006867
 80067c4:	08006867 	.word	0x08006867
 80067c8:	08006867 	.word	0x08006867
 80067cc:	08006867 	.word	0x08006867
 80067d0:	08006867 	.word	0x08006867
 80067d4:	08006867 	.word	0x08006867
 80067d8:	08006867 	.word	0x08006867
 80067dc:	08006867 	.word	0x08006867
 80067e0:	08006867 	.word	0x08006867
 80067e4:	08006867 	.word	0x08006867
 80067e8:	08006867 	.word	0x08006867
 80067ec:	08006867 	.word	0x08006867
 80067f0:	08006867 	.word	0x08006867
 80067f4:	08006867 	.word	0x08006867
 80067f8:	08006859 	.word	0x08006859
 80067fc:	2b40      	cmp	r3, #64	@ 0x40
 80067fe:	d02e      	beq.n	800685e <UART_SetConfig+0xa36>
 8006800:	e031      	b.n	8006866 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006802:	f7fc fcf1 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8006806:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006808:	e033      	b.n	8006872 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800680a:	f7fc fd03 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 800680e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006810:	e02f      	b.n	8006872 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006816:	4618      	mov	r0, r3
 8006818:	f7fd ff74 	bl	8004704 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006820:	e027      	b.n	8006872 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006822:	f107 0318 	add.w	r3, r7, #24
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe f8c0 	bl	80049ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006830:	e01f      	b.n	8006872 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006832:	4b2d      	ldr	r3, [pc, #180]	@ (80068e8 <UART_SetConfig+0xac0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800683e:	4b2a      	ldr	r3, [pc, #168]	@ (80068e8 <UART_SetConfig+0xac0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	08db      	lsrs	r3, r3, #3
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	4a28      	ldr	r2, [pc, #160]	@ (80068ec <UART_SetConfig+0xac4>)
 800684a:	fa22 f303 	lsr.w	r3, r2, r3
 800684e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006850:	e00f      	b.n	8006872 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006852:	4b26      	ldr	r3, [pc, #152]	@ (80068ec <UART_SetConfig+0xac4>)
 8006854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006856:	e00c      	b.n	8006872 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006858:	4b25      	ldr	r3, [pc, #148]	@ (80068f0 <UART_SetConfig+0xac8>)
 800685a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800685c:	e009      	b.n	8006872 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800685e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006864:	e005      	b.n	8006872 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006870:	bf00      	nop
    }

    if (pclk != 0U)
 8006872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d021      	beq.n	80068bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687c:	4a1d      	ldr	r2, [pc, #116]	@ (80068f4 <UART_SetConfig+0xacc>)
 800687e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006882:	461a      	mov	r2, r3
 8006884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006886:	fbb3 f2f2 	udiv	r2, r3, r2
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	441a      	add	r2, r3
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	fbb2 f3f3 	udiv	r3, r2, r3
 800689a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800689c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689e:	2b0f      	cmp	r3, #15
 80068a0:	d909      	bls.n	80068b6 <UART_SetConfig+0xa8e>
 80068a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a8:	d205      	bcs.n	80068b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60da      	str	r2, [r3, #12]
 80068b4:	e002      	b.n	80068bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2201      	movs	r2, #1
 80068c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2200      	movs	r2, #0
 80068d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2200      	movs	r2, #0
 80068d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80068d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3748      	adds	r7, #72	@ 0x48
 80068e0:	46bd      	mov	sp, r7
 80068e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068e6:	bf00      	nop
 80068e8:	58024400 	.word	0x58024400
 80068ec:	03d09000 	.word	0x03d09000
 80068f0:	003d0900 	.word	0x003d0900
 80068f4:	08007154 	.word	0x08007154

080068f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006904:	f003 0308 	and.w	r3, r3, #8
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01a      	beq.n	8006a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069f6:	d10a      	bne.n	8006a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	605a      	str	r2, [r3, #4]
  }
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b098      	sub	sp, #96	@ 0x60
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a4c:	f7fa fb3a 	bl	80010c4 <HAL_GetTick>
 8006a50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d12f      	bne.n	8006ac0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f88e 	bl	8006b90 <UART_WaitOnFlagUntilTimeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d022      	beq.n	8006ac0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e6      	bne.n	8006a7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e063      	b.n	8006b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d149      	bne.n	8006b62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ace:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f857 	bl	8006b90 <UART_WaitOnFlagUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d03c      	beq.n	8006b62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	623b      	str	r3, [r7, #32]
   return(result);
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e6      	bne.n	8006ae8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3308      	adds	r3, #8
 8006b20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f023 0301 	bic.w	r3, r3, #1
 8006b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3308      	adds	r3, #8
 8006b38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b3a:	61fa      	str	r2, [r7, #28]
 8006b3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	69b9      	ldr	r1, [r7, #24]
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	617b      	str	r3, [r7, #20]
   return(result);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e5      	bne.n	8006b1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e012      	b.n	8006b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3758      	adds	r7, #88	@ 0x58
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba0:	e04f      	b.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba8:	d04b      	beq.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006baa:	f7fa fa8b 	bl	80010c4 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d302      	bcc.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e04e      	b.n	8006c62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d037      	beq.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b80      	cmp	r3, #128	@ 0x80
 8006bd6:	d034      	beq.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b40      	cmp	r3, #64	@ 0x40
 8006bdc:	d031      	beq.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	f003 0308 	and.w	r3, r3, #8
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d110      	bne.n	8006c0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f839 	bl	8006c6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e029      	b.n	8006c62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c1c:	d111      	bne.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f81f 	bl	8006c6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e00f      	b.n	8006c62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	bf0c      	ite	eq
 8006c52:	2301      	moveq	r3, #1
 8006c54:	2300      	movne	r3, #0
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d0a0      	beq.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b095      	sub	sp, #84	@ 0x54
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7c:	e853 3f00 	ldrex	r3, [r3]
 8006c80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c92:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c94:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e6      	bne.n	8006c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3308      	adds	r3, #8
 8006cac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8006d34 <UART_EndRxTransfer+0xc8>)
 8006cba:	4013      	ands	r3, r2
 8006cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e5      	bne.n	8006ca6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d118      	bne.n	8006d14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f023 0310 	bic.w	r3, r3, #16
 8006cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6979      	ldr	r1, [r7, #20]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e6      	bne.n	8006ce2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d28:	bf00      	nop
 8006d2a:	3754      	adds	r7, #84	@ 0x54
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	effffffe 	.word	0xeffffffe

08006d38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff f850 	bl	8005dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d5c:	bf00      	nop
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d80:	61fb      	str	r3, [r7, #28]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6979      	ldr	r1, [r7, #20]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	613b      	str	r3, [r7, #16]
   return(result);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e6      	bne.n	8006d6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff f81b 	bl	8005de8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006db2:	bf00      	nop
 8006db4:	3720      	adds	r7, #32
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e056      	b.n	8006e82 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f7f9 fed2 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2224      	movs	r2, #36	@ 0x24
 8006df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0201 	bic.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff fd73 	bl	80068f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f7ff f808 	bl	8005e28 <UART_SetConfig>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d101      	bne.n	8006e22 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e02f      	b.n	8006e82 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e30:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	055b      	lsls	r3, r3, #21
 8006e4a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e8c <HAL_RS485Ex_Init+0xd0>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	6812      	ldr	r2, [r2, #0]
 8006e64:	6979      	ldr	r1, [r7, #20]
 8006e66:	430b      	orrs	r3, r1
 8006e68:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0201 	orr.w	r2, r2, #1
 8006e78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7ff fdde 	bl	8006a3c <UART_CheckIdleState>
 8006e80:	4603      	mov	r3, r0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3718      	adds	r7, #24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	fc00ffff 	.word	0xfc00ffff

08006e90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d101      	bne.n	8006ee2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ede:	2302      	movs	r3, #2
 8006ee0:	e027      	b.n	8006f32 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2224      	movs	r2, #36	@ 0x24
 8006eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0201 	bic.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f52:	2302      	movs	r3, #2
 8006f54:	e02d      	b.n	8006fb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2224      	movs	r2, #36	@ 0x24
 8006f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0201 	bic.w	r2, r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f850 	bl	8007038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d101      	bne.n	8006fd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	e02d      	b.n	800702e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2224      	movs	r2, #36	@ 0x24
 8006fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0201 	bic.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f812 	bl	8007038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007044:	2b00      	cmp	r3, #0
 8007046:	d108      	bne.n	800705a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007058:	e031      	b.n	80070be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800705a:	2310      	movs	r3, #16
 800705c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800705e:	2310      	movs	r3, #16
 8007060:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	0e5b      	lsrs	r3, r3, #25
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	0f5b      	lsrs	r3, r3, #29
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	7b3a      	ldrb	r2, [r7, #12]
 8007086:	4911      	ldr	r1, [pc, #68]	@ (80070cc <UARTEx_SetNbDataToProcess+0x94>)
 8007088:	5c8a      	ldrb	r2, [r1, r2]
 800708a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800708e:	7b3a      	ldrb	r2, [r7, #12]
 8007090:	490f      	ldr	r1, [pc, #60]	@ (80070d0 <UARTEx_SetNbDataToProcess+0x98>)
 8007092:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007094:	fb93 f3f2 	sdiv	r3, r3, r2
 8007098:	b29a      	uxth	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
 80070a2:	7b7a      	ldrb	r2, [r7, #13]
 80070a4:	4909      	ldr	r1, [pc, #36]	@ (80070cc <UARTEx_SetNbDataToProcess+0x94>)
 80070a6:	5c8a      	ldrb	r2, [r1, r2]
 80070a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070ac:	7b7a      	ldrb	r2, [r7, #13]
 80070ae:	4908      	ldr	r1, [pc, #32]	@ (80070d0 <UARTEx_SetNbDataToProcess+0x98>)
 80070b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	0800716c 	.word	0x0800716c
 80070d0:	08007174 	.word	0x08007174

080070d4 <memset>:
 80070d4:	4402      	add	r2, r0
 80070d6:	4603      	mov	r3, r0
 80070d8:	4293      	cmp	r3, r2
 80070da:	d100      	bne.n	80070de <memset+0xa>
 80070dc:	4770      	bx	lr
 80070de:	f803 1b01 	strb.w	r1, [r3], #1
 80070e2:	e7f9      	b.n	80070d8 <memset+0x4>

080070e4 <__libc_init_array>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	4d0d      	ldr	r5, [pc, #52]	@ (800711c <__libc_init_array+0x38>)
 80070e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007120 <__libc_init_array+0x3c>)
 80070ea:	1b64      	subs	r4, r4, r5
 80070ec:	10a4      	asrs	r4, r4, #2
 80070ee:	2600      	movs	r6, #0
 80070f0:	42a6      	cmp	r6, r4
 80070f2:	d109      	bne.n	8007108 <__libc_init_array+0x24>
 80070f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007124 <__libc_init_array+0x40>)
 80070f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007128 <__libc_init_array+0x44>)
 80070f8:	f000 f818 	bl	800712c <_init>
 80070fc:	1b64      	subs	r4, r4, r5
 80070fe:	10a4      	asrs	r4, r4, #2
 8007100:	2600      	movs	r6, #0
 8007102:	42a6      	cmp	r6, r4
 8007104:	d105      	bne.n	8007112 <__libc_init_array+0x2e>
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	f855 3b04 	ldr.w	r3, [r5], #4
 800710c:	4798      	blx	r3
 800710e:	3601      	adds	r6, #1
 8007110:	e7ee      	b.n	80070f0 <__libc_init_array+0xc>
 8007112:	f855 3b04 	ldr.w	r3, [r5], #4
 8007116:	4798      	blx	r3
 8007118:	3601      	adds	r6, #1
 800711a:	e7f2      	b.n	8007102 <__libc_init_array+0x1e>
 800711c:	08007184 	.word	0x08007184
 8007120:	08007184 	.word	0x08007184
 8007124:	08007184 	.word	0x08007184
 8007128:	08007188 	.word	0x08007188

0800712c <_init>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	bf00      	nop
 8007130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007132:	bc08      	pop	{r3}
 8007134:	469e      	mov	lr, r3
 8007136:	4770      	bx	lr

08007138 <_fini>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	bf00      	nop
 800713c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713e:	bc08      	pop	{r3}
 8007140:	469e      	mov	lr, r3
 8007142:	4770      	bx	lr
