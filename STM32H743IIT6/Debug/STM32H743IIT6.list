
STM32H743IIT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a894  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800ab34  0800ab34  0000bb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800abe4  0800abe4  0000bbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800abec  0800abec  0000bbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800abf0  0800abf0  0000bbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000028  24000000  0800abf4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c14  24000028  0800ac1c  0000c028  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004c3c  0800ac1c  0000cc3c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c028  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022275  00000000  00000000  0000c056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f93  00000000  00000000  0002e2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a70  00000000  00000000  00032260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014a6  00000000  00000000  00033cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000047ba  00000000  00000000  00035176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000222da  00000000  00000000  00039930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001714e2  00000000  00000000  0005bc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cd0ec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000710c  00000000  00000000  001cd130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009b  00000000  00000000  001d423c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000028 	.word	0x24000028
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ab1c 	.word	0x0800ab1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400002c 	.word	0x2400002c
 80002dc:	0800ab1c 	.word	0x0800ab1c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    HAL_Init();
 80005d4:	f001 f926 	bl	8001824 <HAL_Init>
    SystemClock_Config();
 80005d8:	f000 f83a 	bl	8000650 <SystemClock_Config>
    MX_GPIO_Init();
 80005dc:	f000 fa30 	bl	8000a40 <MX_GPIO_Init>
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80005e0:	f000 fdd0 	bl	8001184 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e4:	f001 f91e 	bl	8001824 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e8:	f000 f832 	bl	8000650 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ec:	f000 fa28 	bl	8000a40 <MX_GPIO_Init>
	MX_UART4_Init();
 80005f0:	f000 f98a 	bl	8000908 <MX_UART4_Init>
	MX_USART6_UART_Init();
 80005f4:	f000 f9d4 	bl	80009a0 <MX_USART6_UART_Init>
	MX_SPI1_Init();
 80005f8:	f000 f8da 	bl	80007b0 <MX_SPI1_Init>
	MX_SPI5_Init();
 80005fc:	f000 f92e 	bl	800085c <MX_SPI5_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000600:	f007 fbca 	bl	8007d98 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000604:	4a0c      	ldr	r2, [pc, #48]	@ (8000638 <main+0x68>)
 8000606:	2100      	movs	r1, #0
 8000608:	480c      	ldr	r0, [pc, #48]	@ (800063c <main+0x6c>)
 800060a:	f007 fc0f 	bl	8007e2c <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <main+0x70>)
 8000612:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of buzzerTask */
	buzzerTaskHandle = osThreadNew(StartTask02, NULL, &buzzerTask_attributes);
 8000614:	4a0b      	ldr	r2, [pc, #44]	@ (8000644 <main+0x74>)
 8000616:	2100      	movs	r1, #0
 8000618:	480b      	ldr	r0, [pc, #44]	@ (8000648 <main+0x78>)
 800061a:	f007 fc07 	bl	8007e2c <osThreadNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a0a      	ldr	r2, [pc, #40]	@ (800064c <main+0x7c>)
 8000622:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */
	vTaskSuspend(buzzerTaskHandle);
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <main+0x7c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f008 fc6b 	bl	8008f04 <vTaskSuspend>
	/* Start scheduler */
	osKernelStart();
 800062e:	f007 fbd7 	bl	8007de0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000632:	bf00      	nop
 8000634:	e7fd      	b.n	8000632 <main+0x62>
 8000636:	bf00      	nop
 8000638:	0800ab64 	.word	0x0800ab64
 800063c:	08000c5d 	.word	0x08000c5d
 8000640:	2400027c 	.word	0x2400027c
 8000644:	0800ab88 	.word	0x0800ab88
 8000648:	08000d01 	.word	0x08000d01
 800064c:	24000280 	.word	0x24000280

08000650 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b09e      	sub	sp, #120	@ 0x78
 8000654:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000656:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800065a:	224c      	movs	r2, #76	@ 0x4c
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f00a fa22 	bl	800aaa8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2220      	movs	r2, #32
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f00a fa1b 	bl	800aaa8 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000672:	2002      	movs	r0, #2
 8000674:	f002 f9dc 	bl	8002a30 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b49      	ldr	r3, [pc, #292]	@ (80007a4 <SystemClock_Config+0x154>)
 800067e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000680:	4a48      	ldr	r2, [pc, #288]	@ (80007a4 <SystemClock_Config+0x154>)
 8000682:	f023 0301 	bic.w	r3, r3, #1
 8000686:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000688:	4b46      	ldr	r3, [pc, #280]	@ (80007a4 <SystemClock_Config+0x154>)
 800068a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b45      	ldr	r3, [pc, #276]	@ (80007a8 <SystemClock_Config+0x158>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a44      	ldr	r2, [pc, #272]	@ (80007a8 <SystemClock_Config+0x158>)
 8000698:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b42      	ldr	r3, [pc, #264]	@ (80007a8 <SystemClock_Config+0x158>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80006aa:	bf00      	nop
 80006ac:	4b3e      	ldr	r3, [pc, #248]	@ (80007a8 <SystemClock_Config+0x158>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006b8:	d1f8      	bne.n	80006ac <SystemClock_Config+0x5c>
	}

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b3c      	ldr	r3, [pc, #240]	@ (80007ac <SystemClock_Config+0x15c>)
 80006bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006c0:	4a3a      	ldr	r2, [pc, #232]	@ (80007ac <SystemClock_Config+0x15c>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80006ca:	4b38      	ldr	r3, [pc, #224]	@ (80007ac <SystemClock_Config+0x15c>)
 80006cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	4b32      	ldr	r3, [pc, #200]	@ (80007a8 <SystemClock_Config+0x158>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a31      	ldr	r2, [pc, #196]	@ (80007a8 <SystemClock_Config+0x158>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b2f      	ldr	r3, [pc, #188]	@ (80007a8 <SystemClock_Config+0x158>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <SystemClock_Config+0x154>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006f6:	4a2b      	ldr	r2, [pc, #172]	@ (80007a4 <SystemClock_Config+0x154>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <SystemClock_Config+0x154>)
 8000700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800070a:	bf00      	nop
 800070c:	4b26      	ldr	r3, [pc, #152]	@ (80007a8 <SystemClock_Config+0x158>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000718:	d1f8      	bne.n	800070c <SystemClock_Config+0xbc>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071a:	2302      	movs	r3, #2
 800071c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800071e:	2301      	movs	r3, #1
 8000720:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000722:	2340      	movs	r3, #64	@ 0x40
 8000724:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072a:	2300      	movs	r3, #0
 800072c:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLM = 4;
 800072e:	2304      	movs	r3, #4
 8000730:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLN = 60;
 8000732:	233c      	movs	r3, #60	@ 0x3c
 8000734:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLR = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000742:	230c      	movs	r3, #12
 8000744:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000746:	2300      	movs	r3, #0
 8000748:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	677b      	str	r3, [r7, #116]	@ 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800074e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000752:	4618      	mov	r0, r3
 8000754:	f002 f9a6 	bl	8002aa4 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x112>
		Error_Handler();
 800075e:	f000 fd4f 	bl	8001200 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000762:	233f      	movs	r3, #63	@ 0x3f
 8000764:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2303      	movs	r3, #3
 8000768:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800076e:	2308      	movs	r3, #8
 8000770:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000772:	2340      	movs	r3, #64	@ 0x40
 8000774:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000776:	2340      	movs	r3, #64	@ 0x40
 8000778:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800077a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000780:	2340      	movs	r3, #64	@ 0x40
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2104      	movs	r1, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fde4 	bl	8003358 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x14a>
		Error_Handler();
 8000796:	f000 fd33 	bl	8001200 <Error_Handler>
	}
}
 800079a:	bf00      	nop
 800079c:	3778      	adds	r7, #120	@ 0x78
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	58000400 	.word	0x58000400
 80007a8:	58024800 	.word	0x58024800
 80007ac:	58024400 	.word	0x58024400

080007b0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80007b4:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <MX_SPI1_Init+0xa4>)
 80007b6:	4a28      	ldr	r2, [pc, #160]	@ (8000858 <MX_SPI1_Init+0xa8>)
 80007b8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b26      	ldr	r3, [pc, #152]	@ (8000854 <MX_SPI1_Init+0xa4>)
 80007bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007c0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <MX_SPI1_Init+0xa4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c8:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <MX_SPI1_Init+0xa4>)
 80007ca:	2203      	movs	r2, #3
 80007cc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ce:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <MX_SPI1_Init+0xa4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <MX_SPI1_Init+0xa4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80007da:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <MX_SPI1_Init+0xa4>)
 80007dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80007e0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <MX_SPI1_Init+0xa4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_SPI1_Init+0xa4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <MX_SPI1_Init+0xa4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <MX_SPI1_Init+0xa4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 80007fa:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <MX_SPI1_Init+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_SPI1_Init+0xa4>)
 8000802:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000806:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <MX_SPI1_Init+0xa4>)
 800080a:	2200      	movs	r2, #0
 800080c:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_SPI1_Init+0xa4>)
 8000810:	2200      	movs	r2, #0
 8000812:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_SPI1_Init+0xa4>)
 8000816:	2200      	movs	r2, #0
 8000818:	641a      	str	r2, [r3, #64]	@ 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_SPI1_Init+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	645a      	str	r2, [r3, #68]	@ 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_SPI1_Init+0xa4>)
 8000822:	2200      	movs	r2, #0
 8000824:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_SPI1_Init+0xa4>)
 8000828:	2200      	movs	r2, #0
 800082a:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_SPI1_Init+0xa4>)
 800082e:	2200      	movs	r2, #0
 8000830:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_SPI1_Init+0xa4>)
 8000834:	2200      	movs	r2, #0
 8000836:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_SPI1_Init+0xa4>)
 800083a:	2200      	movs	r2, #0
 800083c:	659a      	str	r2, [r3, #88]	@ 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_SPI1_Init+0xa4>)
 8000840:	f004 ff84 	bl	800574c <HAL_SPI_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_SPI1_Init+0x9e>
		Error_Handler();
 800084a:	f000 fcd9 	bl	8001200 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	24000044 	.word	0x24000044
 8000858:	40013000 	.word	0x40013000

0800085c <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8000860:	4b27      	ldr	r3, [pc, #156]	@ (8000900 <MX_SPI5_Init+0xa4>)
 8000862:	4a28      	ldr	r2, [pc, #160]	@ (8000904 <MX_SPI5_Init+0xa8>)
 8000864:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b26      	ldr	r3, [pc, #152]	@ (8000900 <MX_SPI5_Init+0xa4>)
 8000868:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800086c:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b24      	ldr	r3, [pc, #144]	@ (8000900 <MX_SPI5_Init+0xa4>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8000874:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <MX_SPI5_Init+0xa4>)
 8000876:	2203      	movs	r2, #3
 8000878:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087a:	4b21      	ldr	r3, [pc, #132]	@ (8000900 <MX_SPI5_Init+0xa4>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000880:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <MX_SPI5_Init+0xa4>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8000886:	4b1e      	ldr	r3, [pc, #120]	@ (8000900 <MX_SPI5_Init+0xa4>)
 8000888:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800088c:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <MX_SPI5_Init+0xa4>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000894:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_SPI5_Init+0xa4>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800089a:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <MX_SPI5_Init+0xa4>)
 800089c:	2200      	movs	r2, #0
 800089e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 0x0;
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b2:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi5.Init.TxCRCInitializationPattern =
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	641a      	str	r2, [r3, #64]	@ 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi5.Init.RxCRCInitializationPattern =
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	645a      	str	r2, [r3, #68]	@ 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	659a      	str	r2, [r3, #88]	@ 0x58
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_SPI5_Init+0xa4>)
 80008ec:	f004 ff2e 	bl	800574c <HAL_SPI_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_SPI5_Init+0x9e>
		Error_Handler();
 80008f6:	f000 fc83 	bl	8001200 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	240000cc 	.word	0x240000cc
 8000904:	40015000 	.word	0x40015000

08000908 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800090c:	4b22      	ldr	r3, [pc, #136]	@ (8000998 <MX_UART4_Init+0x90>)
 800090e:	4a23      	ldr	r2, [pc, #140]	@ (800099c <MX_UART4_Init+0x94>)
 8000910:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000912:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <MX_UART4_Init+0x90>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_UART4_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_UART4_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_UART4_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_UART4_Init+0x90>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_UART4_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_UART4_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_UART4_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_UART4_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	@ 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <MX_UART4_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8000950:	4811      	ldr	r0, [pc, #68]	@ (8000998 <MX_UART4_Init+0x90>)
 8000952:	f005 fb07 	bl	8005f64 <HAL_UART_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_UART4_Init+0x58>
		Error_Handler();
 800095c:	f000 fc50 	bl	8001200 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8000960:	2100      	movs	r1, #0
 8000962:	480d      	ldr	r0, [pc, #52]	@ (8000998 <MX_UART4_Init+0x90>)
 8000964:	f007 f909 	bl	8007b7a <HAL_UARTEx_SetTxFifoThreshold>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800096e:	f000 fc47 	bl	8001200 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8000972:	2100      	movs	r1, #0
 8000974:	4808      	ldr	r0, [pc, #32]	@ (8000998 <MX_UART4_Init+0x90>)
 8000976:	f007 f93e 	bl	8007bf6 <HAL_UARTEx_SetRxFifoThreshold>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000980:	f000 fc3e 	bl	8001200 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8000984:	4804      	ldr	r0, [pc, #16]	@ (8000998 <MX_UART4_Init+0x90>)
 8000986:	f007 f8bf 	bl	8007b08 <HAL_UARTEx_DisableFifoMode>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_UART4_Init+0x8c>
		Error_Handler();
 8000990:	f000 fc36 	bl	8001200 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	24000154 	.word	0x24000154
 800099c:	40004c00 	.word	0x40004c00

080009a0 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80009a4:	4b24      	ldr	r3, [pc, #144]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 80009a6:	4a25      	ldr	r2, [pc, #148]	@ (8000a3c <MX_USART6_UART_Init+0x9c>)
 80009a8:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80009aa:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80009be:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009dc:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	@ 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 80009e8:	2300      	movs	r3, #0
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	4812      	ldr	r0, [pc, #72]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 80009f0:	f007 f802 	bl	80079f8 <HAL_RS485Ex_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART6_UART_Init+0x5e>
		Error_Handler();
 80009fa:	f000 fc01 	bl	8001200 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 80009fe:	2100      	movs	r1, #0
 8000a00:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 8000a02:	f007 f8ba 	bl	8007b7a <HAL_UARTEx_SetTxFifoThreshold>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART6_UART_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 8000a0c:	f000 fbf8 	bl	8001200 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 8000a10:	2100      	movs	r1, #0
 8000a12:	4809      	ldr	r0, [pc, #36]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 8000a14:	f007 f8ef 	bl	8007bf6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART6_UART_Init+0x82>
			!= HAL_OK) {
		Error_Handler();
 8000a1e:	f000 fbef 	bl	8001200 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_USART6_UART_Init+0x98>)
 8000a24:	f007 f870 	bl	8007b08 <HAL_UARTEx_DisableFifoMode>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART6_UART_Init+0x92>
		Error_Handler();
 8000a2e:	f000 fbe7 	bl	8001200 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	240001e8 	.word	0x240001e8
 8000a3c:	40011400 	.word	0x40011400

08000a40 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	@ 0x38
 8000a44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a56:	4b7a      	ldr	r3, [pc, #488]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	4a78      	ldr	r2, [pc, #480]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a66:	4b76      	ldr	r3, [pc, #472]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	623b      	str	r3, [r7, #32]
 8000a72:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a74:	4b72      	ldr	r3, [pc, #456]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7a:	4a71      	ldr	r2, [pc, #452]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a84:	4b6e      	ldr	r3, [pc, #440]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a92:	4b6b      	ldr	r3, [pc, #428]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	4a69      	ldr	r2, [pc, #420]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000a9a:	f043 0320 	orr.w	r3, r3, #32
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa2:	4b67      	ldr	r3, [pc, #412]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	f003 0320 	and.w	r3, r3, #32
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab0:	4b63      	ldr	r3, [pc, #396]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	4a62      	ldr	r2, [pc, #392]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac0:	4b5f      	ldr	r3, [pc, #380]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b5c      	ldr	r3, [pc, #368]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	4a5a      	ldr	r2, [pc, #360]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ade:	4b58      	ldr	r3, [pc, #352]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000aec:	4b54      	ldr	r3, [pc, #336]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af2:	4a53      	ldr	r2, [pc, #332]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000afc:	4b50      	ldr	r3, [pc, #320]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	4a4b      	ldr	r2, [pc, #300]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1a:	4b49      	ldr	r3, [pc, #292]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	f003 0308 	and.w	r3, r3, #8
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000b28:	4b45      	ldr	r3, [pc, #276]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2e:	4a44      	ldr	r2, [pc, #272]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b38:	4b41      	ldr	r3, [pc, #260]	@ (8000c40 <MX_GPIO_Init+0x200>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH, S06_Pin | LED06_Pin | S05_Pin | LED05_Pin,
 8000b46:	2200      	movs	r2, #0
 8000b48:	213c      	movs	r1, #60	@ 0x3c
 8000b4a:	483e      	ldr	r0, [pc, #248]	@ (8000c44 <MX_GPIO_Init+0x204>)
 8000b4c:	f001 ff56 	bl	80029fc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000b50:	2200      	movs	r2, #0
 8000b52:	f24c 01df 	movw	r1, #49375	@ 0xc0df
 8000b56:	483c      	ldr	r0, [pc, #240]	@ (8000c48 <MX_GPIO_Init+0x208>)
 8000b58:	f001 ff50 	bl	80029fc <HAL_GPIO_WritePin>
			S04_Pin | LED04_Pin | LOCK10_Pin | LOCK09_Pin | LOCK08_Pin
					| LOCK07_Pin | LOCK06_Pin | S10_Pin | LED10_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG,
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f647 61fc 	movw	r1, #32508	@ 0x7efc
 8000b62:	483a      	ldr	r0, [pc, #232]	@ (8000c4c <MX_GPIO_Init+0x20c>)
 8000b64:	f001 ff4a 	bl	80029fc <HAL_GPIO_WritePin>
			S03_Pin | LED03_Pin | S02_Pin | LED02_Pin | S01_Pin | LED01_Pin
					| S09_Pin | LED09_Pin | S08_Pin | LED08_Pin | S07_Pin
					| LED07_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b6e:	4838      	ldr	r0, [pc, #224]	@ (8000c50 <MX_GPIO_Init+0x210>)
 8000b70:	f001 ff44 	bl	80029fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : DHT22_Pin */
	GPIO_InitStruct.Pin = DHT22_Pin;
 8000b74:	2304      	movs	r3, #4
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4833      	ldr	r0, [pc, #204]	@ (8000c54 <MX_GPIO_Init+0x214>)
 8000b88:	f001 fd70 	bl	800266c <HAL_GPIO_Init>

	/*Configure GPIO pins : S06_Pin LED06_Pin S05_Pin LED05_Pin */
	GPIO_InitStruct.Pin = S06_Pin | LED06_Pin | S05_Pin | LED05_Pin;
 8000b8c:	233c      	movs	r3, #60	@ 0x3c
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4828      	ldr	r0, [pc, #160]	@ (8000c44 <MX_GPIO_Init+0x204>)
 8000ba4:	f001 fd62 	bl	800266c <HAL_GPIO_Init>

	/*Configure GPIO pins : LOCK05_Pin LOCK04_Pin LOCK03_Pin LOCK02_Pin
	 ADD4_Pin ADD3_Pin ADD2_Pin ADD1_Pin */
	GPIO_InitStruct.Pin = LOCK05_Pin | LOCK04_Pin | LOCK03_Pin | LOCK02_Pin
 8000ba8:	f24f 0378 	movw	r3, #61560	@ 0xf078
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
			| ADD4_Pin | ADD3_Pin | ADD2_Pin | ADD1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4826      	ldr	r0, [pc, #152]	@ (8000c58 <MX_GPIO_Init+0x218>)
 8000bbe:	f001 fd55 	bl	800266c <HAL_GPIO_Init>

	/*Configure GPIO pin : LOCK01_Pin */
	GPIO_InitStruct.Pin = LOCK01_Pin;
 8000bc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(LOCK01_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481c      	ldr	r0, [pc, #112]	@ (8000c48 <MX_GPIO_Init+0x208>)
 8000bd8:	f001 fd48 	bl	800266c <HAL_GPIO_Init>

	/*Configure GPIO pins : S04_Pin LED04_Pin LOCK10_Pin LOCK09_Pin
	 LOCK08_Pin LOCK07_Pin LOCK06_Pin S10_Pin
	 LED10_Pin */
	GPIO_InitStruct.Pin = S04_Pin | LED04_Pin | LOCK10_Pin | LOCK09_Pin
 8000bdc:	f24c 03df 	movw	r3, #49375	@ 0xc0df
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
			| LOCK08_Pin | LOCK07_Pin | LOCK06_Pin | S10_Pin | LED10_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4814      	ldr	r0, [pc, #80]	@ (8000c48 <MX_GPIO_Init+0x208>)
 8000bf6:	f001 fd39 	bl	800266c <HAL_GPIO_Init>

	/*Configure GPIO pins : S03_Pin LED03_Pin S02_Pin LED02_Pin
	 S01_Pin LED01_Pin S09_Pin LED09_Pin
	 S08_Pin LED08_Pin S07_Pin LED07_Pin */
	GPIO_InitStruct.Pin = S03_Pin | LED03_Pin | S02_Pin | LED02_Pin | S01_Pin
 8000bfa:	f647 63fc 	movw	r3, #32508	@ 0x7efc
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
			| LED01_Pin | S09_Pin | LED09_Pin | S08_Pin | LED08_Pin | S07_Pin
			| LED07_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	480e      	ldr	r0, [pc, #56]	@ (8000c4c <MX_GPIO_Init+0x20c>)
 8000c14:	f001 fd2a 	bl	800266c <HAL_GPIO_Init>

	/*Configure GPIO pin : BUZZER_Pin */
	GPIO_InitStruct.Pin = BUZZER_Pin;
 8000c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4807      	ldr	r0, [pc, #28]	@ (8000c50 <MX_GPIO_Init+0x210>)
 8000c32:	f001 fd1b 	bl	800266c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c36:	bf00      	nop
 8000c38:	3738      	adds	r7, #56	@ 0x38
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	58024400 	.word	0x58024400
 8000c44:	58021c00 	.word	0x58021c00
 8000c48:	58020c00 	.word	0x58020c00
 8000c4c:	58021800 	.word	0x58021800
 8000c50:	58020800 	.word	0x58020800
 8000c54:	58021000 	.word	0x58021000
 8000c58:	58020400 	.word	0x58020400

08000c5c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if (HAL_UART_Receive(&huart4, rxBuffer, 8, 10) == HAL_OK) {
 8000c64:	230a      	movs	r3, #10
 8000c66:	2208      	movs	r2, #8
 8000c68:	4921      	ldr	r1, [pc, #132]	@ (8000cf0 <StartDefaultTask+0x94>)
 8000c6a:	4822      	ldr	r0, [pc, #136]	@ (8000cf4 <StartDefaultTask+0x98>)
 8000c6c:	f005 fa58 	bl	8006120 <HAL_UART_Receive>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d138      	bne.n	8000ce8 <StartDefaultTask+0x8c>
			// Data received successfully, transmit it back
			//HAL_GPIO_WritePin(S01_GPIO_Port, S01_Pin, 1);
			//HAL_UART_Transmit(&huart4, (uint8_t*) rxBuffer, 8, 10);
			if (rxBuffer[6] == checkSum() && rxBuffer[1] == 0x01) {
 8000c76:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <StartDefaultTask+0x94>)
 8000c78:	799c      	ldrb	r4, [r3, #6]
 8000c7a:	f000 f937 	bl	8000eec <checkSum>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	429c      	cmp	r4, r3
 8000c82:	d131      	bne.n	8000ce8 <StartDefaultTask+0x8c>
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <StartDefaultTask+0x94>)
 8000c86:	785b      	ldrb	r3, [r3, #1]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d12d      	bne.n	8000ce8 <StartDefaultTask+0x8c>
				//Control
				if (rxBuffer[2] == 0x43) {
 8000c8c:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <StartDefaultTask+0x94>)
 8000c8e:	789b      	ldrb	r3, [r3, #2]
 8000c90:	2b43      	cmp	r3, #67	@ 0x43
 8000c92:	d126      	bne.n	8000ce2 <StartDefaultTask+0x86>
					//Control Buzzer
					if (rxBuffer[3] == 0x42) {
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <StartDefaultTask+0x94>)
 8000c96:	78db      	ldrb	r3, [r3, #3]
 8000c98:	2b42      	cmp	r3, #66	@ 0x42
 8000c9a:	d117      	bne.n	8000ccc <StartDefaultTask+0x70>
						if (rxBuffer[5] == 0x31) {
 8000c9c:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <StartDefaultTask+0x94>)
 8000c9e:	795b      	ldrb	r3, [r3, #5]
 8000ca0:	2b31      	cmp	r3, #49	@ 0x31
 8000ca2:	d104      	bne.n	8000cae <StartDefaultTask+0x52>
							vTaskResume(buzzerTaskHandle);
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <StartDefaultTask+0x9c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f008 f9d3 	bl	8009054 <vTaskResume>
						}
						if (rxBuffer[5] == 0x30) {
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <StartDefaultTask+0x94>)
 8000cb0:	795b      	ldrb	r3, [r3, #5]
 8000cb2:	2b30      	cmp	r3, #48	@ 0x30
 8000cb4:	d10a      	bne.n	8000ccc <StartDefaultTask+0x70>
							vTaskSuspend(buzzerTaskHandle);
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <StartDefaultTask+0x9c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f008 f922 	bl	8008f04 <vTaskSuspend>
							HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc6:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <StartDefaultTask+0xa0>)
 8000cc8:	f001 fe98 	bl	80029fc <HAL_GPIO_WritePin>
									GPIO_PIN_RESET);
						}

					}
					//Control Solenoid
					if (rxBuffer[3] == 0x53) {
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <StartDefaultTask+0x94>)
 8000cce:	78db      	ldrb	r3, [r3, #3]
 8000cd0:	2b53      	cmp	r3, #83	@ 0x53
 8000cd2:	d106      	bne.n	8000ce2 <StartDefaultTask+0x86>
						solenoidControl(rxBuffer[4]);
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <StartDefaultTask+0x94>)
 8000cd6:	791b      	ldrb	r3, [r3, #4]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f97d 	bl	8000fd8 <solenoidControl>
						replyProtocol();
 8000cde:	f000 f8b3 	bl	8000e48 <replyProtocol>
					}
				}
				//Read
				if (rxBuffer[2] == 0x52) {
 8000ce2:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <StartDefaultTask+0x94>)
 8000ce4:	789b      	ldrb	r3, [r3, #2]
 8000ce6:	2b52      	cmp	r3, #82	@ 0x52
					//HAL_UART_Transmit(&huart4, (uint8_t*) address, 1, 10);
				}
				//HAL_UART_Transmit(&huart4, (uint8_t*) play, 8, 10);
			}
		}
		osDelay(1);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f007 f931 	bl	8007f50 <osDelay>
		if (HAL_UART_Receive(&huart4, rxBuffer, 8, 10) == HAL_OK) {
 8000cee:	e7b9      	b.n	8000c64 <StartDefaultTask+0x8>
 8000cf0:	24000294 	.word	0x24000294
 8000cf4:	24000154 	.word	0x24000154
 8000cf8:	24000280 	.word	0x24000280
 8000cfc:	58020800 	.word	0x58020800

08000d00 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d0e:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <StartTask02+0x34>)
 8000d10:	f001 fe74 	bl	80029fc <HAL_GPIO_WritePin>
		osDelay(500);
 8000d14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d18:	f007 f91a 	bl	8007f50 <osDelay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d22:	4804      	ldr	r0, [pc, #16]	@ (8000d34 <StartTask02+0x34>)
 8000d24:	f001 fe6a 	bl	80029fc <HAL_GPIO_WritePin>
		osDelay(500);
 8000d28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d2c:	f007 f910 	bl	8007f50 <osDelay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000d30:	bf00      	nop
 8000d32:	e7e9      	b.n	8000d08 <StartTask02+0x8>
 8000d34:	58020800 	.word	0x58020800

08000d38 <readLockStatus>:
	}
	/* USER CODE END StartTask02 */
}

void readLockStatus() {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	solenoidStatus[0] = (
			(HAL_GPIO_ReadPin(LOCK01_GPIO_Port, LOCK01_Pin) == GPIO_PIN_SET) ?
 8000d3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d40:	483e      	ldr	r0, [pc, #248]	@ (8000e3c <readLockStatus+0x104>)
 8000d42:	f001 fe43 	bl	80029cc <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
	solenoidStatus[0] = (
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d101      	bne.n	8000d50 <readLockStatus+0x18>
 8000d4c:	2231      	movs	r2, #49	@ 0x31
 8000d4e:	e000      	b.n	8000d52 <readLockStatus+0x1a>
 8000d50:	2230      	movs	r2, #48	@ 0x30
 8000d52:	4b3b      	ldr	r3, [pc, #236]	@ (8000e40 <readLockStatus+0x108>)
 8000d54:	701a      	strb	r2, [r3, #0]
					0x31 : 0x30);
	solenoidStatus[1] = (
			(HAL_GPIO_ReadPin(LOCK02_GPIO_Port, LOCK02_Pin) == GPIO_PIN_SET) ?
 8000d56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d5a:	483a      	ldr	r0, [pc, #232]	@ (8000e44 <readLockStatus+0x10c>)
 8000d5c:	f001 fe36 	bl	80029cc <HAL_GPIO_ReadPin>
 8000d60:	4603      	mov	r3, r0
	solenoidStatus[1] = (
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d101      	bne.n	8000d6a <readLockStatus+0x32>
 8000d66:	2231      	movs	r2, #49	@ 0x31
 8000d68:	e000      	b.n	8000d6c <readLockStatus+0x34>
 8000d6a:	2230      	movs	r2, #48	@ 0x30
 8000d6c:	4b34      	ldr	r3, [pc, #208]	@ (8000e40 <readLockStatus+0x108>)
 8000d6e:	705a      	strb	r2, [r3, #1]
					0x31 : 0x30);
	solenoidStatus[2] = (
			(HAL_GPIO_ReadPin(LOCK03_GPIO_Port, LOCK03_Pin) == GPIO_PIN_SET) ?
 8000d70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d74:	4833      	ldr	r0, [pc, #204]	@ (8000e44 <readLockStatus+0x10c>)
 8000d76:	f001 fe29 	bl	80029cc <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
	solenoidStatus[2] = (
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d101      	bne.n	8000d84 <readLockStatus+0x4c>
 8000d80:	2231      	movs	r2, #49	@ 0x31
 8000d82:	e000      	b.n	8000d86 <readLockStatus+0x4e>
 8000d84:	2230      	movs	r2, #48	@ 0x30
 8000d86:	4b2e      	ldr	r3, [pc, #184]	@ (8000e40 <readLockStatus+0x108>)
 8000d88:	709a      	strb	r2, [r3, #2]
					0x31 : 0x30);
	solenoidStatus[3] = (
			(HAL_GPIO_ReadPin(LOCK04_GPIO_Port, LOCK04_Pin) == GPIO_PIN_SET) ?
 8000d8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d8e:	482d      	ldr	r0, [pc, #180]	@ (8000e44 <readLockStatus+0x10c>)
 8000d90:	f001 fe1c 	bl	80029cc <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
	solenoidStatus[3] = (
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d101      	bne.n	8000d9e <readLockStatus+0x66>
 8000d9a:	2231      	movs	r2, #49	@ 0x31
 8000d9c:	e000      	b.n	8000da0 <readLockStatus+0x68>
 8000d9e:	2230      	movs	r2, #48	@ 0x30
 8000da0:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <readLockStatus+0x108>)
 8000da2:	70da      	strb	r2, [r3, #3]
					0x31 : 0x30);
	solenoidStatus[4] = (
			(HAL_GPIO_ReadPin(LOCK05_GPIO_Port, LOCK05_Pin) == GPIO_PIN_SET) ?
 8000da4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000da8:	4826      	ldr	r0, [pc, #152]	@ (8000e44 <readLockStatus+0x10c>)
 8000daa:	f001 fe0f 	bl	80029cc <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
	solenoidStatus[4] = (
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d101      	bne.n	8000db8 <readLockStatus+0x80>
 8000db4:	2231      	movs	r2, #49	@ 0x31
 8000db6:	e000      	b.n	8000dba <readLockStatus+0x82>
 8000db8:	2230      	movs	r2, #48	@ 0x30
 8000dba:	4b21      	ldr	r3, [pc, #132]	@ (8000e40 <readLockStatus+0x108>)
 8000dbc:	711a      	strb	r2, [r3, #4]
					0x31 : 0x30);
	solenoidStatus[5] = (
			(HAL_GPIO_ReadPin(LOCK06_GPIO_Port, LOCK06_Pin) == GPIO_PIN_SET) ?
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	481e      	ldr	r0, [pc, #120]	@ (8000e3c <readLockStatus+0x104>)
 8000dc2:	f001 fe03 	bl	80029cc <HAL_GPIO_ReadPin>
 8000dc6:	4603      	mov	r3, r0
	solenoidStatus[5] = (
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d101      	bne.n	8000dd0 <readLockStatus+0x98>
 8000dcc:	2231      	movs	r2, #49	@ 0x31
 8000dce:	e000      	b.n	8000dd2 <readLockStatus+0x9a>
 8000dd0:	2230      	movs	r2, #48	@ 0x30
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <readLockStatus+0x108>)
 8000dd4:	715a      	strb	r2, [r3, #5]
					0x31 : 0x30);
	solenoidStatus[6] = (
			(HAL_GPIO_ReadPin(LOCK07_GPIO_Port, LOCK07_Pin) == GPIO_PIN_SET) ?
 8000dd6:	2108      	movs	r1, #8
 8000dd8:	4818      	ldr	r0, [pc, #96]	@ (8000e3c <readLockStatus+0x104>)
 8000dda:	f001 fdf7 	bl	80029cc <HAL_GPIO_ReadPin>
 8000dde:	4603      	mov	r3, r0
	solenoidStatus[6] = (
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <readLockStatus+0xb0>
 8000de4:	2231      	movs	r2, #49	@ 0x31
 8000de6:	e000      	b.n	8000dea <readLockStatus+0xb2>
 8000de8:	2230      	movs	r2, #48	@ 0x30
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <readLockStatus+0x108>)
 8000dec:	719a      	strb	r2, [r3, #6]
					0x31 : 0x30);
	solenoidStatus[7] = (
			(HAL_GPIO_ReadPin(LOCK08_GPIO_Port, LOCK08_Pin) == GPIO_PIN_SET) ?
 8000dee:	2104      	movs	r1, #4
 8000df0:	4812      	ldr	r0, [pc, #72]	@ (8000e3c <readLockStatus+0x104>)
 8000df2:	f001 fdeb 	bl	80029cc <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
	solenoidStatus[7] = (
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d101      	bne.n	8000e00 <readLockStatus+0xc8>
 8000dfc:	2231      	movs	r2, #49	@ 0x31
 8000dfe:	e000      	b.n	8000e02 <readLockStatus+0xca>
 8000e00:	2230      	movs	r2, #48	@ 0x30
 8000e02:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <readLockStatus+0x108>)
 8000e04:	71da      	strb	r2, [r3, #7]
					0x31 : 0x30);
	solenoidStatus[8] = (
			(HAL_GPIO_ReadPin(LOCK09_GPIO_Port, LOCK09_Pin) == GPIO_PIN_SET) ?
 8000e06:	2102      	movs	r1, #2
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <readLockStatus+0x104>)
 8000e0a:	f001 fddf 	bl	80029cc <HAL_GPIO_ReadPin>
 8000e0e:	4603      	mov	r3, r0
	solenoidStatus[8] = (
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <readLockStatus+0xe0>
 8000e14:	2231      	movs	r2, #49	@ 0x31
 8000e16:	e000      	b.n	8000e1a <readLockStatus+0xe2>
 8000e18:	2230      	movs	r2, #48	@ 0x30
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <readLockStatus+0x108>)
 8000e1c:	721a      	strb	r2, [r3, #8]
					0x31 : 0x30);
	solenoidStatus[9] = (
			(HAL_GPIO_ReadPin(LOCK10_GPIO_Port, LOCK10_Pin) == GPIO_PIN_SET) ?
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <readLockStatus+0x104>)
 8000e22:	f001 fdd3 	bl	80029cc <HAL_GPIO_ReadPin>
 8000e26:	4603      	mov	r3, r0
	solenoidStatus[9] = (
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d101      	bne.n	8000e30 <readLockStatus+0xf8>
 8000e2c:	2231      	movs	r2, #49	@ 0x31
 8000e2e:	e000      	b.n	8000e32 <readLockStatus+0xfa>
 8000e30:	2230      	movs	r2, #48	@ 0x30
 8000e32:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <readLockStatus+0x108>)
 8000e34:	725a      	strb	r2, [r3, #9]
					0x31 : 0x30);
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	58020c00 	.word	0x58020c00
 8000e40:	24000288 	.word	0x24000288
 8000e44:	58020400 	.word	0x58020400

08000e48 <replyProtocol>:

void replyProtocol() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	txBuffer[0] = 0x02;
 8000e4c:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <replyProtocol+0x94>)
 8000e4e:	2202      	movs	r2, #2
 8000e50:	701a      	strb	r2, [r3, #0]
	txBuffer[1] = readAddress();
 8000e52:	f000 f867 	bl	8000f24 <readAddress>
 8000e56:	4603      	mov	r3, r0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <replyProtocol+0x94>)
 8000e5c:	705a      	strb	r2, [r3, #1]
	txBuffer[2] = rxBuffer[2];
 8000e5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <replyProtocol+0x98>)
 8000e60:	789a      	ldrb	r2, [r3, #2]
 8000e62:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <replyProtocol+0x94>)
 8000e64:	709a      	strb	r2, [r3, #2]
	readLockStatus();
 8000e66:	f7ff ff67 	bl	8000d38 <readLockStatus>
	txBuffer[3] = solenoidStatus[0];
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <replyProtocol+0x9c>)
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <replyProtocol+0x94>)
 8000e70:	70da      	strb	r2, [r3, #3]
	txBuffer[4] = solenoidStatus[1];
 8000e72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <replyProtocol+0x9c>)
 8000e74:	785a      	ldrb	r2, [r3, #1]
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <replyProtocol+0x94>)
 8000e78:	711a      	strb	r2, [r3, #4]
	txBuffer[5] = solenoidStatus[2];
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <replyProtocol+0x9c>)
 8000e7c:	789a      	ldrb	r2, [r3, #2]
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <replyProtocol+0x94>)
 8000e80:	715a      	strb	r2, [r3, #5]
	txBuffer[6] = solenoidStatus[3];
 8000e82:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <replyProtocol+0x9c>)
 8000e84:	78da      	ldrb	r2, [r3, #3]
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <replyProtocol+0x94>)
 8000e88:	719a      	strb	r2, [r3, #6]
	txBuffer[7] = solenoidStatus[4];
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <replyProtocol+0x9c>)
 8000e8c:	791a      	ldrb	r2, [r3, #4]
 8000e8e:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <replyProtocol+0x94>)
 8000e90:	71da      	strb	r2, [r3, #7]
	txBuffer[8] = solenoidStatus[5];
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <replyProtocol+0x9c>)
 8000e94:	795a      	ldrb	r2, [r3, #5]
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <replyProtocol+0x94>)
 8000e98:	721a      	strb	r2, [r3, #8]
	txBuffer[9] = solenoidStatus[6];
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <replyProtocol+0x9c>)
 8000e9c:	799a      	ldrb	r2, [r3, #6]
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <replyProtocol+0x94>)
 8000ea0:	725a      	strb	r2, [r3, #9]
	txBuffer[10] = solenoidStatus[7];
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <replyProtocol+0x9c>)
 8000ea4:	79da      	ldrb	r2, [r3, #7]
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <replyProtocol+0x94>)
 8000ea8:	729a      	strb	r2, [r3, #10]
	txBuffer[11] = solenoidStatus[8];
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <replyProtocol+0x9c>)
 8000eac:	7a1a      	ldrb	r2, [r3, #8]
 8000eae:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <replyProtocol+0x94>)
 8000eb0:	72da      	strb	r2, [r3, #11]
	txBuffer[12] = solenoidStatus[9];
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <replyProtocol+0x9c>)
 8000eb4:	7a5a      	ldrb	r2, [r3, #9]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <replyProtocol+0x94>)
 8000eb8:	731a      	strb	r2, [r3, #12]
	txBuffer[13] = checkSum();
 8000eba:	f000 f817 	bl	8000eec <checkSum>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <replyProtocol+0x94>)
 8000ec4:	735a      	strb	r2, [r3, #13]
	txBuffer[14] = 0x03;
 8000ec6:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <replyProtocol+0x94>)
 8000ec8:	2203      	movs	r2, #3
 8000eca:	739a      	strb	r2, [r3, #14]
	HAL_UART_Transmit(&huart4, (uint8_t*) txBuffer, sizeof(txBuffer), 10);
 8000ecc:	230a      	movs	r3, #10
 8000ece:	220f      	movs	r2, #15
 8000ed0:	4902      	ldr	r1, [pc, #8]	@ (8000edc <replyProtocol+0x94>)
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <replyProtocol+0xa0>)
 8000ed4:	f005 f896 	bl	8006004 <HAL_UART_Transmit>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	24000004 	.word	0x24000004
 8000ee0:	24000294 	.word	0x24000294
 8000ee4:	24000288 	.word	0x24000288
 8000ee8:	24000154 	.word	0x24000154

08000eec <checkSum>:

uint8_t checkSum() {
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	return (rxBuffer[1] ^ rxBuffer[2] ^ rxBuffer[3] ^ rxBuffer[4] ^ rxBuffer[5]);
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <checkSum+0x34>)
 8000ef2:	785a      	ldrb	r2, [r3, #1]
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <checkSum+0x34>)
 8000ef6:	789b      	ldrb	r3, [r3, #2]
 8000ef8:	4053      	eors	r3, r2
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <checkSum+0x34>)
 8000efe:	78db      	ldrb	r3, [r3, #3]
 8000f00:	4053      	eors	r3, r2
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <checkSum+0x34>)
 8000f06:	791b      	ldrb	r3, [r3, #4]
 8000f08:	4053      	eors	r3, r2
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <checkSum+0x34>)
 8000f0e:	795b      	ldrb	r3, [r3, #5]
 8000f10:	4053      	eors	r3, r2
 8000f12:	b2db      	uxtb	r3, r3
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	24000294 	.word	0x24000294

08000f24 <readAddress>:
uint8_t readAddress() {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	address[0] = 0x00;
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <readAddress+0xac>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
	address[0] |= (HAL_GPIO_ReadPin(ADD1_GPIO_Port, ADD1_Pin) == GPIO_PIN_SET)
 8000f2e:	2140      	movs	r1, #64	@ 0x40
 8000f30:	4828      	ldr	r0, [pc, #160]	@ (8000fd4 <readAddress+0xb0>)
 8000f32:	f001 fd4b 	bl	80029cc <HAL_GPIO_ReadPin>
 8000f36:	4603      	mov	r3, r0
			<< 0;
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4619      	mov	r1, r3
	address[0] |= (HAL_GPIO_ReadPin(ADD1_GPIO_Port, ADD1_Pin) == GPIO_PIN_SET)
 8000f44:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <readAddress+0xac>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b25a      	sxtb	r2, r3
 8000f4a:	b24b      	sxtb	r3, r1
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <readAddress+0xac>)
 8000f54:	701a      	strb	r2, [r3, #0]
	address[0] |= (HAL_GPIO_ReadPin(ADD2_GPIO_Port, ADD2_Pin) == GPIO_PIN_SET)
 8000f56:	2120      	movs	r1, #32
 8000f58:	481e      	ldr	r0, [pc, #120]	@ (8000fd4 <readAddress+0xb0>)
 8000f5a:	f001 fd37 	bl	80029cc <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
			<< 1;
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <readAddress+0x44>
 8000f64:	2102      	movs	r1, #2
 8000f66:	e000      	b.n	8000f6a <readAddress+0x46>
 8000f68:	2100      	movs	r1, #0
	address[0] |= (HAL_GPIO_ReadPin(ADD2_GPIO_Port, ADD2_Pin) == GPIO_PIN_SET)
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <readAddress+0xac>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b25a      	sxtb	r2, r3
 8000f70:	b24b      	sxtb	r3, r1
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <readAddress+0xac>)
 8000f7a:	701a      	strb	r2, [r3, #0]
	address[0] |= (HAL_GPIO_ReadPin(ADD3_GPIO_Port, ADD3_Pin) == GPIO_PIN_SET)
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	4815      	ldr	r0, [pc, #84]	@ (8000fd4 <readAddress+0xb0>)
 8000f80:	f001 fd24 	bl	80029cc <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
			<< 2;
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d101      	bne.n	8000f8e <readAddress+0x6a>
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	e000      	b.n	8000f90 <readAddress+0x6c>
 8000f8e:	2100      	movs	r1, #0
	address[0] |= (HAL_GPIO_ReadPin(ADD3_GPIO_Port, ADD3_Pin) == GPIO_PIN_SET)
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <readAddress+0xac>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b25a      	sxtb	r2, r3
 8000f96:	b24b      	sxtb	r3, r1
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <readAddress+0xac>)
 8000fa0:	701a      	strb	r2, [r3, #0]
	address[0] |= (HAL_GPIO_ReadPin(ADD4_GPIO_Port, ADD4_Pin) == GPIO_PIN_SET)
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	480b      	ldr	r0, [pc, #44]	@ (8000fd4 <readAddress+0xb0>)
 8000fa6:	f001 fd11 	bl	80029cc <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
			<< 3;
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d101      	bne.n	8000fb4 <readAddress+0x90>
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	e000      	b.n	8000fb6 <readAddress+0x92>
 8000fb4:	2100      	movs	r1, #0
	address[0] |= (HAL_GPIO_ReadPin(ADD4_GPIO_Port, ADD4_Pin) == GPIO_PIN_SET)
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <readAddress+0xac>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b25a      	sxtb	r2, r3
 8000fbc:	b24b      	sxtb	r3, r1
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b02      	ldr	r3, [pc, #8]	@ (8000fd0 <readAddress+0xac>)
 8000fc6:	701a      	strb	r2, [r3, #0]
	return address[0];
 8000fc8:	4b01      	ldr	r3, [pc, #4]	@ (8000fd0 <readAddress+0xac>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	24000284 	.word	0x24000284
 8000fd4:	58020400 	.word	0x58020400

08000fd8 <solenoidControl>:
	return (txBuffer[1] ^ txBuffer[2] ^ txBuffer[3] ^ txBuffer[4] ^ txBuffer[5]
			^ txBuffer[6] ^ txBuffer[7] ^ txBuffer[8] ^ txBuffer[9]
			^ txBuffer[10] ^ txBuffer[11] ^ txBuffer[12]);
}

void solenoidControl(uint8_t solenoidNo) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	switch (solenoidNo) {
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	3b31      	subs	r3, #49	@ 0x31
 8000fe6:	2b09      	cmp	r3, #9
 8000fe8:	f200 80c0 	bhi.w	800116c <solenoidControl+0x194>
 8000fec:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff4 <solenoidControl+0x1c>)
 8000fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff2:	bf00      	nop
 8000ff4:	0800101d 	.word	0x0800101d
 8000ff8:	0800103d 	.word	0x0800103d
 8000ffc:	0800105d 	.word	0x0800105d
 8001000:	0800107d 	.word	0x0800107d
 8001004:	080010a1 	.word	0x080010a1
 8001008:	080010c1 	.word	0x080010c1
 800100c:	080010e1 	.word	0x080010e1
 8001010:	08001105 	.word	0x08001105
 8001014:	08001129 	.word	0x08001129
 8001018:	0800114d 	.word	0x0800114d
	case 0x31:
		HAL_GPIO_WritePin(S01_GPIO_Port, S01_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2140      	movs	r1, #64	@ 0x40
 8001020:	4854      	ldr	r0, [pc, #336]	@ (8001174 <solenoidControl+0x19c>)
 8001022:	f001 fceb 	bl	80029fc <HAL_GPIO_WritePin>
		osDelay(solenoidTimeDelay);
 8001026:	4b54      	ldr	r3, [pc, #336]	@ (8001178 <solenoidControl+0x1a0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f006 ff90 	bl	8007f50 <osDelay>
		HAL_GPIO_WritePin(S01_GPIO_Port, S01_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2140      	movs	r1, #64	@ 0x40
 8001034:	484f      	ldr	r0, [pc, #316]	@ (8001174 <solenoidControl+0x19c>)
 8001036:	f001 fce1 	bl	80029fc <HAL_GPIO_WritePin>
		break;
 800103a:	e097      	b.n	800116c <solenoidControl+0x194>
	case 0x32:
		HAL_GPIO_WritePin(S02_GPIO_Port, S02_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2110      	movs	r1, #16
 8001040:	484c      	ldr	r0, [pc, #304]	@ (8001174 <solenoidControl+0x19c>)
 8001042:	f001 fcdb 	bl	80029fc <HAL_GPIO_WritePin>
		osDelay(solenoidTimeDelay);
 8001046:	4b4c      	ldr	r3, [pc, #304]	@ (8001178 <solenoidControl+0x1a0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f006 ff80 	bl	8007f50 <osDelay>
		HAL_GPIO_WritePin(S02_GPIO_Port, S02_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2110      	movs	r1, #16
 8001054:	4847      	ldr	r0, [pc, #284]	@ (8001174 <solenoidControl+0x19c>)
 8001056:	f001 fcd1 	bl	80029fc <HAL_GPIO_WritePin>
		break;
 800105a:	e087      	b.n	800116c <solenoidControl+0x194>
	case 0x33:
		HAL_GPIO_WritePin(S03_GPIO_Port, S03_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	2104      	movs	r1, #4
 8001060:	4844      	ldr	r0, [pc, #272]	@ (8001174 <solenoidControl+0x19c>)
 8001062:	f001 fccb 	bl	80029fc <HAL_GPIO_WritePin>
		osDelay(solenoidTimeDelay);
 8001066:	4b44      	ldr	r3, [pc, #272]	@ (8001178 <solenoidControl+0x1a0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f006 ff70 	bl	8007f50 <osDelay>
		HAL_GPIO_WritePin(S03_GPIO_Port, S03_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2104      	movs	r1, #4
 8001074:	483f      	ldr	r0, [pc, #252]	@ (8001174 <solenoidControl+0x19c>)
 8001076:	f001 fcc1 	bl	80029fc <HAL_GPIO_WritePin>
		break;
 800107a:	e077      	b.n	800116c <solenoidControl+0x194>
	case 0x34:
		HAL_GPIO_WritePin(S04_GPIO_Port, S04_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001082:	483e      	ldr	r0, [pc, #248]	@ (800117c <solenoidControl+0x1a4>)
 8001084:	f001 fcba 	bl	80029fc <HAL_GPIO_WritePin>
		osDelay(solenoidTimeDelay);
 8001088:	4b3b      	ldr	r3, [pc, #236]	@ (8001178 <solenoidControl+0x1a0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f006 ff5f 	bl	8007f50 <osDelay>
		HAL_GPIO_WritePin(S04_GPIO_Port, S04_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001098:	4838      	ldr	r0, [pc, #224]	@ (800117c <solenoidControl+0x1a4>)
 800109a:	f001 fcaf 	bl	80029fc <HAL_GPIO_WritePin>
		break;
 800109e:	e065      	b.n	800116c <solenoidControl+0x194>
	case 0x35:
		HAL_GPIO_WritePin(S05_GPIO_Port, S05_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2110      	movs	r1, #16
 80010a4:	4836      	ldr	r0, [pc, #216]	@ (8001180 <solenoidControl+0x1a8>)
 80010a6:	f001 fca9 	bl	80029fc <HAL_GPIO_WritePin>
		osDelay(solenoidTimeDelay);
 80010aa:	4b33      	ldr	r3, [pc, #204]	@ (8001178 <solenoidControl+0x1a0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f006 ff4e 	bl	8007f50 <osDelay>
		HAL_GPIO_WritePin(S05_GPIO_Port, S05_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2110      	movs	r1, #16
 80010b8:	4831      	ldr	r0, [pc, #196]	@ (8001180 <solenoidControl+0x1a8>)
 80010ba:	f001 fc9f 	bl	80029fc <HAL_GPIO_WritePin>
		break;
 80010be:	e055      	b.n	800116c <solenoidControl+0x194>
	case 0x36:
		HAL_GPIO_WritePin(S06_GPIO_Port, S06_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2104      	movs	r1, #4
 80010c4:	482e      	ldr	r0, [pc, #184]	@ (8001180 <solenoidControl+0x1a8>)
 80010c6:	f001 fc99 	bl	80029fc <HAL_GPIO_WritePin>
		osDelay(solenoidTimeDelay);
 80010ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <solenoidControl+0x1a0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f006 ff3e 	bl	8007f50 <osDelay>
		HAL_GPIO_WritePin(S06_GPIO_Port, S06_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2104      	movs	r1, #4
 80010d8:	4829      	ldr	r0, [pc, #164]	@ (8001180 <solenoidControl+0x1a8>)
 80010da:	f001 fc8f 	bl	80029fc <HAL_GPIO_WritePin>
		break;
 80010de:	e045      	b.n	800116c <solenoidControl+0x194>
	case 0x37:
		HAL_GPIO_WritePin(S07_GPIO_Port, S07_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010e6:	4823      	ldr	r0, [pc, #140]	@ (8001174 <solenoidControl+0x19c>)
 80010e8:	f001 fc88 	bl	80029fc <HAL_GPIO_WritePin>
		osDelay(solenoidTimeDelay);
 80010ec:	4b22      	ldr	r3, [pc, #136]	@ (8001178 <solenoidControl+0x1a0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f006 ff2d 	bl	8007f50 <osDelay>
		HAL_GPIO_WritePin(S07_GPIO_Port, S07_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010fc:	481d      	ldr	r0, [pc, #116]	@ (8001174 <solenoidControl+0x19c>)
 80010fe:	f001 fc7d 	bl	80029fc <HAL_GPIO_WritePin>
		break;
 8001102:	e033      	b.n	800116c <solenoidControl+0x194>
	case 0x38:
		HAL_GPIO_WritePin(S08_GPIO_Port, S08_Pin, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800110a:	481a      	ldr	r0, [pc, #104]	@ (8001174 <solenoidControl+0x19c>)
 800110c:	f001 fc76 	bl	80029fc <HAL_GPIO_WritePin>
		osDelay(solenoidTimeDelay);
 8001110:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <solenoidControl+0x1a0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f006 ff1b 	bl	8007f50 <osDelay>
		HAL_GPIO_WritePin(S08_GPIO_Port, S08_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001120:	4814      	ldr	r0, [pc, #80]	@ (8001174 <solenoidControl+0x19c>)
 8001122:	f001 fc6b 	bl	80029fc <HAL_GPIO_WritePin>
		break;
 8001126:	e021      	b.n	800116c <solenoidControl+0x194>
	case 0x39:
		HAL_GPIO_WritePin(S09_GPIO_Port, S09_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800112e:	4811      	ldr	r0, [pc, #68]	@ (8001174 <solenoidControl+0x19c>)
 8001130:	f001 fc64 	bl	80029fc <HAL_GPIO_WritePin>
		osDelay(solenoidTimeDelay);
 8001134:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <solenoidControl+0x1a0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f006 ff09 	bl	8007f50 <osDelay>
		HAL_GPIO_WritePin(S09_GPIO_Port, S09_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001144:	480b      	ldr	r0, [pc, #44]	@ (8001174 <solenoidControl+0x19c>)
 8001146:	f001 fc59 	bl	80029fc <HAL_GPIO_WritePin>
		break;
 800114a:	e00f      	b.n	800116c <solenoidControl+0x194>
	case 0x3A:
		HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	2140      	movs	r1, #64	@ 0x40
 8001150:	480a      	ldr	r0, [pc, #40]	@ (800117c <solenoidControl+0x1a4>)
 8001152:	f001 fc53 	bl	80029fc <HAL_GPIO_WritePin>
		osDelay(solenoidTimeDelay);
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <solenoidControl+0x1a0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f006 fef8 	bl	8007f50 <osDelay>
		HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2140      	movs	r1, #64	@ 0x40
 8001164:	4805      	ldr	r0, [pc, #20]	@ (800117c <solenoidControl+0x1a4>)
 8001166:	f001 fc49 	bl	80029fc <HAL_GPIO_WritePin>
		break;
 800116a:	bf00      	nop
	}

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	58021800 	.word	0x58021800
 8001178:	24000000 	.word	0x24000000
 800117c:	58020c00 	.word	0x58020c00
 8001180:	58021c00 	.word	0x58021c00

08001184 <MPU_Config>:

/* MPU Configuration */

void MPU_Config(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8001196:	f000 fc8d 	bl	8001ab4 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800119a:	2301      	movs	r3, #1
 800119c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800119e:	2300      	movs	r3, #0
 80011a0:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011a6:	231f      	movs	r3, #31
 80011a8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 80011aa:	2387      	movs	r3, #135	@ 0x87
 80011ac:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011b2:	2300      	movs	r3, #0
 80011b4:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011b6:	2301      	movs	r3, #1
 80011b8:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011ba:	2301      	movs	r3, #1
 80011bc:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011c6:	463b      	mov	r3, r7
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fcab 	bl	8001b24 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011ce:	2004      	movs	r0, #4
 80011d0:	f000 fc88 	bl	8001ae4 <HAL_MPU_Enable>

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80011ee:	f000 fb55 	bl	800189c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40001000 	.word	0x40001000

08001200 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <Error_Handler+0x8>

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <HAL_MspInit+0x38>)
 8001214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001218:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <HAL_MspInit+0x38>)
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <HAL_MspInit+0x38>)
 8001224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	210f      	movs	r1, #15
 8001234:	f06f 0001 	mvn.w	r0, #1
 8001238:	f000 fc14 	bl	8001a64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58024400 	.word	0x58024400

08001248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0bc      	sub	sp, #240	@ 0xf0
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	22c0      	movs	r2, #192	@ 0xc0
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f009 fc1d 	bl	800aaa8 <memset>
  if(hspi->Instance==SPI1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a4c      	ldr	r2, [pc, #304]	@ (80013a4 <HAL_SPI_MspInit+0x15c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d145      	bne.n	8001304 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001278:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001284:	2300      	movs	r3, #0
 8001286:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001288:	f107 0318 	add.w	r3, r7, #24
 800128c:	4618      	mov	r0, r3
 800128e:	f002 fc31 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001298:	f7ff ffb2 	bl	8001200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800129c:	4b42      	ldr	r3, [pc, #264]	@ (80013a8 <HAL_SPI_MspInit+0x160>)
 800129e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012a2:	4a41      	ldr	r2, [pc, #260]	@ (80013a8 <HAL_SPI_MspInit+0x160>)
 80012a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012ac:	4b3e      	ldr	r3, [pc, #248]	@ (80013a8 <HAL_SPI_MspInit+0x160>)
 80012ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b3b      	ldr	r3, [pc, #236]	@ (80013a8 <HAL_SPI_MspInit+0x160>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c0:	4a39      	ldr	r2, [pc, #228]	@ (80013a8 <HAL_SPI_MspInit+0x160>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ca:	4b37      	ldr	r3, [pc, #220]	@ (80013a8 <HAL_SPI_MspInit+0x160>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012d8:	23f0      	movs	r3, #240	@ 0xf0
 80012da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012f0:	2305      	movs	r3, #5
 80012f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012fa:	4619      	mov	r1, r3
 80012fc:	482b      	ldr	r0, [pc, #172]	@ (80013ac <HAL_SPI_MspInit+0x164>)
 80012fe:	f001 f9b5 	bl	800266c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001302:	e04a      	b.n	800139a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI5)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a29      	ldr	r2, [pc, #164]	@ (80013b0 <HAL_SPI_MspInit+0x168>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d145      	bne.n	800139a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800130e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800131a:	2300      	movs	r3, #0
 800131c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131e:	f107 0318 	add.w	r3, r7, #24
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fbe6 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800132e:	f7ff ff67 	bl	8001200 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <HAL_SPI_MspInit+0x160>)
 8001334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001338:	4a1b      	ldr	r2, [pc, #108]	@ (80013a8 <HAL_SPI_MspInit+0x160>)
 800133a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800133e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_SPI_MspInit+0x160>)
 8001344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <HAL_SPI_MspInit+0x160>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <HAL_SPI_MspInit+0x160>)
 8001358:	f043 0320 	orr.w	r3, r3, #32
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_SPI_MspInit+0x160>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	f003 0320 	and.w	r3, r3, #32
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800136e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001372:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001388:	2305      	movs	r3, #5
 800138a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800138e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001392:	4619      	mov	r1, r3
 8001394:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <HAL_SPI_MspInit+0x16c>)
 8001396:	f001 f969 	bl	800266c <HAL_GPIO_Init>
}
 800139a:	bf00      	nop
 800139c:	37f0      	adds	r7, #240	@ 0xf0
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40013000 	.word	0x40013000
 80013a8:	58024400 	.word	0x58024400
 80013ac:	58020000 	.word	0x58020000
 80013b0:	40015000 	.word	0x40015000
 80013b4:	58021400 	.word	0x58021400

080013b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0be      	sub	sp, #248	@ 0xf8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	22c0      	movs	r2, #192	@ 0xc0
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f009 fb65 	bl	800aaa8 <memset>
  if(huart->Instance==UART4)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a63      	ldr	r2, [pc, #396]	@ (8001570 <HAL_UART_MspInit+0x1b8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d14f      	bne.n	8001488 <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013e8:	f04f 0202 	mov.w	r2, #2
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fb78 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800140a:	f7ff fef9 	bl	8001200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800140e:	4b59      	ldr	r3, [pc, #356]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 8001410:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001414:	4a57      	ldr	r2, [pc, #348]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 8001416:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800141a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800141e:	4b55      	ldr	r3, [pc, #340]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 8001420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001424:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b51      	ldr	r3, [pc, #324]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001432:	4a50      	ldr	r2, [pc, #320]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800143c:	4b4d      	ldr	r3, [pc, #308]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800144a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800144e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001464:	2306      	movs	r3, #6
 8001466:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800146e:	4619      	mov	r1, r3
 8001470:	4841      	ldr	r0, [pc, #260]	@ (8001578 <HAL_UART_MspInit+0x1c0>)
 8001472:	f001 f8fb 	bl	800266c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	2034      	movs	r0, #52	@ 0x34
 800147c:	f000 faf2 	bl	8001a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001480:	2034      	movs	r0, #52	@ 0x34
 8001482:	f000 fb09 	bl	8001a98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001486:	e06f      	b.n	8001568 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a3b      	ldr	r2, [pc, #236]	@ (800157c <HAL_UART_MspInit+0x1c4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d16a      	bne.n	8001568 <HAL_UART_MspInit+0x1b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001492:	f04f 0201 	mov.w	r2, #1
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a4:	f107 0320 	add.w	r3, r7, #32
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 fb23 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_UART_MspInit+0x100>
      Error_Handler();
 80014b4:	f7ff fea4 	bl	8001200 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 80014ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014be:	4a2d      	ldr	r2, [pc, #180]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 80014ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d6:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014dc:	4a25      	ldr	r2, [pc, #148]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 80014de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <HAL_UART_MspInit+0x1bc>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001512:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800152c:	2307      	movs	r3, #7
 800152e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001532:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001536:	4619      	mov	r1, r3
 8001538:	4811      	ldr	r0, [pc, #68]	@ (8001580 <HAL_UART_MspInit+0x1c8>)
 800153a:	f001 f897 	bl	800266c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800153e:	23c0      	movs	r3, #192	@ 0xc0
 8001540:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001556:	2307      	movs	r3, #7
 8001558:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001560:	4619      	mov	r1, r3
 8001562:	4808      	ldr	r0, [pc, #32]	@ (8001584 <HAL_UART_MspInit+0x1cc>)
 8001564:	f001 f882 	bl	800266c <HAL_GPIO_Init>
}
 8001568:	bf00      	nop
 800156a:	37f8      	adds	r7, #248	@ 0xf8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40004c00 	.word	0x40004c00
 8001574:	58024400 	.word	0x58024400
 8001578:	58020000 	.word	0x58020000
 800157c:	40011400 	.word	0x40011400
 8001580:	58021800 	.word	0x58021800
 8001584:	58020800 	.word	0x58020800

08001588 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b090      	sub	sp, #64	@ 0x40
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b0f      	cmp	r3, #15
 8001594:	d827      	bhi.n	80015e6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001596:	2200      	movs	r2, #0
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	2036      	movs	r0, #54	@ 0x36
 800159c:	f000 fa62 	bl	8001a64 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015a0:	2036      	movs	r0, #54	@ 0x36
 80015a2:	f000 fa79 	bl	8001a98 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80015a6:	4a29      	ldr	r2, [pc, #164]	@ (800164c <HAL_InitTick+0xc4>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015ac:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <HAL_InitTick+0xc8>)
 80015ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015b2:	4a27      	ldr	r2, [pc, #156]	@ (8001650 <HAL_InitTick+0xc8>)
 80015b4:	f043 0310 	orr.w	r3, r3, #16
 80015b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015bc:	4b24      	ldr	r3, [pc, #144]	@ (8001650 <HAL_InitTick+0xc8>)
 80015be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ca:	f107 0210 	add.w	r2, r7, #16
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 fa4b 	bl	8003a70 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d106      	bne.n	80015f2 <HAL_InitTick+0x6a>
 80015e4:	e001      	b.n	80015ea <HAL_InitTick+0x62>
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e02b      	b.n	8001642 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015ea:	f002 fa15 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 80015ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80015f0:	e004      	b.n	80015fc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015f2:	f002 fa11 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 80015f6:	4603      	mov	r3, r0
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015fe:	4a15      	ldr	r2, [pc, #84]	@ (8001654 <HAL_InitTick+0xcc>)
 8001600:	fba2 2303 	umull	r2, r3, r2, r3
 8001604:	0c9b      	lsrs	r3, r3, #18
 8001606:	3b01      	subs	r3, #1
 8001608:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800160a:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <HAL_InitTick+0xd0>)
 800160c:	4a13      	ldr	r2, [pc, #76]	@ (800165c <HAL_InitTick+0xd4>)
 800160e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_InitTick+0xd0>)
 8001612:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001616:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001618:	4a0f      	ldr	r2, [pc, #60]	@ (8001658 <HAL_InitTick+0xd0>)
 800161a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800161c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_InitTick+0xd0>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <HAL_InitTick+0xd0>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800162a:	480b      	ldr	r0, [pc, #44]	@ (8001658 <HAL_InitTick+0xd0>)
 800162c:	f004 f9cd 	bl	80059ca <HAL_TIM_Base_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d104      	bne.n	8001640 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001636:	4808      	ldr	r0, [pc, #32]	@ (8001658 <HAL_InitTick+0xd0>)
 8001638:	f004 fa28 	bl	8005a8c <HAL_TIM_Base_Start_IT>
 800163c:	4603      	mov	r3, r0
 800163e:	e000      	b.n	8001642 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
}
 8001642:	4618      	mov	r0, r3
 8001644:	3740      	adds	r7, #64	@ 0x40
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2400001c 	.word	0x2400001c
 8001650:	58024400 	.word	0x58024400
 8001654:	431bde83 	.word	0x431bde83
 8001658:	2400029c 	.word	0x2400029c
 800165c:	40001000 	.word	0x40001000

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <NMI_Handler+0x4>

08001668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <MemManage_Handler+0x4>

08001678 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <UsageFault_Handler+0x4>

08001688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <UART4_IRQHandler+0x10>)
 800169e:	f004 fe07 	bl	80062b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24000154 	.word	0x24000154

080016ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <TIM6_DAC_IRQHandler+0x10>)
 80016b2:	f004 fa63 	bl	8005b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2400029c 	.word	0x2400029c

080016c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016c4:	4b37      	ldr	r3, [pc, #220]	@ (80017a4 <SystemInit+0xe4>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	4a36      	ldr	r2, [pc, #216]	@ (80017a4 <SystemInit+0xe4>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016d4:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <SystemInit+0xe8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	2b06      	cmp	r3, #6
 80016de:	d807      	bhi.n	80016f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016e0:	4b31      	ldr	r3, [pc, #196]	@ (80017a8 <SystemInit+0xe8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 030f 	bic.w	r3, r3, #15
 80016e8:	4a2f      	ldr	r2, [pc, #188]	@ (80017a8 <SystemInit+0xe8>)
 80016ea:	f043 0307 	orr.w	r3, r3, #7
 80016ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016f0:	4b2e      	ldr	r3, [pc, #184]	@ (80017ac <SystemInit+0xec>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2d      	ldr	r2, [pc, #180]	@ (80017ac <SystemInit+0xec>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016fc:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <SystemInit+0xec>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001702:	4b2a      	ldr	r3, [pc, #168]	@ (80017ac <SystemInit+0xec>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4929      	ldr	r1, [pc, #164]	@ (80017ac <SystemInit+0xec>)
 8001708:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <SystemInit+0xf0>)
 800170a:	4013      	ands	r3, r2
 800170c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800170e:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <SystemInit+0xe8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d007      	beq.n	800172a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800171a:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <SystemInit+0xe8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 030f 	bic.w	r3, r3, #15
 8001722:	4a21      	ldr	r2, [pc, #132]	@ (80017a8 <SystemInit+0xe8>)
 8001724:	f043 0307 	orr.w	r3, r3, #7
 8001728:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <SystemInit+0xec>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001730:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <SystemInit+0xec>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <SystemInit+0xec>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <SystemInit+0xec>)
 800173e:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <SystemInit+0xf4>)
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <SystemInit+0xec>)
 8001744:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <SystemInit+0xf8>)
 8001746:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001748:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <SystemInit+0xec>)
 800174a:	4a1c      	ldr	r2, [pc, #112]	@ (80017bc <SystemInit+0xfc>)
 800174c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <SystemInit+0xec>)
 8001750:	2200      	movs	r2, #0
 8001752:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001754:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <SystemInit+0xec>)
 8001756:	4a19      	ldr	r2, [pc, #100]	@ (80017bc <SystemInit+0xfc>)
 8001758:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <SystemInit+0xec>)
 800175c:	2200      	movs	r2, #0
 800175e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <SystemInit+0xec>)
 8001762:	4a16      	ldr	r2, [pc, #88]	@ (80017bc <SystemInit+0xfc>)
 8001764:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <SystemInit+0xec>)
 8001768:	2200      	movs	r2, #0
 800176a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <SystemInit+0xec>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0e      	ldr	r2, [pc, #56]	@ (80017ac <SystemInit+0xec>)
 8001772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001776:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <SystemInit+0xec>)
 800177a:	2200      	movs	r2, #0
 800177c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <SystemInit+0x100>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <SystemInit+0x104>)
 8001784:	4013      	ands	r3, r2
 8001786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800178a:	d202      	bcs.n	8001792 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800178c:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <SystemInit+0x108>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <SystemInit+0x10c>)
 8001794:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001798:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00
 80017a8:	52002000 	.word	0x52002000
 80017ac:	58024400 	.word	0x58024400
 80017b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80017b4:	02020200 	.word	0x02020200
 80017b8:	01ff0000 	.word	0x01ff0000
 80017bc:	01010280 	.word	0x01010280
 80017c0:	5c001000 	.word	0x5c001000
 80017c4:	ffff0000 	.word	0xffff0000
 80017c8:	51008108 	.word	0x51008108
 80017cc:	52004000 	.word	0x52004000

080017d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001808 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017d4:	f7ff ff74 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d8:	480c      	ldr	r0, [pc, #48]	@ (800180c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017da:	490d      	ldr	r1, [pc, #52]	@ (8001810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f0:	4c0a      	ldr	r4, [pc, #40]	@ (800181c <LoopFillZerobss+0x22>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fe:	f009 f95b 	bl	800aab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001802:	f7fe fee5 	bl	80005d0 <main>
  bx  lr
 8001806:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001808:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800180c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001810:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001814:	0800abf4 	.word	0x0800abf4
  ldr r2, =_sbss
 8001818:	24000028 	.word	0x24000028
  ldr r4, =_ebss
 800181c:	24004c3c 	.word	0x24004c3c

08001820 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC3_IRQHandler>
	...

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182a:	2003      	movs	r0, #3
 800182c:	f000 f90f 	bl	8001a4e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001830:	f001 ff48 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8001834:	4602      	mov	r2, r0
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <HAL_Init+0x68>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	4913      	ldr	r1, [pc, #76]	@ (8001890 <HAL_Init+0x6c>)
 8001842:	5ccb      	ldrb	r3, [r1, r3]
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
 800184c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <HAL_Init+0x68>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	4a0e      	ldr	r2, [pc, #56]	@ (8001890 <HAL_Init+0x6c>)
 8001858:	5cd3      	ldrb	r3, [r2, r3]
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
 8001864:	4a0b      	ldr	r2, [pc, #44]	@ (8001894 <HAL_Init+0x70>)
 8001866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001868:	4a0b      	ldr	r2, [pc, #44]	@ (8001898 <HAL_Init+0x74>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800186e:	200f      	movs	r0, #15
 8001870:	f7ff fe8a 	bl	8001588 <HAL_InitTick>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e002      	b.n	8001884 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800187e:	f7ff fcc5 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	58024400 	.word	0x58024400
 8001890:	0800abac 	.word	0x0800abac
 8001894:	24000018 	.word	0x24000018
 8001898:	24000014 	.word	0x24000014

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	24000020 	.word	0x24000020
 80018c0:	240002e8 	.word	0x240002e8

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	240002e8 	.word	0x240002e8

080018dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_GetREVID+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0c1b      	lsrs	r3, r3, #16
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	5c001000 	.word	0x5c001000

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <__NVIC_SetPriorityGrouping+0x40>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	4313      	orrs	r3, r2
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <__NVIC_SetPriorityGrouping+0x40>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00
 8001938:	05fa0000 	.word	0x05fa0000

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	@ (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	@ (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	@ (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	@ 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	@ 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff4c 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a72:	f7ff ff63 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001a76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	6978      	ldr	r0, [r7, #20]
 8001a7e:	f7ff ffb3 	bl	80019e8 <NVIC_EncodePriority>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff82 	bl	8001994 <__NVIC_SetPriority>
}
 8001a90:	bf00      	nop
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff56 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ab8:	f3bf 8f5f 	dmb	sy
}
 8001abc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001abe:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <HAL_MPU_Disable+0x28>)
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac2:	4a06      	ldr	r2, [pc, #24]	@ (8001adc <HAL_MPU_Disable+0x28>)
 8001ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ac8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001aca:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_MPU_Disable+0x2c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	605a      	str	r2, [r3, #4]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000ed00 	.word	0xe000ed00
 8001ae0:	e000ed90 	.word	0xe000ed90

08001ae4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001aec:	4a0b      	ldr	r2, [pc, #44]	@ (8001b1c <HAL_MPU_Enable+0x38>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_MPU_Enable+0x3c>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	4a09      	ldr	r2, [pc, #36]	@ (8001b20 <HAL_MPU_Enable+0x3c>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b00:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b02:	f3bf 8f4f 	dsb	sy
}
 8001b06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b08:	f3bf 8f6f 	isb	sy
}
 8001b0c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed90 	.word	0xe000ed90
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	785a      	ldrb	r2, [r3, #1]
 8001b30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <HAL_MPU_ConfigRegion+0x7c>)
 8001b32:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba0 <HAL_MPU_ConfigRegion+0x7c>)
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	4a19      	ldr	r2, [pc, #100]	@ (8001ba0 <HAL_MPU_ConfigRegion+0x7c>)
 8001b3a:	f023 0301 	bic.w	r3, r3, #1
 8001b3e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b40:	4a17      	ldr	r2, [pc, #92]	@ (8001ba0 <HAL_MPU_ConfigRegion+0x7c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7b1b      	ldrb	r3, [r3, #12]
 8001b4c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7adb      	ldrb	r3, [r3, #11]
 8001b52:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7a9b      	ldrb	r3, [r3, #10]
 8001b5a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7b5b      	ldrb	r3, [r3, #13]
 8001b62:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7b9b      	ldrb	r3, [r3, #14]
 8001b6a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7bdb      	ldrb	r3, [r3, #15]
 8001b72:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7a5b      	ldrb	r3, [r3, #9]
 8001b7a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7a1b      	ldrb	r3, [r3, #8]
 8001b82:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b84:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b8e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b90:	6113      	str	r3, [r2, #16]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed90 	.word	0xe000ed90

08001ba4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff fe8a 	bl	80018c4 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e2dc      	b.n	8002176 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d008      	beq.n	8001bda <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2280      	movs	r2, #128	@ 0x80
 8001bcc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e2cd      	b.n	8002176 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a76      	ldr	r2, [pc, #472]	@ (8001db8 <HAL_DMA_Abort+0x214>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d04a      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a74      	ldr	r2, [pc, #464]	@ (8001dbc <HAL_DMA_Abort+0x218>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d045      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a73      	ldr	r2, [pc, #460]	@ (8001dc0 <HAL_DMA_Abort+0x21c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d040      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a71      	ldr	r2, [pc, #452]	@ (8001dc4 <HAL_DMA_Abort+0x220>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d03b      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a70      	ldr	r2, [pc, #448]	@ (8001dc8 <HAL_DMA_Abort+0x224>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d036      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a6e      	ldr	r2, [pc, #440]	@ (8001dcc <HAL_DMA_Abort+0x228>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d031      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6d      	ldr	r2, [pc, #436]	@ (8001dd0 <HAL_DMA_Abort+0x22c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d02c      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a6b      	ldr	r2, [pc, #428]	@ (8001dd4 <HAL_DMA_Abort+0x230>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d027      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6a      	ldr	r2, [pc, #424]	@ (8001dd8 <HAL_DMA_Abort+0x234>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d022      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a68      	ldr	r2, [pc, #416]	@ (8001ddc <HAL_DMA_Abort+0x238>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01d      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a67      	ldr	r2, [pc, #412]	@ (8001de0 <HAL_DMA_Abort+0x23c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d018      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a65      	ldr	r2, [pc, #404]	@ (8001de4 <HAL_DMA_Abort+0x240>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a64      	ldr	r2, [pc, #400]	@ (8001de8 <HAL_DMA_Abort+0x244>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d00e      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a62      	ldr	r2, [pc, #392]	@ (8001dec <HAL_DMA_Abort+0x248>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d009      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a61      	ldr	r2, [pc, #388]	@ (8001df0 <HAL_DMA_Abort+0x24c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d004      	beq.n	8001c7a <HAL_DMA_Abort+0xd6>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a5f      	ldr	r2, [pc, #380]	@ (8001df4 <HAL_DMA_Abort+0x250>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_DMA_Abort+0xda>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_DMA_Abort+0xdc>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 021e 	bic.w	r2, r2, #30
 8001c92:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ca2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	e00a      	b.n	8001cc2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 020e 	bic.w	r2, r2, #14
 8001cba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a3c      	ldr	r2, [pc, #240]	@ (8001db8 <HAL_DMA_Abort+0x214>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d072      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8001dbc <HAL_DMA_Abort+0x218>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d06d      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a39      	ldr	r2, [pc, #228]	@ (8001dc0 <HAL_DMA_Abort+0x21c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d068      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a37      	ldr	r2, [pc, #220]	@ (8001dc4 <HAL_DMA_Abort+0x220>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d063      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a36      	ldr	r2, [pc, #216]	@ (8001dc8 <HAL_DMA_Abort+0x224>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d05e      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a34      	ldr	r2, [pc, #208]	@ (8001dcc <HAL_DMA_Abort+0x228>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d059      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a33      	ldr	r2, [pc, #204]	@ (8001dd0 <HAL_DMA_Abort+0x22c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d054      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a31      	ldr	r2, [pc, #196]	@ (8001dd4 <HAL_DMA_Abort+0x230>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d04f      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a30      	ldr	r2, [pc, #192]	@ (8001dd8 <HAL_DMA_Abort+0x234>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d04a      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a2e      	ldr	r2, [pc, #184]	@ (8001ddc <HAL_DMA_Abort+0x238>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d045      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001de0 <HAL_DMA_Abort+0x23c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d040      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2b      	ldr	r2, [pc, #172]	@ (8001de4 <HAL_DMA_Abort+0x240>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d03b      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001de8 <HAL_DMA_Abort+0x244>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d036      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a28      	ldr	r2, [pc, #160]	@ (8001dec <HAL_DMA_Abort+0x248>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d031      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a27      	ldr	r2, [pc, #156]	@ (8001df0 <HAL_DMA_Abort+0x24c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d02c      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a25      	ldr	r2, [pc, #148]	@ (8001df4 <HAL_DMA_Abort+0x250>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d027      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a24      	ldr	r2, [pc, #144]	@ (8001df8 <HAL_DMA_Abort+0x254>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d022      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a22      	ldr	r2, [pc, #136]	@ (8001dfc <HAL_DMA_Abort+0x258>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01d      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <HAL_DMA_Abort+0x25c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d018      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1f      	ldr	r2, [pc, #124]	@ (8001e04 <HAL_DMA_Abort+0x260>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e08 <HAL_DMA_Abort+0x264>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00e      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1c      	ldr	r2, [pc, #112]	@ (8001e0c <HAL_DMA_Abort+0x268>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d009      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e10 <HAL_DMA_Abort+0x26c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d004      	beq.n	8001db2 <HAL_DMA_Abort+0x20e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a19      	ldr	r2, [pc, #100]	@ (8001e14 <HAL_DMA_Abort+0x270>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d132      	bne.n	8001e18 <HAL_DMA_Abort+0x274>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e031      	b.n	8001e1a <HAL_DMA_Abort+0x276>
 8001db6:	bf00      	nop
 8001db8:	40020010 	.word	0x40020010
 8001dbc:	40020028 	.word	0x40020028
 8001dc0:	40020040 	.word	0x40020040
 8001dc4:	40020058 	.word	0x40020058
 8001dc8:	40020070 	.word	0x40020070
 8001dcc:	40020088 	.word	0x40020088
 8001dd0:	400200a0 	.word	0x400200a0
 8001dd4:	400200b8 	.word	0x400200b8
 8001dd8:	40020410 	.word	0x40020410
 8001ddc:	40020428 	.word	0x40020428
 8001de0:	40020440 	.word	0x40020440
 8001de4:	40020458 	.word	0x40020458
 8001de8:	40020470 	.word	0x40020470
 8001dec:	40020488 	.word	0x40020488
 8001df0:	400204a0 	.word	0x400204a0
 8001df4:	400204b8 	.word	0x400204b8
 8001df8:	58025408 	.word	0x58025408
 8001dfc:	5802541c 	.word	0x5802541c
 8001e00:	58025430 	.word	0x58025430
 8001e04:	58025444 	.word	0x58025444
 8001e08:	58025458 	.word	0x58025458
 8001e0c:	5802546c 	.word	0x5802546c
 8001e10:	58025480 	.word	0x58025480
 8001e14:	58025494 	.word	0x58025494
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a6d      	ldr	r2, [pc, #436]	@ (8001fe8 <HAL_DMA_Abort+0x444>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d04a      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a6b      	ldr	r2, [pc, #428]	@ (8001fec <HAL_DMA_Abort+0x448>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d045      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6a      	ldr	r2, [pc, #424]	@ (8001ff0 <HAL_DMA_Abort+0x44c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d040      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a68      	ldr	r2, [pc, #416]	@ (8001ff4 <HAL_DMA_Abort+0x450>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d03b      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a67      	ldr	r2, [pc, #412]	@ (8001ff8 <HAL_DMA_Abort+0x454>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d036      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a65      	ldr	r2, [pc, #404]	@ (8001ffc <HAL_DMA_Abort+0x458>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d031      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a64      	ldr	r2, [pc, #400]	@ (8002000 <HAL_DMA_Abort+0x45c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d02c      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a62      	ldr	r2, [pc, #392]	@ (8002004 <HAL_DMA_Abort+0x460>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d027      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a61      	ldr	r2, [pc, #388]	@ (8002008 <HAL_DMA_Abort+0x464>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d022      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a5f      	ldr	r2, [pc, #380]	@ (800200c <HAL_DMA_Abort+0x468>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01d      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a5e      	ldr	r2, [pc, #376]	@ (8002010 <HAL_DMA_Abort+0x46c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d018      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a5c      	ldr	r2, [pc, #368]	@ (8002014 <HAL_DMA_Abort+0x470>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5b      	ldr	r2, [pc, #364]	@ (8002018 <HAL_DMA_Abort+0x474>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00e      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a59      	ldr	r2, [pc, #356]	@ (800201c <HAL_DMA_Abort+0x478>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d009      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a58      	ldr	r2, [pc, #352]	@ (8002020 <HAL_DMA_Abort+0x47c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d004      	beq.n	8001ece <HAL_DMA_Abort+0x32a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a56      	ldr	r2, [pc, #344]	@ (8002024 <HAL_DMA_Abort+0x480>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d108      	bne.n	8001ee0 <HAL_DMA_Abort+0x33c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	e007      	b.n	8001ef0 <HAL_DMA_Abort+0x34c>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ef0:	e013      	b.n	8001f1a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ef2:	f7ff fce7 	bl	80018c4 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d90c      	bls.n	8001f1a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e12d      	b.n	8002176 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1e5      	bne.n	8001ef2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe8 <HAL_DMA_Abort+0x444>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d04a      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a2d      	ldr	r2, [pc, #180]	@ (8001fec <HAL_DMA_Abort+0x448>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d045      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff0 <HAL_DMA_Abort+0x44c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d040      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff4 <HAL_DMA_Abort+0x450>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d03b      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a29      	ldr	r2, [pc, #164]	@ (8001ff8 <HAL_DMA_Abort+0x454>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d036      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a27      	ldr	r2, [pc, #156]	@ (8001ffc <HAL_DMA_Abort+0x458>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d031      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a26      	ldr	r2, [pc, #152]	@ (8002000 <HAL_DMA_Abort+0x45c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d02c      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a24      	ldr	r2, [pc, #144]	@ (8002004 <HAL_DMA_Abort+0x460>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d027      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a23      	ldr	r2, [pc, #140]	@ (8002008 <HAL_DMA_Abort+0x464>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d022      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a21      	ldr	r2, [pc, #132]	@ (800200c <HAL_DMA_Abort+0x468>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01d      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a20      	ldr	r2, [pc, #128]	@ (8002010 <HAL_DMA_Abort+0x46c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d018      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1e      	ldr	r2, [pc, #120]	@ (8002014 <HAL_DMA_Abort+0x470>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8002018 <HAL_DMA_Abort+0x474>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00e      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1b      	ldr	r2, [pc, #108]	@ (800201c <HAL_DMA_Abort+0x478>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d009      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002020 <HAL_DMA_Abort+0x47c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d004      	beq.n	8001fc6 <HAL_DMA_Abort+0x422>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a18      	ldr	r2, [pc, #96]	@ (8002024 <HAL_DMA_Abort+0x480>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_DMA_Abort+0x426>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_DMA_Abort+0x428>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d02b      	beq.n	8002028 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	223f      	movs	r2, #63	@ 0x3f
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	e02a      	b.n	800203e <HAL_DMA_Abort+0x49a>
 8001fe8:	40020010 	.word	0x40020010
 8001fec:	40020028 	.word	0x40020028
 8001ff0:	40020040 	.word	0x40020040
 8001ff4:	40020058 	.word	0x40020058
 8001ff8:	40020070 	.word	0x40020070
 8001ffc:	40020088 	.word	0x40020088
 8002000:	400200a0 	.word	0x400200a0
 8002004:	400200b8 	.word	0x400200b8
 8002008:	40020410 	.word	0x40020410
 800200c:	40020428 	.word	0x40020428
 8002010:	40020440 	.word	0x40020440
 8002014:	40020458 	.word	0x40020458
 8002018:	40020470 	.word	0x40020470
 800201c:	40020488 	.word	0x40020488
 8002020:	400204a0 	.word	0x400204a0
 8002024:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	2201      	movs	r2, #1
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a4f      	ldr	r2, [pc, #316]	@ (8002180 <HAL_DMA_Abort+0x5dc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d072      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a4d      	ldr	r2, [pc, #308]	@ (8002184 <HAL_DMA_Abort+0x5e0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d06d      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a4c      	ldr	r2, [pc, #304]	@ (8002188 <HAL_DMA_Abort+0x5e4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d068      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a4a      	ldr	r2, [pc, #296]	@ (800218c <HAL_DMA_Abort+0x5e8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d063      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a49      	ldr	r2, [pc, #292]	@ (8002190 <HAL_DMA_Abort+0x5ec>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d05e      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a47      	ldr	r2, [pc, #284]	@ (8002194 <HAL_DMA_Abort+0x5f0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d059      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a46      	ldr	r2, [pc, #280]	@ (8002198 <HAL_DMA_Abort+0x5f4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d054      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a44      	ldr	r2, [pc, #272]	@ (800219c <HAL_DMA_Abort+0x5f8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d04f      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a43      	ldr	r2, [pc, #268]	@ (80021a0 <HAL_DMA_Abort+0x5fc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d04a      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a41      	ldr	r2, [pc, #260]	@ (80021a4 <HAL_DMA_Abort+0x600>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d045      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a40      	ldr	r2, [pc, #256]	@ (80021a8 <HAL_DMA_Abort+0x604>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d040      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3e      	ldr	r2, [pc, #248]	@ (80021ac <HAL_DMA_Abort+0x608>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d03b      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a3d      	ldr	r2, [pc, #244]	@ (80021b0 <HAL_DMA_Abort+0x60c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d036      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a3b      	ldr	r2, [pc, #236]	@ (80021b4 <HAL_DMA_Abort+0x610>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d031      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a3a      	ldr	r2, [pc, #232]	@ (80021b8 <HAL_DMA_Abort+0x614>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d02c      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a38      	ldr	r2, [pc, #224]	@ (80021bc <HAL_DMA_Abort+0x618>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d027      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a37      	ldr	r2, [pc, #220]	@ (80021c0 <HAL_DMA_Abort+0x61c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d022      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a35      	ldr	r2, [pc, #212]	@ (80021c4 <HAL_DMA_Abort+0x620>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01d      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a34      	ldr	r2, [pc, #208]	@ (80021c8 <HAL_DMA_Abort+0x624>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d018      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a32      	ldr	r2, [pc, #200]	@ (80021cc <HAL_DMA_Abort+0x628>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a31      	ldr	r2, [pc, #196]	@ (80021d0 <HAL_DMA_Abort+0x62c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00e      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a2f      	ldr	r2, [pc, #188]	@ (80021d4 <HAL_DMA_Abort+0x630>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d009      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a2e      	ldr	r2, [pc, #184]	@ (80021d8 <HAL_DMA_Abort+0x634>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d004      	beq.n	800212e <HAL_DMA_Abort+0x58a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a2c      	ldr	r2, [pc, #176]	@ (80021dc <HAL_DMA_Abort+0x638>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_DMA_Abort+0x58e>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_DMA_Abort+0x590>
 8002132:	2300      	movs	r3, #0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002140:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002154:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002158:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002162:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40020010 	.word	0x40020010
 8002184:	40020028 	.word	0x40020028
 8002188:	40020040 	.word	0x40020040
 800218c:	40020058 	.word	0x40020058
 8002190:	40020070 	.word	0x40020070
 8002194:	40020088 	.word	0x40020088
 8002198:	400200a0 	.word	0x400200a0
 800219c:	400200b8 	.word	0x400200b8
 80021a0:	40020410 	.word	0x40020410
 80021a4:	40020428 	.word	0x40020428
 80021a8:	40020440 	.word	0x40020440
 80021ac:	40020458 	.word	0x40020458
 80021b0:	40020470 	.word	0x40020470
 80021b4:	40020488 	.word	0x40020488
 80021b8:	400204a0 	.word	0x400204a0
 80021bc:	400204b8 	.word	0x400204b8
 80021c0:	58025408 	.word	0x58025408
 80021c4:	5802541c 	.word	0x5802541c
 80021c8:	58025430 	.word	0x58025430
 80021cc:	58025444 	.word	0x58025444
 80021d0:	58025458 	.word	0x58025458
 80021d4:	5802546c 	.word	0x5802546c
 80021d8:	58025480 	.word	0x58025480
 80021dc:	58025494 	.word	0x58025494

080021e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e237      	b.n	8002662 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d004      	beq.n	8002208 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2280      	movs	r2, #128	@ 0x80
 8002202:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e22c      	b.n	8002662 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a5c      	ldr	r2, [pc, #368]	@ (8002380 <HAL_DMA_Abort_IT+0x1a0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d04a      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a5b      	ldr	r2, [pc, #364]	@ (8002384 <HAL_DMA_Abort_IT+0x1a4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d045      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a59      	ldr	r2, [pc, #356]	@ (8002388 <HAL_DMA_Abort_IT+0x1a8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d040      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a58      	ldr	r2, [pc, #352]	@ (800238c <HAL_DMA_Abort_IT+0x1ac>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d03b      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a56      	ldr	r2, [pc, #344]	@ (8002390 <HAL_DMA_Abort_IT+0x1b0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d036      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a55      	ldr	r2, [pc, #340]	@ (8002394 <HAL_DMA_Abort_IT+0x1b4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d031      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a53      	ldr	r2, [pc, #332]	@ (8002398 <HAL_DMA_Abort_IT+0x1b8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d02c      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a52      	ldr	r2, [pc, #328]	@ (800239c <HAL_DMA_Abort_IT+0x1bc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d027      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a50      	ldr	r2, [pc, #320]	@ (80023a0 <HAL_DMA_Abort_IT+0x1c0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d022      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a4f      	ldr	r2, [pc, #316]	@ (80023a4 <HAL_DMA_Abort_IT+0x1c4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d01d      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a4d      	ldr	r2, [pc, #308]	@ (80023a8 <HAL_DMA_Abort_IT+0x1c8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d018      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a4c      	ldr	r2, [pc, #304]	@ (80023ac <HAL_DMA_Abort_IT+0x1cc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a4a      	ldr	r2, [pc, #296]	@ (80023b0 <HAL_DMA_Abort_IT+0x1d0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00e      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a49      	ldr	r2, [pc, #292]	@ (80023b4 <HAL_DMA_Abort_IT+0x1d4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d009      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a47      	ldr	r2, [pc, #284]	@ (80023b8 <HAL_DMA_Abort_IT+0x1d8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xc8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a46      	ldr	r2, [pc, #280]	@ (80023bc <HAL_DMA_Abort_IT+0x1dc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d101      	bne.n	80022ac <HAL_DMA_Abort_IT+0xcc>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_DMA_Abort_IT+0xce>
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8086 	beq.w	80023c0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2204      	movs	r2, #4
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002380 <HAL_DMA_Abort_IT+0x1a0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d04a      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002384 <HAL_DMA_Abort_IT+0x1a4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d045      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002388 <HAL_DMA_Abort_IT+0x1a8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d040      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a2b      	ldr	r2, [pc, #172]	@ (800238c <HAL_DMA_Abort_IT+0x1ac>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d03b      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a29      	ldr	r2, [pc, #164]	@ (8002390 <HAL_DMA_Abort_IT+0x1b0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d036      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a28      	ldr	r2, [pc, #160]	@ (8002394 <HAL_DMA_Abort_IT+0x1b4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d031      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a26      	ldr	r2, [pc, #152]	@ (8002398 <HAL_DMA_Abort_IT+0x1b8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d02c      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a25      	ldr	r2, [pc, #148]	@ (800239c <HAL_DMA_Abort_IT+0x1bc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d027      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a23      	ldr	r2, [pc, #140]	@ (80023a0 <HAL_DMA_Abort_IT+0x1c0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d022      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a22      	ldr	r2, [pc, #136]	@ (80023a4 <HAL_DMA_Abort_IT+0x1c4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d01d      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a20      	ldr	r2, [pc, #128]	@ (80023a8 <HAL_DMA_Abort_IT+0x1c8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d018      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1f      	ldr	r2, [pc, #124]	@ (80023ac <HAL_DMA_Abort_IT+0x1cc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1d      	ldr	r2, [pc, #116]	@ (80023b0 <HAL_DMA_Abort_IT+0x1d0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00e      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <HAL_DMA_Abort_IT+0x1d4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d009      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1a      	ldr	r2, [pc, #104]	@ (80023b8 <HAL_DMA_Abort_IT+0x1d8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d004      	beq.n	800235c <HAL_DMA_Abort_IT+0x17c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a19      	ldr	r2, [pc, #100]	@ (80023bc <HAL_DMA_Abort_IT+0x1dc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d108      	bne.n	800236e <HAL_DMA_Abort_IT+0x18e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e178      	b.n	8002660 <HAL_DMA_Abort_IT+0x480>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e16f      	b.n	8002660 <HAL_DMA_Abort_IT+0x480>
 8002380:	40020010 	.word	0x40020010
 8002384:	40020028 	.word	0x40020028
 8002388:	40020040 	.word	0x40020040
 800238c:	40020058 	.word	0x40020058
 8002390:	40020070 	.word	0x40020070
 8002394:	40020088 	.word	0x40020088
 8002398:	400200a0 	.word	0x400200a0
 800239c:	400200b8 	.word	0x400200b8
 80023a0:	40020410 	.word	0x40020410
 80023a4:	40020428 	.word	0x40020428
 80023a8:	40020440 	.word	0x40020440
 80023ac:	40020458 	.word	0x40020458
 80023b0:	40020470 	.word	0x40020470
 80023b4:	40020488 	.word	0x40020488
 80023b8:	400204a0 	.word	0x400204a0
 80023bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 020e 	bic.w	r2, r2, #14
 80023ce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a6c      	ldr	r2, [pc, #432]	@ (8002588 <HAL_DMA_Abort_IT+0x3a8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d04a      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a6b      	ldr	r2, [pc, #428]	@ (800258c <HAL_DMA_Abort_IT+0x3ac>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d045      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a69      	ldr	r2, [pc, #420]	@ (8002590 <HAL_DMA_Abort_IT+0x3b0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d040      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a68      	ldr	r2, [pc, #416]	@ (8002594 <HAL_DMA_Abort_IT+0x3b4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d03b      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a66      	ldr	r2, [pc, #408]	@ (8002598 <HAL_DMA_Abort_IT+0x3b8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d036      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a65      	ldr	r2, [pc, #404]	@ (800259c <HAL_DMA_Abort_IT+0x3bc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d031      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a63      	ldr	r2, [pc, #396]	@ (80025a0 <HAL_DMA_Abort_IT+0x3c0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d02c      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a62      	ldr	r2, [pc, #392]	@ (80025a4 <HAL_DMA_Abort_IT+0x3c4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d027      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a60      	ldr	r2, [pc, #384]	@ (80025a8 <HAL_DMA_Abort_IT+0x3c8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d022      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a5f      	ldr	r2, [pc, #380]	@ (80025ac <HAL_DMA_Abort_IT+0x3cc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d01d      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5d      	ldr	r2, [pc, #372]	@ (80025b0 <HAL_DMA_Abort_IT+0x3d0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d018      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a5c      	ldr	r2, [pc, #368]	@ (80025b4 <HAL_DMA_Abort_IT+0x3d4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a5a      	ldr	r2, [pc, #360]	@ (80025b8 <HAL_DMA_Abort_IT+0x3d8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00e      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a59      	ldr	r2, [pc, #356]	@ (80025bc <HAL_DMA_Abort_IT+0x3dc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d009      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a57      	ldr	r2, [pc, #348]	@ (80025c0 <HAL_DMA_Abort_IT+0x3e0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_DMA_Abort_IT+0x290>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a56      	ldr	r2, [pc, #344]	@ (80025c4 <HAL_DMA_Abort_IT+0x3e4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d108      	bne.n	8002482 <HAL_DMA_Abort_IT+0x2a2>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e007      	b.n	8002492 <HAL_DMA_Abort_IT+0x2b2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a3c      	ldr	r2, [pc, #240]	@ (8002588 <HAL_DMA_Abort_IT+0x3a8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d072      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a3a      	ldr	r2, [pc, #232]	@ (800258c <HAL_DMA_Abort_IT+0x3ac>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d06d      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a39      	ldr	r2, [pc, #228]	@ (8002590 <HAL_DMA_Abort_IT+0x3b0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d068      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a37      	ldr	r2, [pc, #220]	@ (8002594 <HAL_DMA_Abort_IT+0x3b4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d063      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a36      	ldr	r2, [pc, #216]	@ (8002598 <HAL_DMA_Abort_IT+0x3b8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d05e      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a34      	ldr	r2, [pc, #208]	@ (800259c <HAL_DMA_Abort_IT+0x3bc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d059      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a33      	ldr	r2, [pc, #204]	@ (80025a0 <HAL_DMA_Abort_IT+0x3c0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d054      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a31      	ldr	r2, [pc, #196]	@ (80025a4 <HAL_DMA_Abort_IT+0x3c4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d04f      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a30      	ldr	r2, [pc, #192]	@ (80025a8 <HAL_DMA_Abort_IT+0x3c8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d04a      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a2e      	ldr	r2, [pc, #184]	@ (80025ac <HAL_DMA_Abort_IT+0x3cc>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d045      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a2d      	ldr	r2, [pc, #180]	@ (80025b0 <HAL_DMA_Abort_IT+0x3d0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d040      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a2b      	ldr	r2, [pc, #172]	@ (80025b4 <HAL_DMA_Abort_IT+0x3d4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d03b      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a2a      	ldr	r2, [pc, #168]	@ (80025b8 <HAL_DMA_Abort_IT+0x3d8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d036      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a28      	ldr	r2, [pc, #160]	@ (80025bc <HAL_DMA_Abort_IT+0x3dc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d031      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a27      	ldr	r2, [pc, #156]	@ (80025c0 <HAL_DMA_Abort_IT+0x3e0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d02c      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a25      	ldr	r2, [pc, #148]	@ (80025c4 <HAL_DMA_Abort_IT+0x3e4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d027      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a24      	ldr	r2, [pc, #144]	@ (80025c8 <HAL_DMA_Abort_IT+0x3e8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a22      	ldr	r2, [pc, #136]	@ (80025cc <HAL_DMA_Abort_IT+0x3ec>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01d      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a21      	ldr	r2, [pc, #132]	@ (80025d0 <HAL_DMA_Abort_IT+0x3f0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d018      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1f      	ldr	r2, [pc, #124]	@ (80025d4 <HAL_DMA_Abort_IT+0x3f4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1e      	ldr	r2, [pc, #120]	@ (80025d8 <HAL_DMA_Abort_IT+0x3f8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00e      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1c      	ldr	r2, [pc, #112]	@ (80025dc <HAL_DMA_Abort_IT+0x3fc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d009      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a1b      	ldr	r2, [pc, #108]	@ (80025e0 <HAL_DMA_Abort_IT+0x400>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d004      	beq.n	8002582 <HAL_DMA_Abort_IT+0x3a2>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a19      	ldr	r2, [pc, #100]	@ (80025e4 <HAL_DMA_Abort_IT+0x404>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d132      	bne.n	80025e8 <HAL_DMA_Abort_IT+0x408>
 8002582:	2301      	movs	r3, #1
 8002584:	e031      	b.n	80025ea <HAL_DMA_Abort_IT+0x40a>
 8002586:	bf00      	nop
 8002588:	40020010 	.word	0x40020010
 800258c:	40020028 	.word	0x40020028
 8002590:	40020040 	.word	0x40020040
 8002594:	40020058 	.word	0x40020058
 8002598:	40020070 	.word	0x40020070
 800259c:	40020088 	.word	0x40020088
 80025a0:	400200a0 	.word	0x400200a0
 80025a4:	400200b8 	.word	0x400200b8
 80025a8:	40020410 	.word	0x40020410
 80025ac:	40020428 	.word	0x40020428
 80025b0:	40020440 	.word	0x40020440
 80025b4:	40020458 	.word	0x40020458
 80025b8:	40020470 	.word	0x40020470
 80025bc:	40020488 	.word	0x40020488
 80025c0:	400204a0 	.word	0x400204a0
 80025c4:	400204b8 	.word	0x400204b8
 80025c8:	58025408 	.word	0x58025408
 80025cc:	5802541c 	.word	0x5802541c
 80025d0:	58025430 	.word	0x58025430
 80025d4:	58025444 	.word	0x58025444
 80025d8:	58025458 	.word	0x58025458
 80025dc:	5802546c 	.word	0x5802546c
 80025e0:	58025480 	.word	0x58025480
 80025e4:	58025494 	.word	0x58025494
 80025e8:	2300      	movs	r3, #0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d028      	beq.n	8002640 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002602:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	2201      	movs	r2, #1
 800260e:	409a      	lsls	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800261c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002630:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002634:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800263e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop

0800266c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	@ 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800267a:	4b89      	ldr	r3, [pc, #548]	@ (80028a0 <HAL_GPIO_Init+0x234>)
 800267c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800267e:	e194      	b.n	80029aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2101      	movs	r1, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8186 	beq.w	80029a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d005      	beq.n	80026b0 <HAL_GPIO_Init+0x44>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d130      	bne.n	8002712 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026e6:	2201      	movs	r2, #1
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f003 0201 	and.w	r2, r3, #1
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b03      	cmp	r3, #3
 800271c:	d017      	beq.n	800274e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d123      	bne.n	80027a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	08da      	lsrs	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3208      	adds	r2, #8
 8002762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	220f      	movs	r2, #15
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	08da      	lsrs	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3208      	adds	r2, #8
 800279c:	69b9      	ldr	r1, [r7, #24]
 800279e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	2203      	movs	r2, #3
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 0203 	and.w	r2, r3, #3
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80e0 	beq.w	80029a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e4:	4b2f      	ldr	r3, [pc, #188]	@ (80028a4 <HAL_GPIO_Init+0x238>)
 80027e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027ea:	4a2e      	ldr	r2, [pc, #184]	@ (80028a4 <HAL_GPIO_Init+0x238>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027f4:	4b2b      	ldr	r3, [pc, #172]	@ (80028a4 <HAL_GPIO_Init+0x238>)
 80027f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002802:	4a29      	ldr	r2, [pc, #164]	@ (80028a8 <HAL_GPIO_Init+0x23c>)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	3302      	adds	r3, #2
 800280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	220f      	movs	r2, #15
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a20      	ldr	r2, [pc, #128]	@ (80028ac <HAL_GPIO_Init+0x240>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d052      	beq.n	80028d4 <HAL_GPIO_Init+0x268>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a1f      	ldr	r2, [pc, #124]	@ (80028b0 <HAL_GPIO_Init+0x244>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d031      	beq.n	800289a <HAL_GPIO_Init+0x22e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1e      	ldr	r2, [pc, #120]	@ (80028b4 <HAL_GPIO_Init+0x248>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d02b      	beq.n	8002896 <HAL_GPIO_Init+0x22a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1d      	ldr	r2, [pc, #116]	@ (80028b8 <HAL_GPIO_Init+0x24c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d025      	beq.n	8002892 <HAL_GPIO_Init+0x226>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a1c      	ldr	r2, [pc, #112]	@ (80028bc <HAL_GPIO_Init+0x250>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01f      	beq.n	800288e <HAL_GPIO_Init+0x222>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1b      	ldr	r2, [pc, #108]	@ (80028c0 <HAL_GPIO_Init+0x254>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d019      	beq.n	800288a <HAL_GPIO_Init+0x21e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1a      	ldr	r2, [pc, #104]	@ (80028c4 <HAL_GPIO_Init+0x258>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x21a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a19      	ldr	r2, [pc, #100]	@ (80028c8 <HAL_GPIO_Init+0x25c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x216>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a18      	ldr	r2, [pc, #96]	@ (80028cc <HAL_GPIO_Init+0x260>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x212>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a17      	ldr	r2, [pc, #92]	@ (80028d0 <HAL_GPIO_Init+0x264>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x20e>
 8002876:	2309      	movs	r3, #9
 8002878:	e02d      	b.n	80028d6 <HAL_GPIO_Init+0x26a>
 800287a:	230a      	movs	r3, #10
 800287c:	e02b      	b.n	80028d6 <HAL_GPIO_Init+0x26a>
 800287e:	2308      	movs	r3, #8
 8002880:	e029      	b.n	80028d6 <HAL_GPIO_Init+0x26a>
 8002882:	2307      	movs	r3, #7
 8002884:	e027      	b.n	80028d6 <HAL_GPIO_Init+0x26a>
 8002886:	2306      	movs	r3, #6
 8002888:	e025      	b.n	80028d6 <HAL_GPIO_Init+0x26a>
 800288a:	2305      	movs	r3, #5
 800288c:	e023      	b.n	80028d6 <HAL_GPIO_Init+0x26a>
 800288e:	2304      	movs	r3, #4
 8002890:	e021      	b.n	80028d6 <HAL_GPIO_Init+0x26a>
 8002892:	2303      	movs	r3, #3
 8002894:	e01f      	b.n	80028d6 <HAL_GPIO_Init+0x26a>
 8002896:	2302      	movs	r3, #2
 8002898:	e01d      	b.n	80028d6 <HAL_GPIO_Init+0x26a>
 800289a:	2301      	movs	r3, #1
 800289c:	e01b      	b.n	80028d6 <HAL_GPIO_Init+0x26a>
 800289e:	bf00      	nop
 80028a0:	58000080 	.word	0x58000080
 80028a4:	58024400 	.word	0x58024400
 80028a8:	58000400 	.word	0x58000400
 80028ac:	58020000 	.word	0x58020000
 80028b0:	58020400 	.word	0x58020400
 80028b4:	58020800 	.word	0x58020800
 80028b8:	58020c00 	.word	0x58020c00
 80028bc:	58021000 	.word	0x58021000
 80028c0:	58021400 	.word	0x58021400
 80028c4:	58021800 	.word	0x58021800
 80028c8:	58021c00 	.word	0x58021c00
 80028cc:	58022000 	.word	0x58022000
 80028d0:	58022400 	.word	0x58022400
 80028d4:	2300      	movs	r3, #0
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	f002 0203 	and.w	r2, r2, #3
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	4093      	lsls	r3, r2
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e6:	4938      	ldr	r1, [pc, #224]	@ (80029c8 <HAL_GPIO_Init+0x35c>)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800291a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002948:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	3301      	adds	r3, #1
 80029a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f47f ae63 	bne.w	8002680 <HAL_GPIO_Init+0x14>
  }
}
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	3724      	adds	r7, #36	@ 0x24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	58000400 	.word	0x58000400

080029cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	887b      	ldrh	r3, [r7, #2]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	e001      	b.n	80029ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a0c:	787b      	ldrb	r3, [r7, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a18:	e003      	b.n	8002a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a1a:	887b      	ldrh	r3, [r7, #2]
 8002a1c:	041a      	lsls	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	619a      	str	r2, [r3, #24]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a38:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d00a      	beq.n	8002a5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a44:	4b16      	ldr	r3, [pc, #88]	@ (8002aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d001      	beq.n	8002a56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e01f      	b.n	8002a96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e01d      	b.n	8002a96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a5a:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f023 0207 	bic.w	r2, r3, #7
 8002a62:	490f      	ldr	r1, [pc, #60]	@ (8002aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a6a:	f7fe ff2b 	bl	80018c4 <HAL_GetTick>
 8002a6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a70:	e009      	b.n	8002a86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a72:	f7fe ff27 	bl	80018c4 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a80:	d901      	bls.n	8002a86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e007      	b.n	8002a96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a92:	d1ee      	bne.n	8002a72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	58024800 	.word	0x58024800

08002aa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	@ 0x30
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f000 bc48 	b.w	8003348 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8088 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac6:	4b99      	ldr	r3, [pc, #612]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ad0:	4b96      	ldr	r3, [pc, #600]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d007      	beq.n	8002aec <HAL_RCC_OscConfig+0x48>
 8002adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ade:	2b18      	cmp	r3, #24
 8002ae0:	d111      	bne.n	8002b06 <HAL_RCC_OscConfig+0x62>
 8002ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aec:	4b8f      	ldr	r3, [pc, #572]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d06d      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x130>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d169      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f000 bc21 	b.w	8003348 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x7a>
 8002b10:	4b86      	ldr	r3, [pc, #536]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a85      	ldr	r2, [pc, #532]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	e02e      	b.n	8002b7c <HAL_RCC_OscConfig+0xd8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x9c>
 8002b26:	4b81      	ldr	r3, [pc, #516]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a80      	ldr	r2, [pc, #512]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	4b7e      	ldr	r3, [pc, #504]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a7d      	ldr	r2, [pc, #500]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e01d      	b.n	8002b7c <HAL_RCC_OscConfig+0xd8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0xc0>
 8002b4a:	4b78      	ldr	r3, [pc, #480]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a77      	ldr	r2, [pc, #476]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b75      	ldr	r3, [pc, #468]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a74      	ldr	r2, [pc, #464]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e00b      	b.n	8002b7c <HAL_RCC_OscConfig+0xd8>
 8002b64:	4b71      	ldr	r3, [pc, #452]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a70      	ldr	r2, [pc, #448]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b6e      	ldr	r3, [pc, #440]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a6d      	ldr	r2, [pc, #436]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe fe9e 	bl	80018c4 <HAL_GetTick>
 8002b88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7fe fe9a 	bl	80018c4 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	@ 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e3d4      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b9e:	4b63      	ldr	r3, [pc, #396]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0xe8>
 8002baa:	e014      	b.n	8002bd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe fe8a 	bl	80018c4 <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fe86 	bl	80018c4 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	@ 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e3c0      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bc6:	4b59      	ldr	r3, [pc, #356]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x110>
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 80ca 	beq.w	8002d78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be4:	4b51      	ldr	r3, [pc, #324]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bee:	4b4f      	ldr	r3, [pc, #316]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <HAL_RCC_OscConfig+0x166>
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	2b18      	cmp	r3, #24
 8002bfe:	d156      	bne.n	8002cae <HAL_RCC_OscConfig+0x20a>
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d151      	bne.n	8002cae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c0a:	4b48      	ldr	r3, [pc, #288]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <HAL_RCC_OscConfig+0x17e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e392      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c22:	4b42      	ldr	r3, [pc, #264]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 0219 	bic.w	r2, r3, #25
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	493f      	ldr	r1, [pc, #252]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fe46 	bl	80018c4 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fe42 	bl	80018c4 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e37c      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c4e:	4b37      	ldr	r3, [pc, #220]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5a:	f7fe fe3f 	bl	80018dc <HAL_GetREVID>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d817      	bhi.n	8002c98 <HAL_RCC_OscConfig+0x1f4>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b40      	cmp	r3, #64	@ 0x40
 8002c6e:	d108      	bne.n	8002c82 <HAL_RCC_OscConfig+0x1de>
 8002c70:	4b2e      	ldr	r3, [pc, #184]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c78:	4a2c      	ldr	r2, [pc, #176]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c80:	e07a      	b.n	8002d78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	4b2a      	ldr	r3, [pc, #168]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	031b      	lsls	r3, r3, #12
 8002c90:	4926      	ldr	r1, [pc, #152]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c96:	e06f      	b.n	8002d78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c98:	4b24      	ldr	r3, [pc, #144]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	061b      	lsls	r3, r3, #24
 8002ca6:	4921      	ldr	r1, [pc, #132]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cac:	e064      	b.n	8002d78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d047      	beq.n	8002d46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 0219 	bic.w	r2, r3, #25
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	491a      	ldr	r1, [pc, #104]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fdfc 	bl	80018c4 <HAL_GetTick>
 8002ccc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fdf8 	bl	80018c4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e332      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce2:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	f7fe fdf5 	bl	80018dc <HAL_GetREVID>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d819      	bhi.n	8002d30 <HAL_RCC_OscConfig+0x28c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b40      	cmp	r3, #64	@ 0x40
 8002d02:	d108      	bne.n	8002d16 <HAL_RCC_OscConfig+0x272>
 8002d04:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002d0c:	4a07      	ldr	r2, [pc, #28]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d12:	6053      	str	r3, [r2, #4]
 8002d14:	e030      	b.n	8002d78 <HAL_RCC_OscConfig+0x2d4>
 8002d16:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	031b      	lsls	r3, r3, #12
 8002d24:	4901      	ldr	r1, [pc, #4]	@ (8002d2c <HAL_RCC_OscConfig+0x288>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
 8002d2a:	e025      	b.n	8002d78 <HAL_RCC_OscConfig+0x2d4>
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	4b9a      	ldr	r3, [pc, #616]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	061b      	lsls	r3, r3, #24
 8002d3e:	4997      	ldr	r1, [pc, #604]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
 8002d44:	e018      	b.n	8002d78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d46:	4b95      	ldr	r3, [pc, #596]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a94      	ldr	r2, [pc, #592]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fe fdb7 	bl	80018c4 <HAL_GetTick>
 8002d56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5a:	f7fe fdb3 	bl	80018c4 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e2ed      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d6c:	4b8b      	ldr	r3, [pc, #556]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a9 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d86:	4b85      	ldr	r3, [pc, #532]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d90:	4b82      	ldr	r3, [pc, #520]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d007      	beq.n	8002dac <HAL_RCC_OscConfig+0x308>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b18      	cmp	r3, #24
 8002da0:	d13a      	bne.n	8002e18 <HAL_RCC_OscConfig+0x374>
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d135      	bne.n	8002e18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dac:	4b7b      	ldr	r3, [pc, #492]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x320>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	2b80      	cmp	r3, #128	@ 0x80
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e2c1      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dc4:	f7fe fd8a 	bl	80018dc <HAL_GetREVID>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d817      	bhi.n	8002e02 <HAL_RCC_OscConfig+0x35e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d108      	bne.n	8002dec <HAL_RCC_OscConfig+0x348>
 8002dda:	4b70      	ldr	r3, [pc, #448]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002de2:	4a6e      	ldr	r2, [pc, #440]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002de4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002de8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dea:	e075      	b.n	8002ed8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dec:	4b6b      	ldr	r3, [pc, #428]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	069b      	lsls	r3, r3, #26
 8002dfa:	4968      	ldr	r1, [pc, #416]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e00:	e06a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e02:	4b66      	ldr	r3, [pc, #408]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	061b      	lsls	r3, r3, #24
 8002e10:	4962      	ldr	r1, [pc, #392]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e16:	e05f      	b.n	8002ed8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d042      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e20:	4b5e      	ldr	r3, [pc, #376]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a5d      	ldr	r2, [pc, #372]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fd4a 	bl	80018c4 <HAL_GetTick>
 8002e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e34:	f7fe fd46 	bl	80018c4 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e280      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e46:	4b55      	ldr	r3, [pc, #340]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e52:	f7fe fd43 	bl	80018dc <HAL_GetREVID>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d817      	bhi.n	8002e90 <HAL_RCC_OscConfig+0x3ec>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d108      	bne.n	8002e7a <HAL_RCC_OscConfig+0x3d6>
 8002e68:	4b4c      	ldr	r3, [pc, #304]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e70:	4a4a      	ldr	r2, [pc, #296]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002e72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e76:	6053      	str	r3, [r2, #4]
 8002e78:	e02e      	b.n	8002ed8 <HAL_RCC_OscConfig+0x434>
 8002e7a:	4b48      	ldr	r3, [pc, #288]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	069b      	lsls	r3, r3, #26
 8002e88:	4944      	ldr	r1, [pc, #272]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	604b      	str	r3, [r1, #4]
 8002e8e:	e023      	b.n	8002ed8 <HAL_RCC_OscConfig+0x434>
 8002e90:	4b42      	ldr	r3, [pc, #264]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	493f      	ldr	r1, [pc, #252]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60cb      	str	r3, [r1, #12]
 8002ea4:	e018      	b.n	8002ed8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a3c      	ldr	r2, [pc, #240]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002eac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fd07 	bl	80018c4 <HAL_GetTick>
 8002eb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002eba:	f7fe fd03 	bl	80018c4 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e23d      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ecc:	4b33      	ldr	r3, [pc, #204]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d036      	beq.n	8002f52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d019      	beq.n	8002f20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eec:	4b2b      	ldr	r3, [pc, #172]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef8:	f7fe fce4 	bl	80018c4 <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f00:	f7fe fce0 	bl	80018c4 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e21a      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f12:	4b22      	ldr	r3, [pc, #136]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x45c>
 8002f1e:	e018      	b.n	8002f52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f20:	4b1e      	ldr	r3, [pc, #120]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f24:	4a1d      	ldr	r2, [pc, #116]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe fcca 	bl	80018c4 <HAL_GetTick>
 8002f30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f34:	f7fe fcc6 	bl	80018c4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e200      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f46:	4b15      	ldr	r3, [pc, #84]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d039      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d01c      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f66:	4b0d      	ldr	r3, [pc, #52]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f72:	f7fe fca7 	bl	80018c4 <HAL_GetTick>
 8002f76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f7a:	f7fe fca3 	bl	80018c4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e1dd      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f8c:	4b03      	ldr	r3, [pc, #12]	@ (8002f9c <HAL_RCC_OscConfig+0x4f8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x4d6>
 8002f98:	e01b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
 8002f9a:	bf00      	nop
 8002f9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fa0:	4b9b      	ldr	r3, [pc, #620]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a9a      	ldr	r2, [pc, #616]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8002fa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002faa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fac:	f7fe fc8a 	bl	80018c4 <HAL_GetTick>
 8002fb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb4:	f7fe fc86 	bl	80018c4 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1c0      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fc6:	4b92      	ldr	r3, [pc, #584]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8081 	beq.w	80030e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fe0:	4b8c      	ldr	r3, [pc, #560]	@ (8003214 <HAL_RCC_OscConfig+0x770>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a8b      	ldr	r2, [pc, #556]	@ (8003214 <HAL_RCC_OscConfig+0x770>)
 8002fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fec:	f7fe fc6a 	bl	80018c4 <HAL_GetTick>
 8002ff0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff4:	f7fe fc66 	bl	80018c4 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	@ 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e1a0      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003006:	4b83      	ldr	r3, [pc, #524]	@ (8003214 <HAL_RCC_OscConfig+0x770>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d106      	bne.n	8003028 <HAL_RCC_OscConfig+0x584>
 800301a:	4b7d      	ldr	r3, [pc, #500]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	4a7c      	ldr	r2, [pc, #496]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6713      	str	r3, [r2, #112]	@ 0x70
 8003026:	e02d      	b.n	8003084 <HAL_RCC_OscConfig+0x5e0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10c      	bne.n	800304a <HAL_RCC_OscConfig+0x5a6>
 8003030:	4b77      	ldr	r3, [pc, #476]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003034:	4a76      	ldr	r2, [pc, #472]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	@ 0x70
 800303c:	4b74      	ldr	r3, [pc, #464]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003040:	4a73      	ldr	r2, [pc, #460]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003042:	f023 0304 	bic.w	r3, r3, #4
 8003046:	6713      	str	r3, [r2, #112]	@ 0x70
 8003048:	e01c      	b.n	8003084 <HAL_RCC_OscConfig+0x5e0>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b05      	cmp	r3, #5
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x5c8>
 8003052:	4b6f      	ldr	r3, [pc, #444]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	4a6e      	ldr	r2, [pc, #440]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	6713      	str	r3, [r2, #112]	@ 0x70
 800305e:	4b6c      	ldr	r3, [pc, #432]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	4a6b      	ldr	r2, [pc, #428]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6713      	str	r3, [r2, #112]	@ 0x70
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0x5e0>
 800306c:	4b68      	ldr	r3, [pc, #416]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003070:	4a67      	ldr	r2, [pc, #412]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	@ 0x70
 8003078:	4b65      	ldr	r3, [pc, #404]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307c:	4a64      	ldr	r2, [pc, #400]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308c:	f7fe fc1a 	bl	80018c4 <HAL_GetTick>
 8003090:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003092:	e00a      	b.n	80030aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003094:	f7fe fc16 	bl	80018c4 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e14e      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030aa:	4b59      	ldr	r3, [pc, #356]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ee      	beq.n	8003094 <HAL_RCC_OscConfig+0x5f0>
 80030b6:	e014      	b.n	80030e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7fe fc04 	bl	80018c4 <HAL_GetTick>
 80030bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7fe fc00 	bl	80018c4 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e138      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ee      	bne.n	80030c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 812d 	beq.w	8003346 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030ec:	4b48      	ldr	r3, [pc, #288]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030f4:	2b18      	cmp	r3, #24
 80030f6:	f000 80bd 	beq.w	8003274 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	2b02      	cmp	r3, #2
 8003100:	f040 809e 	bne.w	8003240 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003104:	4b42      	ldr	r3, [pc, #264]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a41      	ldr	r2, [pc, #260]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 800310a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800310e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe fbd8 	bl	80018c4 <HAL_GetTick>
 8003114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fbd4 	bl	80018c4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e10e      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800312a:	4b39      	ldr	r3, [pc, #228]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003136:	4b36      	ldr	r3, [pc, #216]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003138:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800313a:	4b37      	ldr	r3, [pc, #220]	@ (8003218 <HAL_RCC_OscConfig+0x774>)
 800313c:	4013      	ands	r3, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	430a      	orrs	r2, r1
 800314a:	4931      	ldr	r1, [pc, #196]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 800314c:	4313      	orrs	r3, r2
 800314e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003154:	3b01      	subs	r3, #1
 8003156:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315e:	3b01      	subs	r3, #1
 8003160:	025b      	lsls	r3, r3, #9
 8003162:	b29b      	uxth	r3, r3
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316a:	3b01      	subs	r3, #1
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003178:	3b01      	subs	r3, #1
 800317a:	061b      	lsls	r3, r3, #24
 800317c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003180:	4923      	ldr	r1, [pc, #140]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003182:	4313      	orrs	r3, r2
 8003184:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003186:	4b22      	ldr	r3, [pc, #136]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	4a21      	ldr	r2, [pc, #132]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003192:	4b1f      	ldr	r3, [pc, #124]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003196:	4b21      	ldr	r3, [pc, #132]	@ (800321c <HAL_RCC_OscConfig+0x778>)
 8003198:	4013      	ands	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800319e:	00d2      	lsls	r2, r2, #3
 80031a0:	491b      	ldr	r1, [pc, #108]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80031a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	f023 020c 	bic.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	4917      	ldr	r1, [pc, #92]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031b8:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	f023 0202 	bic.w	r2, r3, #2
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c4:	4912      	ldr	r1, [pc, #72]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031ca:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	4a10      	ldr	r2, [pc, #64]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	4a0d      	ldr	r2, [pc, #52]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80031e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80031ee:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f2:	4a07      	ldr	r2, [pc, #28]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031fa:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a04      	ldr	r2, [pc, #16]	@ (8003210 <HAL_RCC_OscConfig+0x76c>)
 8003200:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7fe fb5d 	bl	80018c4 <HAL_GetTick>
 800320a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800320c:	e011      	b.n	8003232 <HAL_RCC_OscConfig+0x78e>
 800320e:	bf00      	nop
 8003210:	58024400 	.word	0x58024400
 8003214:	58024800 	.word	0x58024800
 8003218:	fffffc0c 	.word	0xfffffc0c
 800321c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003220:	f7fe fb50 	bl	80018c4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e08a      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003232:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x77c>
 800323e:	e082      	b.n	8003346 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003240:	4b43      	ldr	r3, [pc, #268]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a42      	ldr	r2, [pc, #264]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 8003246:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800324a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fe fb3a 	bl	80018c4 <HAL_GetTick>
 8003250:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003254:	f7fe fb36 	bl	80018c4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e070      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003266:	4b3a      	ldr	r3, [pc, #232]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x7b0>
 8003272:	e068      	b.n	8003346 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003274:	4b36      	ldr	r3, [pc, #216]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800327a:	4b35      	ldr	r3, [pc, #212]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	2b01      	cmp	r3, #1
 8003286:	d031      	beq.n	80032ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f003 0203 	and.w	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d12a      	bne.n	80032ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d122      	bne.n	80032ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d11a      	bne.n	80032ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	0a5b      	lsrs	r3, r3, #9
 80032ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d111      	bne.n	80032ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	0c1b      	lsrs	r3, r3, #16
 80032cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d108      	bne.n	80032ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	0e1b      	lsrs	r3, r3, #24
 80032de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e02b      	b.n	8003348 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80032f0:	4b17      	ldr	r3, [pc, #92]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 80032f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f4:	08db      	lsrs	r3, r3, #3
 80032f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	429a      	cmp	r2, r3
 8003304:	d01f      	beq.n	8003346 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003306:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 8003308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330a:	4a11      	ldr	r2, [pc, #68]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003312:	f7fe fad7 	bl	80018c4 <HAL_GetTick>
 8003316:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003318:	bf00      	nop
 800331a:	f7fe fad3 	bl	80018c4 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003322:	4293      	cmp	r3, r2
 8003324:	d0f9      	beq.n	800331a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003326:	4b0a      	ldr	r3, [pc, #40]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 8003328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800332a:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <HAL_RCC_OscConfig+0x8b0>)
 800332c:	4013      	ands	r3, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003332:	00d2      	lsls	r2, r2, #3
 8003334:	4906      	ldr	r1, [pc, #24]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 8003336:	4313      	orrs	r3, r2
 8003338:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800333a:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 800333c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333e:	4a04      	ldr	r2, [pc, #16]	@ (8003350 <HAL_RCC_OscConfig+0x8ac>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3730      	adds	r7, #48	@ 0x30
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	58024400 	.word	0x58024400
 8003354:	ffff0007 	.word	0xffff0007

08003358 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e19c      	b.n	80036a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800336c:	4b8a      	ldr	r3, [pc, #552]	@ (8003598 <HAL_RCC_ClockConfig+0x240>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d910      	bls.n	800339c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b87      	ldr	r3, [pc, #540]	@ (8003598 <HAL_RCC_ClockConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 020f 	bic.w	r2, r3, #15
 8003382:	4985      	ldr	r1, [pc, #532]	@ (8003598 <HAL_RCC_ClockConfig+0x240>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b83      	ldr	r3, [pc, #524]	@ (8003598 <HAL_RCC_ClockConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e184      	b.n	80036a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d010      	beq.n	80033ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	4b7b      	ldr	r3, [pc, #492]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d908      	bls.n	80033ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033b8:	4b78      	ldr	r3, [pc, #480]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	4975      	ldr	r1, [pc, #468]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d010      	beq.n	80033f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	4b70      	ldr	r3, [pc, #448]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d908      	bls.n	80033f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033e6:	4b6d      	ldr	r3, [pc, #436]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	496a      	ldr	r1, [pc, #424]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d010      	beq.n	8003426 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	4b64      	ldr	r3, [pc, #400]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003410:	429a      	cmp	r2, r3
 8003412:	d908      	bls.n	8003426 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003414:	4b61      	ldr	r3, [pc, #388]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	495e      	ldr	r1, [pc, #376]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 8003422:	4313      	orrs	r3, r2
 8003424:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d010      	beq.n	8003454 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	4b59      	ldr	r3, [pc, #356]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800343e:	429a      	cmp	r2, r3
 8003440:	d908      	bls.n	8003454 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003442:	4b56      	ldr	r3, [pc, #344]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4953      	ldr	r1, [pc, #332]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 8003450:	4313      	orrs	r3, r2
 8003452:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d010      	beq.n	8003482 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	4b4d      	ldr	r3, [pc, #308]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	429a      	cmp	r2, r3
 800346e:	d908      	bls.n	8003482 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003470:	4b4a      	ldr	r3, [pc, #296]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	f023 020f 	bic.w	r2, r3, #15
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4947      	ldr	r1, [pc, #284]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 800347e:	4313      	orrs	r3, r2
 8003480:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d055      	beq.n	800353a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800348e:	4b43      	ldr	r3, [pc, #268]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	4940      	ldr	r1, [pc, #256]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 800349c:	4313      	orrs	r3, r2
 800349e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034a8:	4b3c      	ldr	r3, [pc, #240]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d121      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0f6      	b.n	80036a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034c0:	4b36      	ldr	r3, [pc, #216]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d115      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0ea      	b.n	80036a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034d8:	4b30      	ldr	r3, [pc, #192]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0de      	b.n	80036a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034e8:	4b2c      	ldr	r3, [pc, #176]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0d6      	b.n	80036a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034f8:	4b28      	ldr	r3, [pc, #160]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f023 0207 	bic.w	r2, r3, #7
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4925      	ldr	r1, [pc, #148]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 8003506:	4313      	orrs	r3, r2
 8003508:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350a:	f7fe f9db 	bl	80018c4 <HAL_GetTick>
 800350e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003510:	e00a      	b.n	8003528 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003512:	f7fe f9d7 	bl	80018c4 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0be      	b.n	80036a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003528:	4b1c      	ldr	r3, [pc, #112]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	429a      	cmp	r2, r3
 8003538:	d1eb      	bne.n	8003512 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d010      	beq.n	8003568 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	4b14      	ldr	r3, [pc, #80]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	429a      	cmp	r2, r3
 8003554:	d208      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003556:	4b11      	ldr	r3, [pc, #68]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f023 020f 	bic.w	r2, r3, #15
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	490e      	ldr	r1, [pc, #56]	@ (800359c <HAL_RCC_ClockConfig+0x244>)
 8003564:	4313      	orrs	r3, r2
 8003566:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003568:	4b0b      	ldr	r3, [pc, #44]	@ (8003598 <HAL_RCC_ClockConfig+0x240>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d214      	bcs.n	80035a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b08      	ldr	r3, [pc, #32]	@ (8003598 <HAL_RCC_ClockConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 020f 	bic.w	r2, r3, #15
 800357e:	4906      	ldr	r1, [pc, #24]	@ (8003598 <HAL_RCC_ClockConfig+0x240>)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b04      	ldr	r3, [pc, #16]	@ (8003598 <HAL_RCC_ClockConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e086      	b.n	80036a6 <HAL_RCC_ClockConfig+0x34e>
 8003598:	52002000 	.word	0x52002000
 800359c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d010      	beq.n	80035ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	4b3f      	ldr	r3, [pc, #252]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d208      	bcs.n	80035ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035bc:	4b3c      	ldr	r3, [pc, #240]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	4939      	ldr	r1, [pc, #228]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d010      	beq.n	80035fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	4b34      	ldr	r3, [pc, #208]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d208      	bcs.n	80035fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035ea:	4b31      	ldr	r3, [pc, #196]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	492e      	ldr	r1, [pc, #184]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	d010      	beq.n	800362a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699a      	ldr	r2, [r3, #24]
 800360c:	4b28      	ldr	r3, [pc, #160]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003614:	429a      	cmp	r2, r3
 8003616:	d208      	bcs.n	800362a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003618:	4b25      	ldr	r3, [pc, #148]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	4922      	ldr	r1, [pc, #136]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 8003626:	4313      	orrs	r3, r2
 8003628:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d010      	beq.n	8003658 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	4b1d      	ldr	r3, [pc, #116]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003642:	429a      	cmp	r2, r3
 8003644:	d208      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003646:	4b1a      	ldr	r3, [pc, #104]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4917      	ldr	r1, [pc, #92]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 8003654:	4313      	orrs	r3, r2
 8003656:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003658:	f000 f834 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b14      	ldr	r3, [pc, #80]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	4912      	ldr	r1, [pc, #72]	@ (80036b4 <HAL_RCC_ClockConfig+0x35c>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
 8003674:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003676:	4b0e      	ldr	r3, [pc, #56]	@ (80036b0 <HAL_RCC_ClockConfig+0x358>)
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	4a0d      	ldr	r2, [pc, #52]	@ (80036b4 <HAL_RCC_ClockConfig+0x35c>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
 800368c:	4a0a      	ldr	r2, [pc, #40]	@ (80036b8 <HAL_RCC_ClockConfig+0x360>)
 800368e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003690:	4a0a      	ldr	r2, [pc, #40]	@ (80036bc <HAL_RCC_ClockConfig+0x364>)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003696:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <HAL_RCC_ClockConfig+0x368>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd ff74 	bl	8001588 <HAL_InitTick>
 80036a0:	4603      	mov	r3, r0
 80036a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	58024400 	.word	0x58024400
 80036b4:	0800abac 	.word	0x0800abac
 80036b8:	24000018 	.word	0x24000018
 80036bc:	24000014 	.word	0x24000014
 80036c0:	2400001c 	.word	0x2400001c

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	@ 0x24
 80036c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ca:	4bb3      	ldr	r3, [pc, #716]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036d2:	2b18      	cmp	r3, #24
 80036d4:	f200 8155 	bhi.w	8003982 <HAL_RCC_GetSysClockFreq+0x2be>
 80036d8:	a201      	add	r2, pc, #4	@ (adr r2, 80036e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	08003745 	.word	0x08003745
 80036e4:	08003983 	.word	0x08003983
 80036e8:	08003983 	.word	0x08003983
 80036ec:	08003983 	.word	0x08003983
 80036f0:	08003983 	.word	0x08003983
 80036f4:	08003983 	.word	0x08003983
 80036f8:	08003983 	.word	0x08003983
 80036fc:	08003983 	.word	0x08003983
 8003700:	0800376b 	.word	0x0800376b
 8003704:	08003983 	.word	0x08003983
 8003708:	08003983 	.word	0x08003983
 800370c:	08003983 	.word	0x08003983
 8003710:	08003983 	.word	0x08003983
 8003714:	08003983 	.word	0x08003983
 8003718:	08003983 	.word	0x08003983
 800371c:	08003983 	.word	0x08003983
 8003720:	08003771 	.word	0x08003771
 8003724:	08003983 	.word	0x08003983
 8003728:	08003983 	.word	0x08003983
 800372c:	08003983 	.word	0x08003983
 8003730:	08003983 	.word	0x08003983
 8003734:	08003983 	.word	0x08003983
 8003738:	08003983 	.word	0x08003983
 800373c:	08003983 	.word	0x08003983
 8003740:	08003777 	.word	0x08003777
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003744:	4b94      	ldr	r3, [pc, #592]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003750:	4b91      	ldr	r3, [pc, #580]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	08db      	lsrs	r3, r3, #3
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	4a90      	ldr	r2, [pc, #576]	@ (800399c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
 8003760:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003762:	e111      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003764:	4b8d      	ldr	r3, [pc, #564]	@ (800399c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003766:	61bb      	str	r3, [r7, #24]
      break;
 8003768:	e10e      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800376a:	4b8d      	ldr	r3, [pc, #564]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800376c:	61bb      	str	r3, [r7, #24]
      break;
 800376e:	e10b      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003770:	4b8c      	ldr	r3, [pc, #560]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003772:	61bb      	str	r3, [r7, #24]
      break;
 8003774:	e108      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003776:	4b88      	ldr	r3, [pc, #544]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003780:	4b85      	ldr	r3, [pc, #532]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800378a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800378c:	4b82      	ldr	r3, [pc, #520]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003796:	4b80      	ldr	r3, [pc, #512]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379a:	08db      	lsrs	r3, r3, #3
 800379c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	fb02 f303 	mul.w	r3, r2, r3
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80e1 	beq.w	800397c <HAL_RCC_GetSysClockFreq+0x2b8>
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	f000 8083 	beq.w	80038c8 <HAL_RCC_GetSysClockFreq+0x204>
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	f200 80a1 	bhi.w	800390c <HAL_RCC_GetSysClockFreq+0x248>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x114>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d056      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x1c0>
 80037d6:	e099      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d02d      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	08db      	lsrs	r3, r3, #3
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	4a6b      	ldr	r2, [pc, #428]	@ (800399c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
 80037f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	ee07 3a90 	vmov	s15, r3
 80037fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380e:	4b62      	ldr	r3, [pc, #392]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003822:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80039a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800383e:	e087      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80039ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800384e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003852:	4b51      	ldr	r3, [pc, #324]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003862:	ed97 6a02 	vldr	s12, [r7, #8]
 8003866:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80039a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800386a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003882:	e065      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80039b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003896:	4b40      	ldr	r3, [pc, #256]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80039a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038c6:	e043      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	ee07 3a90 	vmov	s15, r3
 80038ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80039b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80038d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038da:	4b2f      	ldr	r3, [pc, #188]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80038ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80039a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800390a:	e021      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80039b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800391a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391e:	4b1e      	ldr	r3, [pc, #120]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800392e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003932:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80039a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800393a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800393e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800394e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003950:	4b11      	ldr	r3, [pc, #68]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003954:	0a5b      	lsrs	r3, r3, #9
 8003956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800395a:	3301      	adds	r3, #1
 800395c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	ee07 3a90 	vmov	s15, r3
 8003964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003968:	edd7 6a07 	vldr	s13, [r7, #28]
 800396c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003974:	ee17 3a90 	vmov	r3, s15
 8003978:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800397a:	e005      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
      break;
 8003980:	e002      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003982:	4b07      	ldr	r3, [pc, #28]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003984:	61bb      	str	r3, [r7, #24]
      break;
 8003986:	bf00      	nop
  }

  return sysclockfreq;
 8003988:	69bb      	ldr	r3, [r7, #24]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3724      	adds	r7, #36	@ 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	58024400 	.word	0x58024400
 800399c:	03d09000 	.word	0x03d09000
 80039a0:	003d0900 	.word	0x003d0900
 80039a4:	017d7840 	.word	0x017d7840
 80039a8:	46000000 	.word	0x46000000
 80039ac:	4c742400 	.word	0x4c742400
 80039b0:	4a742400 	.word	0x4a742400
 80039b4:	4bbebc20 	.word	0x4bbebc20

080039b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039be:	f7ff fe81 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4b10      	ldr	r3, [pc, #64]	@ (8003a08 <HAL_RCC_GetHCLKFreq+0x50>)
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	490f      	ldr	r1, [pc, #60]	@ (8003a0c <HAL_RCC_GetHCLKFreq+0x54>)
 80039d0:	5ccb      	ldrb	r3, [r1, r3]
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	fa22 f303 	lsr.w	r3, r2, r3
 80039da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003a08 <HAL_RCC_GetHCLKFreq+0x50>)
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	4a09      	ldr	r2, [pc, #36]	@ (8003a0c <HAL_RCC_GetHCLKFreq+0x54>)
 80039e6:	5cd3      	ldrb	r3, [r2, r3]
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	fa22 f303 	lsr.w	r3, r2, r3
 80039f2:	4a07      	ldr	r2, [pc, #28]	@ (8003a10 <HAL_RCC_GetHCLKFreq+0x58>)
 80039f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039f6:	4a07      	ldr	r2, [pc, #28]	@ (8003a14 <HAL_RCC_GetHCLKFreq+0x5c>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80039fc:	4b04      	ldr	r3, [pc, #16]	@ (8003a10 <HAL_RCC_GetHCLKFreq+0x58>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	58024400 	.word	0x58024400
 8003a0c:	0800abac 	.word	0x0800abac
 8003a10:	24000018 	.word	0x24000018
 8003a14:	24000014 	.word	0x24000014

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a1c:	f7ff ffcc 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4904      	ldr	r1, [pc, #16]	@ (8003a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	0800abac 	.word	0x0800abac

08003a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a48:	f7ff ffb6 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4904      	ldr	r1, [pc, #16]	@ (8003a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	58024400 	.word	0x58024400
 8003a6c:	0800abac 	.word	0x0800abac

08003a70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	223f      	movs	r2, #63	@ 0x3f
 8003a7e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a80:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <HAL_RCC_GetClockConfig+0x7c>)
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f003 0207 	and.w	r2, r3, #7
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003a8c:	4b17      	ldr	r3, [pc, #92]	@ (8003aec <HAL_RCC_GetClockConfig+0x7c>)
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003a98:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <HAL_RCC_GetClockConfig+0x7c>)
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f003 020f 	and.w	r2, r3, #15
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003aa4:	4b11      	ldr	r3, [pc, #68]	@ (8003aec <HAL_RCC_GetClockConfig+0x7c>)
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8003aec <HAL_RCC_GetClockConfig+0x7c>)
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003abc:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <HAL_RCC_GetClockConfig+0x7c>)
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003ac8:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <HAL_RCC_GetClockConfig+0x7c>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ad4:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <HAL_RCC_GetClockConfig+0x80>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 020f 	and.w	r2, r3, #15
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	601a      	str	r2, [r3, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	58024400 	.word	0x58024400
 8003af0:	52002000 	.word	0x52002000

08003af4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af8:	b0ca      	sub	sp, #296	@ 0x128
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b00:	2300      	movs	r3, #0
 8003b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b06:	2300      	movs	r3, #0
 8003b08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003b18:	2500      	movs	r5, #0
 8003b1a:	ea54 0305 	orrs.w	r3, r4, r5
 8003b1e:	d049      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b2a:	d02f      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003b2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b30:	d828      	bhi.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b36:	d01a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b3c:	d822      	bhi.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b46:	d007      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b48:	e01c      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b4a:	4bb8      	ldr	r3, [pc, #736]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4e:	4ab7      	ldr	r2, [pc, #732]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b56:	e01a      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	2102      	movs	r1, #2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f001 fc8f 	bl	8005484 <RCCEx_PLL2_Config>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b6c:	e00f      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b72:	3328      	adds	r3, #40	@ 0x28
 8003b74:	2102      	movs	r1, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 fd36 	bl	80055e8 <RCCEx_PLL3_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b82:	e004      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b8a:	e000      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b96:	4ba5      	ldr	r3, [pc, #660]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba4:	4aa1      	ldr	r2, [pc, #644]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003baa:	e003      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003bc0:	f04f 0900 	mov.w	r9, #0
 8003bc4:	ea58 0309 	orrs.w	r3, r8, r9
 8003bc8:	d047      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d82a      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003bf1 	.word	0x08003bf1
 8003be0:	08003bff 	.word	0x08003bff
 8003be4:	08003c15 	.word	0x08003c15
 8003be8:	08003c33 	.word	0x08003c33
 8003bec:	08003c33 	.word	0x08003c33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf0:	4b8e      	ldr	r3, [pc, #568]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	4a8d      	ldr	r2, [pc, #564]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bfc:	e01a      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c02:	3308      	adds	r3, #8
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 fc3c 	bl	8005484 <RCCEx_PLL2_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c12:	e00f      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c18:	3328      	adds	r3, #40	@ 0x28
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 fce3 	bl	80055e8 <RCCEx_PLL3_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c28:	e004      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c30:	e000      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c3c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c40:	f023 0107 	bic.w	r1, r3, #7
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4a:	4a78      	ldr	r2, [pc, #480]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c50:	e003      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003c66:	f04f 0b00 	mov.w	fp, #0
 8003c6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c6e:	d04c      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c7a:	d030      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c80:	d829      	bhi.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c82:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c84:	d02d      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c86:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c88:	d825      	bhi.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c8a:	2b80      	cmp	r3, #128	@ 0x80
 8003c8c:	d018      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c8e:	2b80      	cmp	r3, #128	@ 0x80
 8003c90:	d821      	bhi.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	d007      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003c9a:	e01c      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c9c:	4b63      	ldr	r3, [pc, #396]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	4a62      	ldr	r2, [pc, #392]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ca8:	e01c      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cae:	3308      	adds	r3, #8
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 fbe6 	bl	8005484 <RCCEx_PLL2_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003cbe:	e011      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	3328      	adds	r3, #40	@ 0x28
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f001 fc8d 	bl	80055e8 <RCCEx_PLL3_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003cd4:	e006      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003cec:	4b4f      	ldr	r3, [pc, #316]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfa:	4a4c      	ldr	r2, [pc, #304]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d00:	e003      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003d16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003d20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003d24:	460b      	mov	r3, r1
 8003d26:	4313      	orrs	r3, r2
 8003d28:	d053      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d36:	d035      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003d38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d3c:	d82e      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003d42:	d031      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003d44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003d48:	d828      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d4e:	d01a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003d50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d54:	d822      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003d5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d5e:	d007      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003d60:	e01c      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d62:	4b32      	ldr	r3, [pc, #200]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d66:	4a31      	ldr	r2, [pc, #196]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d6e:	e01c      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d74:	3308      	adds	r3, #8
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f001 fb83 	bl	8005484 <RCCEx_PLL2_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d84:	e011      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8a:	3328      	adds	r3, #40	@ 0x28
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 fc2a 	bl	80055e8 <RCCEx_PLL3_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d9a:	e006      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003da2:	e002      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003da4:	bf00      	nop
 8003da6:	e000      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003db2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc8:	e003      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003dde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003de2:	2300      	movs	r3, #0
 8003de4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003de8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003dec:	460b      	mov	r3, r1
 8003dee:	4313      	orrs	r3, r2
 8003df0:	d056      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003dfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dfe:	d038      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003e00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e04:	d831      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e0a:	d034      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003e0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e10:	d82b      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e16:	d01d      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003e18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e1c:	d825      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d006      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003e22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003e28:	e01f      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e2a:	bf00      	nop
 8003e2c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e30:	4ba2      	ldr	r3, [pc, #648]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	4aa1      	ldr	r2, [pc, #644]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e3c:	e01c      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e42:	3308      	adds	r3, #8
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 fb1c 	bl	8005484 <RCCEx_PLL2_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e52:	e011      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e58:	3328      	adds	r3, #40	@ 0x28
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 fbc3 	bl	80055e8 <RCCEx_PLL3_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e70:	e002      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e72:	bf00      	nop
 8003e74:	e000      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10b      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e80:	4b8e      	ldr	r3, [pc, #568]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e84:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e90:	4a8a      	ldr	r2, [pc, #552]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e92:	430b      	orrs	r3, r1
 8003e94:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e96:	e003      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003eac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003eb6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	d03a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec6:	2b30      	cmp	r3, #48	@ 0x30
 8003ec8:	d01f      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003eca:	2b30      	cmp	r3, #48	@ 0x30
 8003ecc:	d819      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d00c      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d815      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d019      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d111      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ede:	4b77      	ldr	r3, [pc, #476]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	4a76      	ldr	r2, [pc, #472]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003eea:	e011      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fac5 	bl	8005484 <RCCEx_PLL2_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f00:	e006      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f08:	e002      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003f0a:	bf00      	nop
 8003f0c:	e000      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10a      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f18:	4b68      	ldr	r3, [pc, #416]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f1c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f26:	4a65      	ldr	r2, [pc, #404]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f2c:	e003      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003f42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003f46:	2300      	movs	r3, #0
 8003f48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003f4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4313      	orrs	r3, r2
 8003f54:	d051      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f60:	d035      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003f62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f66:	d82e      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f6c:	d031      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003f6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f72:	d828      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f78:	d01a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f7e:	d822      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003f84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f88:	d007      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003f8a:	e01c      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	4a4a      	ldr	r2, [pc, #296]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f98:	e01c      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 fa6e 	bl	8005484 <RCCEx_PLL2_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003fae:	e011      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb4:	3328      	adds	r3, #40	@ 0x28
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 fb15 	bl	80055e8 <RCCEx_PLL3_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003fc4:	e006      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fcc:	e002      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003fce:	bf00      	nop
 8003fd0:	e000      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003fdc:	4b37      	ldr	r3, [pc, #220]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fea:	4a34      	ldr	r2, [pc, #208]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fec:	430b      	orrs	r3, r1
 8003fee:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ff0:	e003      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004006:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004010:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004014:	460b      	mov	r3, r1
 8004016:	4313      	orrs	r3, r2
 8004018:	d056      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800401a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004020:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004024:	d033      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004026:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800402a:	d82c      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800402c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004030:	d02f      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004032:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004036:	d826      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004038:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800403c:	d02b      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800403e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004042:	d820      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004048:	d012      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800404a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800404e:	d81a      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d022      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004058:	d115      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405e:	3308      	adds	r3, #8
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f001 fa0e 	bl	8005484 <RCCEx_PLL2_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800406e:	e015      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004074:	3328      	adds	r3, #40	@ 0x28
 8004076:	2101      	movs	r1, #1
 8004078:	4618      	mov	r0, r3
 800407a:	f001 fab5 	bl	80055e8 <RCCEx_PLL3_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004084:	e00a      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800408c:	e006      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800408e:	bf00      	nop
 8004090:	e004      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004092:	bf00      	nop
 8004094:	e002      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800409a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10d      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040b2:	4a02      	ldr	r2, [pc, #8]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80040b8:	e006      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80040ba:	bf00      	nop
 80040bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80040d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4313      	orrs	r3, r2
 80040e6:	d055      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040f4:	d033      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80040f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040fa:	d82c      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004100:	d02f      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004106:	d826      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004108:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800410c:	d02b      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800410e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004112:	d820      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004118:	d012      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800411a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800411e:	d81a      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d022      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004124:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004128:	d115      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	3308      	adds	r3, #8
 8004130:	2101      	movs	r1, #1
 8004132:	4618      	mov	r0, r3
 8004134:	f001 f9a6 	bl	8005484 <RCCEx_PLL2_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800413e:	e015      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004144:	3328      	adds	r3, #40	@ 0x28
 8004146:	2101      	movs	r1, #1
 8004148:	4618      	mov	r0, r3
 800414a:	f001 fa4d 	bl	80055e8 <RCCEx_PLL3_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004154:	e00a      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800415c:	e006      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800415e:	bf00      	nop
 8004160:	e004      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800416a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004174:	4ba3      	ldr	r3, [pc, #652]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004178:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004180:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004184:	4a9f      	ldr	r2, [pc, #636]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004186:	430b      	orrs	r3, r1
 8004188:	6593      	str	r3, [r2, #88]	@ 0x58
 800418a:	e003      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80041a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80041aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041ae:	460b      	mov	r3, r1
 80041b0:	4313      	orrs	r3, r2
 80041b2:	d037      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041be:	d00e      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80041c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041c4:	d816      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d018      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80041ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041ce:	d111      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	4a8b      	ldr	r2, [pc, #556]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041dc:	e00f      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e2:	3308      	adds	r3, #8
 80041e4:	2101      	movs	r1, #1
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 f94c 	bl	8005484 <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041f2:	e004      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80041fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004206:	4b7f      	ldr	r3, [pc, #508]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800420a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004214:	4a7b      	ldr	r2, [pc, #492]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004216:	430b      	orrs	r3, r1
 8004218:	6513      	str	r3, [r2, #80]	@ 0x50
 800421a:	e003      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004230:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004234:	2300      	movs	r3, #0
 8004236:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800423a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800423e:	460b      	mov	r3, r1
 8004240:	4313      	orrs	r3, r2
 8004242:	d039      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424a:	2b03      	cmp	r3, #3
 800424c:	d81c      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800424e:	a201      	add	r2, pc, #4	@ (adr r2, 8004254 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	08004291 	.word	0x08004291
 8004258:	08004265 	.word	0x08004265
 800425c:	08004273 	.word	0x08004273
 8004260:	08004291 	.word	0x08004291
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004264:	4b67      	ldr	r3, [pc, #412]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004268:	4a66      	ldr	r2, [pc, #408]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800426a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800426e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004270:	e00f      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004276:	3308      	adds	r3, #8
 8004278:	2102      	movs	r1, #2
 800427a:	4618      	mov	r0, r3
 800427c:	f001 f902 	bl	8005484 <RCCEx_PLL2_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004286:	e004      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800428e:	e000      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800429a:	4b5a      	ldr	r3, [pc, #360]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800429c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429e:	f023 0103 	bic.w	r1, r3, #3
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a8:	4a56      	ldr	r2, [pc, #344]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ae:	e003      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80042c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80042d2:	460b      	mov	r3, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f000 809f 	beq.w	8004418 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042da:	4b4b      	ldr	r3, [pc, #300]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a4a      	ldr	r2, [pc, #296]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042e6:	f7fd faed 	bl	80018c4 <HAL_GetTick>
 80042ea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042ee:	e00b      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f0:	f7fd fae8 	bl	80018c4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b64      	cmp	r3, #100	@ 0x64
 80042fe:	d903      	bls.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004306:	e005      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004308:	4b3f      	ldr	r3, [pc, #252]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ed      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004318:	2b00      	cmp	r3, #0
 800431a:	d179      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800431c:	4b39      	ldr	r3, [pc, #228]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800431e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004324:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004328:	4053      	eors	r3, r2
 800432a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800432e:	2b00      	cmp	r3, #0
 8004330:	d015      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004332:	4b34      	ldr	r3, [pc, #208]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800433a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800433e:	4b31      	ldr	r3, [pc, #196]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	4a30      	ldr	r2, [pc, #192]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004348:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800434a:	4b2e      	ldr	r3, [pc, #184]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434e:	4a2d      	ldr	r2, [pc, #180]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004354:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004356:	4a2b      	ldr	r2, [pc, #172]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004358:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800435c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436a:	d118      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fd faaa 	bl	80018c4 <HAL_GetTick>
 8004370:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004374:	e00d      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004376:	f7fd faa5 	bl	80018c4 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004380:	1ad2      	subs	r2, r2, r3
 8004382:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004386:	429a      	cmp	r2, r3
 8004388:	d903      	bls.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004390:	e005      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004392:	4b1c      	ldr	r3, [pc, #112]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0eb      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800439e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d129      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b6:	d10e      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80043b8:	4b12      	ldr	r3, [pc, #72]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043c8:	091a      	lsrs	r2, r3, #4
 80043ca:	4b10      	ldr	r3, [pc, #64]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6113      	str	r3, [r2, #16]
 80043d4:	e005      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80043d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	4a0a      	ldr	r2, [pc, #40]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80043e0:	6113      	str	r3, [r2, #16]
 80043e2:	4b08      	ldr	r3, [pc, #32]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f2:	4a04      	ldr	r2, [pc, #16]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043f4:	430b      	orrs	r3, r1
 80043f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f8:	e00e      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004402:	e009      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004404:	58024400 	.word	0x58024400
 8004408:	58024800 	.word	0x58024800
 800440c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004414:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f002 0301 	and.w	r3, r2, #1
 8004424:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004428:	2300      	movs	r3, #0
 800442a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800442e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004432:	460b      	mov	r3, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	f000 8089 	beq.w	800454c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004440:	2b28      	cmp	r3, #40	@ 0x28
 8004442:	d86b      	bhi.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004444:	a201      	add	r2, pc, #4	@ (adr r2, 800444c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	08004525 	.word	0x08004525
 8004450:	0800451d 	.word	0x0800451d
 8004454:	0800451d 	.word	0x0800451d
 8004458:	0800451d 	.word	0x0800451d
 800445c:	0800451d 	.word	0x0800451d
 8004460:	0800451d 	.word	0x0800451d
 8004464:	0800451d 	.word	0x0800451d
 8004468:	0800451d 	.word	0x0800451d
 800446c:	080044f1 	.word	0x080044f1
 8004470:	0800451d 	.word	0x0800451d
 8004474:	0800451d 	.word	0x0800451d
 8004478:	0800451d 	.word	0x0800451d
 800447c:	0800451d 	.word	0x0800451d
 8004480:	0800451d 	.word	0x0800451d
 8004484:	0800451d 	.word	0x0800451d
 8004488:	0800451d 	.word	0x0800451d
 800448c:	08004507 	.word	0x08004507
 8004490:	0800451d 	.word	0x0800451d
 8004494:	0800451d 	.word	0x0800451d
 8004498:	0800451d 	.word	0x0800451d
 800449c:	0800451d 	.word	0x0800451d
 80044a0:	0800451d 	.word	0x0800451d
 80044a4:	0800451d 	.word	0x0800451d
 80044a8:	0800451d 	.word	0x0800451d
 80044ac:	08004525 	.word	0x08004525
 80044b0:	0800451d 	.word	0x0800451d
 80044b4:	0800451d 	.word	0x0800451d
 80044b8:	0800451d 	.word	0x0800451d
 80044bc:	0800451d 	.word	0x0800451d
 80044c0:	0800451d 	.word	0x0800451d
 80044c4:	0800451d 	.word	0x0800451d
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	08004525 	.word	0x08004525
 80044d0:	0800451d 	.word	0x0800451d
 80044d4:	0800451d 	.word	0x0800451d
 80044d8:	0800451d 	.word	0x0800451d
 80044dc:	0800451d 	.word	0x0800451d
 80044e0:	0800451d 	.word	0x0800451d
 80044e4:	0800451d 	.word	0x0800451d
 80044e8:	0800451d 	.word	0x0800451d
 80044ec:	08004525 	.word	0x08004525
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f4:	3308      	adds	r3, #8
 80044f6:	2101      	movs	r1, #1
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 ffc3 	bl	8005484 <RCCEx_PLL2_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004504:	e00f      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450a:	3328      	adds	r3, #40	@ 0x28
 800450c:	2101      	movs	r1, #1
 800450e:	4618      	mov	r0, r3
 8004510:	f001 f86a 	bl	80055e8 <RCCEx_PLL3_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800451a:	e004      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004522:	e000      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800452e:	4bbf      	ldr	r3, [pc, #764]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004532:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800453c:	4abb      	ldr	r2, [pc, #748]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800453e:	430b      	orrs	r3, r1
 8004540:	6553      	str	r3, [r2, #84]	@ 0x54
 8004542:	e003      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800454c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f002 0302 	and.w	r3, r2, #2
 8004558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004562:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004566:	460b      	mov	r3, r1
 8004568:	4313      	orrs	r3, r2
 800456a:	d041      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004572:	2b05      	cmp	r3, #5
 8004574:	d824      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004576:	a201      	add	r2, pc, #4	@ (adr r2, 800457c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457c:	080045c9 	.word	0x080045c9
 8004580:	08004595 	.word	0x08004595
 8004584:	080045ab 	.word	0x080045ab
 8004588:	080045c9 	.word	0x080045c9
 800458c:	080045c9 	.word	0x080045c9
 8004590:	080045c9 	.word	0x080045c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004598:	3308      	adds	r3, #8
 800459a:	2101      	movs	r1, #1
 800459c:	4618      	mov	r0, r3
 800459e:	f000 ff71 	bl	8005484 <RCCEx_PLL2_Config>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80045a8:	e00f      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ae:	3328      	adds	r3, #40	@ 0x28
 80045b0:	2101      	movs	r1, #1
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 f818 	bl	80055e8 <RCCEx_PLL3_Config>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80045be:	e004      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045c6:	e000      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80045c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80045d2:	4b96      	ldr	r3, [pc, #600]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d6:	f023 0107 	bic.w	r1, r3, #7
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045e0:	4a92      	ldr	r2, [pc, #584]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045e2:	430b      	orrs	r3, r1
 80045e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80045e6:	e003      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f002 0304 	and.w	r3, r2, #4
 80045fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004600:	2300      	movs	r3, #0
 8004602:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004606:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800460a:	460b      	mov	r3, r1
 800460c:	4313      	orrs	r3, r2
 800460e:	d044      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004618:	2b05      	cmp	r3, #5
 800461a:	d825      	bhi.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800461c:	a201      	add	r2, pc, #4	@ (adr r2, 8004624 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004671 	.word	0x08004671
 8004628:	0800463d 	.word	0x0800463d
 800462c:	08004653 	.word	0x08004653
 8004630:	08004671 	.word	0x08004671
 8004634:	08004671 	.word	0x08004671
 8004638:	08004671 	.word	0x08004671
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	3308      	adds	r3, #8
 8004642:	2101      	movs	r1, #1
 8004644:	4618      	mov	r0, r3
 8004646:	f000 ff1d 	bl	8005484 <RCCEx_PLL2_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004650:	e00f      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	3328      	adds	r3, #40	@ 0x28
 8004658:	2101      	movs	r1, #1
 800465a:	4618      	mov	r0, r3
 800465c:	f000 ffc4 	bl	80055e8 <RCCEx_PLL3_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004666:	e004      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800466e:	e000      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10b      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800467a:	4b6c      	ldr	r3, [pc, #432]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467e:	f023 0107 	bic.w	r1, r3, #7
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468a:	4a68      	ldr	r2, [pc, #416]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800468c:	430b      	orrs	r3, r1
 800468e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004690:	e003      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004696:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f002 0320 	and.w	r3, r2, #32
 80046a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d055      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046c6:	d033      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80046c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046cc:	d82c      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d2:	d02f      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d8:	d826      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80046de:	d02b      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80046e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80046e4:	d820      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046ea:	d012      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80046ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046f0:	d81a      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d022      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80046f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046fa:	d115      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004700:	3308      	adds	r3, #8
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f000 febd 	bl	8005484 <RCCEx_PLL2_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004710:	e015      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	3328      	adds	r3, #40	@ 0x28
 8004718:	2102      	movs	r1, #2
 800471a:	4618      	mov	r0, r3
 800471c:	f000 ff64 	bl	80055e8 <RCCEx_PLL3_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004726:	e00a      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800472e:	e006      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004730:	bf00      	nop
 8004732:	e004      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004734:	bf00      	nop
 8004736:	e002      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004738:	bf00      	nop
 800473a:	e000      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800473c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10b      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004746:	4b39      	ldr	r3, [pc, #228]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004756:	4a35      	ldr	r2, [pc, #212]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004758:	430b      	orrs	r3, r1
 800475a:	6553      	str	r3, [r2, #84]	@ 0x54
 800475c:	e003      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004776:	2300      	movs	r3, #0
 8004778:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800477c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004780:	460b      	mov	r3, r1
 8004782:	4313      	orrs	r3, r2
 8004784:	d058      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800478e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004792:	d033      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004794:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004798:	d82c      	bhi.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800479a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479e:	d02f      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80047a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a4:	d826      	bhi.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80047a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047aa:	d02b      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80047ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047b0:	d820      	bhi.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80047b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047b6:	d012      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80047b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047bc:	d81a      	bhi.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d022      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c6:	d115      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047cc:	3308      	adds	r3, #8
 80047ce:	2100      	movs	r1, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fe57 	bl	8005484 <RCCEx_PLL2_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047dc:	e015      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e2:	3328      	adds	r3, #40	@ 0x28
 80047e4:	2102      	movs	r1, #2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fefe 	bl	80055e8 <RCCEx_PLL3_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047f2:	e00a      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047fa:	e006      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047fc:	bf00      	nop
 80047fe:	e004      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004800:	bf00      	nop
 8004802:	e002      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004804:	bf00      	nop
 8004806:	e000      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800480a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10e      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004812:	4b06      	ldr	r3, [pc, #24]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004822:	4a02      	ldr	r2, [pc, #8]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004824:	430b      	orrs	r3, r1
 8004826:	6593      	str	r3, [r2, #88]	@ 0x58
 8004828:	e006      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800482a:	bf00      	nop
 800482c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004848:	2300      	movs	r3, #0
 800484a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800484e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d055      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004860:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004864:	d033      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004866:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800486a:	d82c      	bhi.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800486c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004870:	d02f      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004876:	d826      	bhi.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004878:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800487c:	d02b      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800487e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004882:	d820      	bhi.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004884:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004888:	d012      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800488a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800488e:	d81a      	bhi.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d022      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004898:	d115      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	3308      	adds	r3, #8
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fdee 	bl	8005484 <RCCEx_PLL2_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80048ae:	e015      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	3328      	adds	r3, #40	@ 0x28
 80048b6:	2102      	movs	r1, #2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fe95 	bl	80055e8 <RCCEx_PLL3_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80048c4:	e00a      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048cc:	e006      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80048ce:	bf00      	nop
 80048d0:	e004      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80048d2:	bf00      	nop
 80048d4:	e002      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80048d6:	bf00      	nop
 80048d8:	e000      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80048da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10b      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80048e4:	4ba1      	ldr	r3, [pc, #644]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048f4:	4a9d      	ldr	r2, [pc, #628]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048f6:	430b      	orrs	r3, r1
 80048f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80048fa:	e003      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	f002 0308 	and.w	r3, r2, #8
 8004910:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004914:	2300      	movs	r3, #0
 8004916:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800491a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800491e:	460b      	mov	r3, r1
 8004920:	4313      	orrs	r3, r2
 8004922:	d01e      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004930:	d10c      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004936:	3328      	adds	r3, #40	@ 0x28
 8004938:	2102      	movs	r1, #2
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fe54 	bl	80055e8 <RCCEx_PLL3_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800494c:	4b87      	ldr	r3, [pc, #540]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800494e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004950:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800495c:	4a83      	ldr	r2, [pc, #524]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800495e:	430b      	orrs	r3, r1
 8004960:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f002 0310 	and.w	r3, r2, #16
 800496e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004972:	2300      	movs	r3, #0
 8004974:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004978:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800497c:	460b      	mov	r3, r1
 800497e:	4313      	orrs	r3, r2
 8004980:	d01e      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004986:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800498a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800498e:	d10c      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004994:	3328      	adds	r3, #40	@ 0x28
 8004996:	2102      	movs	r1, #2
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fe25 	bl	80055e8 <RCCEx_PLL3_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049aa:	4b70      	ldr	r3, [pc, #448]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049ba:	4a6c      	ldr	r2, [pc, #432]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80049cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049d0:	2300      	movs	r3, #0
 80049d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80049da:	460b      	mov	r3, r1
 80049dc:	4313      	orrs	r3, r2
 80049de:	d03e      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80049e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049ec:	d022      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80049ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049f2:	d81b      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80049f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049fc:	d00b      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80049fe:	e015      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a04:	3308      	adds	r3, #8
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fd3b 	bl	8005484 <RCCEx_PLL2_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a14:	e00f      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1a:	3328      	adds	r3, #40	@ 0x28
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fde2 	bl	80055e8 <RCCEx_PLL3_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a2a:	e004      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a32:	e000      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10b      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a4e:	4a47      	ldr	r2, [pc, #284]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a54:	e003      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004a74:	460b      	mov	r3, r1
 8004a76:	4313      	orrs	r3, r2
 8004a78:	d03b      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a86:	d01f      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004a88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a8c:	d818      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a92:	d003      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004a94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a98:	d007      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004a9a:	e011      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9c:	4b33      	ldr	r3, [pc, #204]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	4a32      	ldr	r2, [pc, #200]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004aa8:	e00f      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aae:	3328      	adds	r3, #40	@ 0x28
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fd98 	bl	80055e8 <RCCEx_PLL3_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004abe:	e004      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ac6:	e000      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10b      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ad2:	4b26      	ldr	r3, [pc, #152]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae2:	4a22      	ldr	r2, [pc, #136]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ae8:	e003      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004afe:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b00:	2300      	movs	r3, #0
 8004b02:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	d034      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b1c:	d007      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004b1e:	e011      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b20:	4b12      	ldr	r3, [pc, #72]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b24:	4a11      	ldr	r2, [pc, #68]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b2c:	e00e      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	3308      	adds	r3, #8
 8004b34:	2102      	movs	r1, #2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fca4 	bl	8005484 <RCCEx_PLL2_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b42:	e003      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10d      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b54:	4b05      	ldr	r3, [pc, #20]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b62:	4a02      	ldr	r2, [pc, #8]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b64:	430b      	orrs	r3, r1
 8004b66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b68:	e006      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004b6a:	bf00      	nop
 8004b6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004b84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b86:	2300      	movs	r3, #0
 8004b88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4313      	orrs	r3, r2
 8004b92:	d00c      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b98:	3328      	adds	r3, #40	@ 0x28
 8004b9a:	2102      	movs	r1, #2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fd23 	bl	80055e8 <RCCEx_PLL3_Config>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004bba:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bc0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	d038      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bd6:	d018      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004bd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bdc:	d811      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be2:	d014      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be8:	d80b      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d011      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf4:	4bc3      	ldr	r3, [pc, #780]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	4ac2      	ldr	r2, [pc, #776]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c00:	e008      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c08:	e004      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c0a:	bf00      	nop
 8004c0c:	e002      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c0e:	bf00      	nop
 8004c10:	e000      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10b      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c1c:	4bb9      	ldr	r3, [pc, #740]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c2c:	4ab5      	ldr	r2, [pc, #724]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c32:	e003      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004c48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004c52:	460b      	mov	r3, r1
 8004c54:	4313      	orrs	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c58:	4baa      	ldr	r3, [pc, #680]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c66:	4aa7      	ldr	r2, [pc, #668]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004c78:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004c82:	460b      	mov	r3, r1
 8004c84:	4313      	orrs	r3, r2
 8004c86:	d00a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c88:	4b9e      	ldr	r3, [pc, #632]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c98:	4a9a      	ldr	r2, [pc, #616]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004caa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cac:	2300      	movs	r3, #0
 8004cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	d009      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cba:	4b92      	ldr	r3, [pc, #584]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cbe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cc8:	4a8e      	ldr	r2, [pc, #568]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cdc:	2300      	movs	r3, #0
 8004cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ce0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	d00e      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cea:	4b86      	ldr	r3, [pc, #536]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	4a85      	ldr	r2, [pc, #532]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cf0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004cf4:	6113      	str	r3, [r2, #16]
 8004cf6:	4b83      	ldr	r3, [pc, #524]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cf8:	6919      	ldr	r1, [r3, #16]
 8004cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004d02:	4a80      	ldr	r2, [pc, #512]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004d14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d16:	2300      	movs	r3, #0
 8004d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4313      	orrs	r3, r2
 8004d22:	d009      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d24:	4b77      	ldr	r3, [pc, #476]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d28:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d32:	4a74      	ldr	r2, [pc, #464]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d34:	430b      	orrs	r3, r1
 8004d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d46:	2300      	movs	r3, #0
 8004d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4313      	orrs	r3, r2
 8004d52:	d00a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d54:	4b6b      	ldr	r3, [pc, #428]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d58:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d64:	4a67      	ldr	r2, [pc, #412]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d66:	430b      	orrs	r3, r1
 8004d68:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	2100      	movs	r1, #0
 8004d74:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004d80:	460b      	mov	r3, r1
 8004d82:	4313      	orrs	r3, r2
 8004d84:	d011      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fb78 	bl	8005484 <RCCEx_PLL2_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	2100      	movs	r1, #0
 8004db4:	6239      	str	r1, [r7, #32]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	d011      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dca:	3308      	adds	r3, #8
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fb58 	bl	8005484 <RCCEx_PLL2_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	2100      	movs	r1, #0
 8004df4:	61b9      	str	r1, [r7, #24]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e00:	460b      	mov	r3, r1
 8004e02:	4313      	orrs	r3, r2
 8004e04:	d011      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fb38 	bl	8005484 <RCCEx_PLL2_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	2100      	movs	r1, #0
 8004e34:	6139      	str	r1, [r7, #16]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e40:	460b      	mov	r3, r1
 8004e42:	4313      	orrs	r3, r2
 8004e44:	d011      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4a:	3328      	adds	r3, #40	@ 0x28
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fbca 	bl	80055e8 <RCCEx_PLL3_Config>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	2100      	movs	r1, #0
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e80:	460b      	mov	r3, r1
 8004e82:	4313      	orrs	r3, r2
 8004e84:	d011      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8a:	3328      	adds	r3, #40	@ 0x28
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fbaa 	bl	80055e8 <RCCEx_PLL3_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	6039      	str	r1, [r7, #0]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	607b      	str	r3, [r7, #4]
 8004ebc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	d011      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eca:	3328      	adds	r3, #40	@ 0x28
 8004ecc:	2102      	movs	r1, #2
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fb8a 	bl	80055e8 <RCCEx_PLL3_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004eea:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e000      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004efe:	46bd      	mov	sp, r7
 8004f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f04:	58024400 	.word	0x58024400

08004f08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f0c:	f7fe fd54 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	091b      	lsrs	r3, r3, #4
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	4904      	ldr	r1, [pc, #16]	@ (8004f30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f1e:	5ccb      	ldrb	r3, [r1, r3]
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	58024400 	.word	0x58024400
 8004f30:	0800abac 	.word	0x0800abac

08004f34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	@ 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f3c:	4ba1      	ldr	r3, [pc, #644]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004f46:	4b9f      	ldr	r3, [pc, #636]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4a:	0b1b      	lsrs	r3, r3, #12
 8004f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f52:	4b9c      	ldr	r3, [pc, #624]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004f5e:	4b99      	ldr	r3, [pc, #612]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f62:	08db      	lsrs	r3, r3, #3
 8004f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8111 	beq.w	80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	f000 8083 	beq.w	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	f200 80a1 	bhi.w	80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d056      	beq.n	800504c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f9e:	e099      	b.n	80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fa0:	4b88      	ldr	r3, [pc, #544]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d02d      	beq.n	8005008 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fac:	4b85      	ldr	r3, [pc, #532]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	08db      	lsrs	r3, r3, #3
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	4a84      	ldr	r2, [pc, #528]	@ (80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fbc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	ee07 3a90 	vmov	s15, r3
 8004fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005002:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005006:	e087      	b.n	8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005012:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80051d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501a:	4b6a      	ldr	r3, [pc, #424]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502a:	ed97 6a03 	vldr	s12, [r7, #12]
 800502e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800503e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800504a:	e065      	b.n	8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005056:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800505a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505e:	4b59      	ldr	r3, [pc, #356]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005072:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800508e:	e043      	b.n	8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800509e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a2:	4b48      	ldr	r3, [pc, #288]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050d2:	e021      	b.n	8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e6:	4b37      	ldr	r3, [pc, #220]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800510a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800510e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005116:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005118:	4b2a      	ldr	r3, [pc, #168]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800511a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511c:	0a5b      	lsrs	r3, r3, #9
 800511e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800512e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005132:	edd7 6a07 	vldr	s13, [r7, #28]
 8005136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800513a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800513e:	ee17 2a90 	vmov	r2, s15
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005146:	4b1f      	ldr	r3, [pc, #124]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	0c1b      	lsrs	r3, r3, #16
 800514c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005150:	ee07 3a90 	vmov	s15, r3
 8005154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005158:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800515c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005160:	edd7 6a07 	vldr	s13, [r7, #28]
 8005164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800516c:	ee17 2a90 	vmov	r2, s15
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005174:	4b13      	ldr	r3, [pc, #76]	@ (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	0e1b      	lsrs	r3, r3, #24
 800517a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800518a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800518e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800519a:	ee17 2a90 	vmov	r2, s15
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80051a2:	e008      	b.n	80051b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	609a      	str	r2, [r3, #8]
}
 80051b6:	bf00      	nop
 80051b8:	3724      	adds	r7, #36	@ 0x24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	58024400 	.word	0x58024400
 80051c8:	03d09000 	.word	0x03d09000
 80051cc:	46000000 	.word	0x46000000
 80051d0:	4c742400 	.word	0x4c742400
 80051d4:	4a742400 	.word	0x4a742400
 80051d8:	4bbebc20 	.word	0x4bbebc20

080051dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80051dc:	b480      	push	{r7}
 80051de:	b089      	sub	sp, #36	@ 0x24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051e4:	4ba1      	ldr	r3, [pc, #644]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80051ee:	4b9f      	ldr	r3, [pc, #636]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f2:	0d1b      	lsrs	r3, r3, #20
 80051f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80051fa:	4b9c      	ldr	r3, [pc, #624]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	0a1b      	lsrs	r3, r3, #8
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005206:	4b99      	ldr	r3, [pc, #612]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520a:	08db      	lsrs	r3, r3, #3
 800520c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	fb02 f303 	mul.w	r3, r2, r3
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8111 	beq.w	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b02      	cmp	r3, #2
 800522e:	f000 8083 	beq.w	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b02      	cmp	r3, #2
 8005236:	f200 80a1 	bhi.w	800537c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d056      	beq.n	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005246:	e099      	b.n	800537c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005248:	4b88      	ldr	r3, [pc, #544]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02d      	beq.n	80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005254:	4b85      	ldr	r3, [pc, #532]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	08db      	lsrs	r3, r3, #3
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	4a84      	ldr	r2, [pc, #528]	@ (8005470 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
 8005264:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	ee07 3a90 	vmov	s15, r3
 800526c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527e:	4b7b      	ldr	r3, [pc, #492]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005292:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80052ae:	e087      	b.n	80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005478 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80052be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c2:	4b6a      	ldr	r3, [pc, #424]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052f2:	e065      	b.n	80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800547c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005306:	4b59      	ldr	r3, [pc, #356]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005316:	ed97 6a03 	vldr	s12, [r7, #12]
 800531a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800531e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800532a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005336:	e043      	b.n	80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005342:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534a:	4b48      	ldr	r3, [pc, #288]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535a:	ed97 6a03 	vldr	s12, [r7, #12]
 800535e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800536e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800537a:	e021      	b.n	80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800547c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800538a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538e:	4b37      	ldr	r3, [pc, #220]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539e:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80053c0:	4b2a      	ldr	r3, [pc, #168]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	0a5b      	lsrs	r3, r3, #9
 80053c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053da:	edd7 6a07 	vldr	s13, [r7, #28]
 80053de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e6:	ee17 2a90 	vmov	r2, s15
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80053ee:	4b1f      	ldr	r3, [pc, #124]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	0c1b      	lsrs	r3, r3, #16
 80053f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053f8:	ee07 3a90 	vmov	s15, r3
 80053fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005400:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005408:	edd7 6a07 	vldr	s13, [r7, #28]
 800540c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005414:	ee17 2a90 	vmov	r2, s15
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800541c:	4b13      	ldr	r3, [pc, #76]	@ (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	0e1b      	lsrs	r3, r3, #24
 8005422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005436:	edd7 6a07 	vldr	s13, [r7, #28]
 800543a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800543e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005442:	ee17 2a90 	vmov	r2, s15
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800544a:	e008      	b.n	800545e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	609a      	str	r2, [r3, #8]
}
 800545e:	bf00      	nop
 8005460:	3724      	adds	r7, #36	@ 0x24
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	58024400 	.word	0x58024400
 8005470:	03d09000 	.word	0x03d09000
 8005474:	46000000 	.word	0x46000000
 8005478:	4c742400 	.word	0x4c742400
 800547c:	4a742400 	.word	0x4a742400
 8005480:	4bbebc20 	.word	0x4bbebc20

08005484 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005492:	4b53      	ldr	r3, [pc, #332]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 8005494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	2b03      	cmp	r3, #3
 800549c:	d101      	bne.n	80054a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e099      	b.n	80055d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80054a2:	4b4f      	ldr	r3, [pc, #316]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a4e      	ldr	r2, [pc, #312]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 80054a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ae:	f7fc fa09 	bl	80018c4 <HAL_GetTick>
 80054b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054b4:	e008      	b.n	80054c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054b6:	f7fc fa05 	bl	80018c4 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e086      	b.n	80055d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054c8:	4b45      	ldr	r3, [pc, #276]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1f0      	bne.n	80054b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80054d4:	4b42      	ldr	r3, [pc, #264]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 80054d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	031b      	lsls	r3, r3, #12
 80054e2:	493f      	ldr	r1, [pc, #252]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	025b      	lsls	r3, r3, #9
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	3b01      	subs	r3, #1
 8005504:	041b      	lsls	r3, r3, #16
 8005506:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	3b01      	subs	r3, #1
 8005512:	061b      	lsls	r3, r3, #24
 8005514:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005518:	4931      	ldr	r1, [pc, #196]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 800551a:	4313      	orrs	r3, r2
 800551c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800551e:	4b30      	ldr	r3, [pc, #192]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 8005520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005522:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	492d      	ldr	r1, [pc, #180]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 800552c:	4313      	orrs	r3, r2
 800552e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005530:	4b2b      	ldr	r3, [pc, #172]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	f023 0220 	bic.w	r2, r3, #32
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	4928      	ldr	r1, [pc, #160]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 800553e:	4313      	orrs	r3, r2
 8005540:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005542:	4b27      	ldr	r3, [pc, #156]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 8005544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005546:	4a26      	ldr	r2, [pc, #152]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 8005548:	f023 0310 	bic.w	r3, r3, #16
 800554c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800554e:	4b24      	ldr	r3, [pc, #144]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 8005550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005552:	4b24      	ldr	r3, [pc, #144]	@ (80055e4 <RCCEx_PLL2_Config+0x160>)
 8005554:	4013      	ands	r3, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	69d2      	ldr	r2, [r2, #28]
 800555a:	00d2      	lsls	r2, r2, #3
 800555c:	4920      	ldr	r1, [pc, #128]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 800555e:	4313      	orrs	r3, r2
 8005560:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005562:	4b1f      	ldr	r3, [pc, #124]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 8005564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005566:	4a1e      	ldr	r2, [pc, #120]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 8005568:	f043 0310 	orr.w	r3, r3, #16
 800556c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005574:	4b1a      	ldr	r3, [pc, #104]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 8005576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005578:	4a19      	ldr	r2, [pc, #100]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 800557a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800557e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005580:	e00f      	b.n	80055a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d106      	bne.n	8005596 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005588:	4b15      	ldr	r3, [pc, #84]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	4a14      	ldr	r2, [pc, #80]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 800558e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005592:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005594:	e005      	b.n	80055a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005596:	4b12      	ldr	r3, [pc, #72]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	4a11      	ldr	r2, [pc, #68]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 800559c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80055a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80055a2:	4b0f      	ldr	r3, [pc, #60]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a0e      	ldr	r2, [pc, #56]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 80055a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ae:	f7fc f989 	bl	80018c4 <HAL_GetTick>
 80055b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055b4:	e008      	b.n	80055c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055b6:	f7fc f985 	bl	80018c4 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e006      	b.n	80055d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055c8:	4b05      	ldr	r3, [pc, #20]	@ (80055e0 <RCCEx_PLL2_Config+0x15c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f0      	beq.n	80055b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	58024400 	.word	0x58024400
 80055e4:	ffff0007 	.word	0xffff0007

080055e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055f6:	4b53      	ldr	r3, [pc, #332]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80055f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d101      	bne.n	8005606 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e099      	b.n	800573a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005606:	4b4f      	ldr	r3, [pc, #316]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a4e      	ldr	r2, [pc, #312]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 800560c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005612:	f7fc f957 	bl	80018c4 <HAL_GetTick>
 8005616:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005618:	e008      	b.n	800562c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800561a:	f7fc f953 	bl	80018c4 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e086      	b.n	800573a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800562c:	4b45      	ldr	r3, [pc, #276]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1f0      	bne.n	800561a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005638:	4b42      	ldr	r3, [pc, #264]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 800563a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	051b      	lsls	r3, r3, #20
 8005646:	493f      	ldr	r1, [pc, #252]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 8005648:	4313      	orrs	r3, r2
 800564a:	628b      	str	r3, [r1, #40]	@ 0x28
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	3b01      	subs	r3, #1
 8005652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	3b01      	subs	r3, #1
 800565c:	025b      	lsls	r3, r3, #9
 800565e:	b29b      	uxth	r3, r3
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	3b01      	subs	r3, #1
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	3b01      	subs	r3, #1
 8005676:	061b      	lsls	r3, r3, #24
 8005678:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800567c:	4931      	ldr	r1, [pc, #196]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 800567e:	4313      	orrs	r3, r2
 8005680:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005682:	4b30      	ldr	r3, [pc, #192]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	492d      	ldr	r1, [pc, #180]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 8005690:	4313      	orrs	r3, r2
 8005692:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005694:	4b2b      	ldr	r3, [pc, #172]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 8005696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005698:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	4928      	ldr	r1, [pc, #160]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80056a6:	4b27      	ldr	r3, [pc, #156]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80056a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056aa:	4a26      	ldr	r2, [pc, #152]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80056ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80056b2:	4b24      	ldr	r3, [pc, #144]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80056b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056b6:	4b24      	ldr	r3, [pc, #144]	@ (8005748 <RCCEx_PLL3_Config+0x160>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	69d2      	ldr	r2, [r2, #28]
 80056be:	00d2      	lsls	r2, r2, #3
 80056c0:	4920      	ldr	r1, [pc, #128]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80056c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80056cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d106      	bne.n	80056e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80056d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80056da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056dc:	4a19      	ldr	r2, [pc, #100]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80056de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80056e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056e4:	e00f      	b.n	8005706 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d106      	bne.n	80056fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80056ec:	4b15      	ldr	r3, [pc, #84]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	4a14      	ldr	r2, [pc, #80]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80056f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80056f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056f8:	e005      	b.n	8005706 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80056fa:	4b12      	ldr	r3, [pc, #72]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 80056fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fe:	4a11      	ldr	r2, [pc, #68]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 8005700:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005704:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005706:	4b0f      	ldr	r3, [pc, #60]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a0e      	ldr	r2, [pc, #56]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005712:	f7fc f8d7 	bl	80018c4 <HAL_GetTick>
 8005716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005718:	e008      	b.n	800572c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800571a:	f7fc f8d3 	bl	80018c4 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e006      	b.n	800573a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800572c:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <RCCEx_PLL3_Config+0x15c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	58024400 	.word	0x58024400
 8005748:	ffff0007 	.word	0xffff0007

0800574c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e10f      	b.n	800597e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a87      	ldr	r2, [pc, #540]	@ (8005988 <HAL_SPI_Init+0x23c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00f      	beq.n	800578e <HAL_SPI_Init+0x42>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a86      	ldr	r2, [pc, #536]	@ (800598c <HAL_SPI_Init+0x240>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00a      	beq.n	800578e <HAL_SPI_Init+0x42>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a84      	ldr	r2, [pc, #528]	@ (8005990 <HAL_SPI_Init+0x244>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d005      	beq.n	800578e <HAL_SPI_Init+0x42>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b0f      	cmp	r3, #15
 8005788:	d901      	bls.n	800578e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e0f7      	b.n	800597e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f900 	bl	8005994 <SPI_GetPacketSize>
 8005794:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a7b      	ldr	r2, [pc, #492]	@ (8005988 <HAL_SPI_Init+0x23c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00c      	beq.n	80057ba <HAL_SPI_Init+0x6e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a79      	ldr	r2, [pc, #484]	@ (800598c <HAL_SPI_Init+0x240>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d007      	beq.n	80057ba <HAL_SPI_Init+0x6e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a78      	ldr	r2, [pc, #480]	@ (8005990 <HAL_SPI_Init+0x244>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d002      	beq.n	80057ba <HAL_SPI_Init+0x6e>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d811      	bhi.n	80057de <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80057be:	4a72      	ldr	r2, [pc, #456]	@ (8005988 <HAL_SPI_Init+0x23c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a70      	ldr	r2, [pc, #448]	@ (800598c <HAL_SPI_Init+0x240>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_SPI_Init+0x8c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a6f      	ldr	r2, [pc, #444]	@ (8005990 <HAL_SPI_Init+0x244>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d104      	bne.n	80057e2 <HAL_SPI_Init+0x96>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b10      	cmp	r3, #16
 80057dc:	d901      	bls.n	80057e2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e0cd      	b.n	800597e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fb fd26 	bl	8001248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800581e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005828:	d119      	bne.n	800585e <HAL_SPI_Init+0x112>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005832:	d103      	bne.n	800583c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10c      	bne.n	800585e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005848:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800584c:	d107      	bne.n	800585e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800585c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00f      	beq.n	800588a <HAL_SPI_Init+0x13e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	2b06      	cmp	r3, #6
 8005870:	d90b      	bls.n	800588a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e007      	b.n	800589a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005898:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69da      	ldr	r2, [r3, #28]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a2:	431a      	orrs	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ac:	ea42 0103 	orr.w	r1, r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058fa:	ea42 0103 	orr.w	r1, r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d113      	bne.n	800593a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005924:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005938:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0201 	bic.w	r2, r2, #1
 8005948:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40013000 	.word	0x40013000
 800598c:	40003800 	.word	0x40003800
 8005990:	40003c00 	.word	0x40003c00

08005994 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	3301      	adds	r3, #1
 80059a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	3307      	adds	r3, #7
 80059b2:	08db      	lsrs	r3, r3, #3
 80059b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e049      	b.n	8005a70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d106      	bne.n	80059f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f841 	bl	8005a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2202      	movs	r2, #2
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3304      	adds	r3, #4
 8005a06:	4619      	mov	r1, r3
 8005a08:	4610      	mov	r0, r2
 8005a0a:	f000 f9e7 	bl	8005ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d001      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e054      	b.n	8005b4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a26      	ldr	r2, [pc, #152]	@ (8005b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d022      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ace:	d01d      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a22      	ldr	r2, [pc, #136]	@ (8005b60 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d018      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a21      	ldr	r2, [pc, #132]	@ (8005b64 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d013      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b68 <HAL_TIM_Base_Start_IT+0xdc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00e      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b6c <HAL_TIM_Base_Start_IT+0xe0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d009      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1c      	ldr	r2, [pc, #112]	@ (8005b70 <HAL_TIM_Base_Start_IT+0xe4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d004      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1b      	ldr	r2, [pc, #108]	@ (8005b74 <HAL_TIM_Base_Start_IT+0xe8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d115      	bne.n	8005b38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	4b19      	ldr	r3, [pc, #100]	@ (8005b78 <HAL_TIM_Base_Start_IT+0xec>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b06      	cmp	r3, #6
 8005b1c:	d015      	beq.n	8005b4a <HAL_TIM_Base_Start_IT+0xbe>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b24:	d011      	beq.n	8005b4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0201 	orr.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b36:	e008      	b.n	8005b4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	e000      	b.n	8005b4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40000c00 	.word	0x40000c00
 8005b6c:	40010400 	.word	0x40010400
 8005b70:	40001800 	.word	0x40001800
 8005b74:	40014000 	.word	0x40014000
 8005b78:	00010007 	.word	0x00010007

08005b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d020      	beq.n	8005be0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01b      	beq.n	8005be0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0202 	mvn.w	r2, #2
 8005bb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8e9 	bl	8005d9e <HAL_TIM_IC_CaptureCallback>
 8005bcc:	e005      	b.n	8005bda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8db 	bl	8005d8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f8ec 	bl	8005db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d020      	beq.n	8005c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01b      	beq.n	8005c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0204 	mvn.w	r2, #4
 8005bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f8c3 	bl	8005d9e <HAL_TIM_IC_CaptureCallback>
 8005c18:	e005      	b.n	8005c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f8b5 	bl	8005d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f8c6 	bl	8005db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d020      	beq.n	8005c78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01b      	beq.n	8005c78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0208 	mvn.w	r2, #8
 8005c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2204      	movs	r2, #4
 8005c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f89d 	bl	8005d9e <HAL_TIM_IC_CaptureCallback>
 8005c64:	e005      	b.n	8005c72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f88f 	bl	8005d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f8a0 	bl	8005db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d020      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01b      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0210 	mvn.w	r2, #16
 8005c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2208      	movs	r2, #8
 8005c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f877 	bl	8005d9e <HAL_TIM_IC_CaptureCallback>
 8005cb0:	e005      	b.n	8005cbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f869 	bl	8005d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f87a 	bl	8005db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00c      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d007      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0201 	mvn.w	r2, #1
 8005ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fb fa7a 	bl	80011dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d104      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00c      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f913 	bl	8005f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00c      	beq.n	8005d3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d007      	beq.n	8005d3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f90b 	bl	8005f50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00c      	beq.n	8005d5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f834 	bl	8005dc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00c      	beq.n	8005d82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f06f 0220 	mvn.w	r2, #32
 8005d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f8d3 	bl	8005f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
	...

08005ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a46      	ldr	r2, [pc, #280]	@ (8005f08 <TIM_Base_SetConfig+0x12c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d013      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dfa:	d00f      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a43      	ldr	r2, [pc, #268]	@ (8005f0c <TIM_Base_SetConfig+0x130>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00b      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a42      	ldr	r2, [pc, #264]	@ (8005f10 <TIM_Base_SetConfig+0x134>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a41      	ldr	r2, [pc, #260]	@ (8005f14 <TIM_Base_SetConfig+0x138>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a40      	ldr	r2, [pc, #256]	@ (8005f18 <TIM_Base_SetConfig+0x13c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d108      	bne.n	8005e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a35      	ldr	r2, [pc, #212]	@ (8005f08 <TIM_Base_SetConfig+0x12c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01f      	beq.n	8005e76 <TIM_Base_SetConfig+0x9a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3c:	d01b      	beq.n	8005e76 <TIM_Base_SetConfig+0x9a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a32      	ldr	r2, [pc, #200]	@ (8005f0c <TIM_Base_SetConfig+0x130>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d017      	beq.n	8005e76 <TIM_Base_SetConfig+0x9a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a31      	ldr	r2, [pc, #196]	@ (8005f10 <TIM_Base_SetConfig+0x134>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d013      	beq.n	8005e76 <TIM_Base_SetConfig+0x9a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a30      	ldr	r2, [pc, #192]	@ (8005f14 <TIM_Base_SetConfig+0x138>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00f      	beq.n	8005e76 <TIM_Base_SetConfig+0x9a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a2f      	ldr	r2, [pc, #188]	@ (8005f18 <TIM_Base_SetConfig+0x13c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00b      	beq.n	8005e76 <TIM_Base_SetConfig+0x9a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a2e      	ldr	r2, [pc, #184]	@ (8005f1c <TIM_Base_SetConfig+0x140>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d007      	beq.n	8005e76 <TIM_Base_SetConfig+0x9a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a2d      	ldr	r2, [pc, #180]	@ (8005f20 <TIM_Base_SetConfig+0x144>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d003      	beq.n	8005e76 <TIM_Base_SetConfig+0x9a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a2c      	ldr	r2, [pc, #176]	@ (8005f24 <TIM_Base_SetConfig+0x148>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d108      	bne.n	8005e88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a16      	ldr	r2, [pc, #88]	@ (8005f08 <TIM_Base_SetConfig+0x12c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00f      	beq.n	8005ed4 <TIM_Base_SetConfig+0xf8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a18      	ldr	r2, [pc, #96]	@ (8005f18 <TIM_Base_SetConfig+0x13c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00b      	beq.n	8005ed4 <TIM_Base_SetConfig+0xf8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a17      	ldr	r2, [pc, #92]	@ (8005f1c <TIM_Base_SetConfig+0x140>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d007      	beq.n	8005ed4 <TIM_Base_SetConfig+0xf8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a16      	ldr	r2, [pc, #88]	@ (8005f20 <TIM_Base_SetConfig+0x144>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_Base_SetConfig+0xf8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a15      	ldr	r2, [pc, #84]	@ (8005f24 <TIM_Base_SetConfig+0x148>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d103      	bne.n	8005edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d105      	bne.n	8005efa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f023 0201 	bic.w	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	611a      	str	r2, [r3, #16]
  }
}
 8005efa:	bf00      	nop
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40010400 	.word	0x40010400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	40014400 	.word	0x40014400
 8005f24:	40014800 	.word	0x40014800

08005f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e042      	b.n	8005ffc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d106      	bne.n	8005f8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7fb fa15 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2224      	movs	r2, #36	@ 0x24
 8005f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 0201 	bic.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f001 fac0 	bl	8007534 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fd55 	bl	8006a64 <UART_SetConfig>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e01b      	b.n	8005ffc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f001 fb3f 	bl	8007678 <UART_CheckIdleState>
 8005ffa:	4603      	mov	r3, r0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08a      	sub	sp, #40	@ 0x28
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	4613      	mov	r3, r2
 8006012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800601a:	2b20      	cmp	r3, #32
 800601c:	d17b      	bne.n	8006116 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_UART_Transmit+0x26>
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e074      	b.n	8006118 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2221      	movs	r2, #33	@ 0x21
 800603a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800603e:	f7fb fc41 	bl	80018c4 <HAL_GetTick>
 8006042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	88fa      	ldrh	r2, [r7, #6]
 8006048:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	88fa      	ldrh	r2, [r7, #6]
 8006050:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800605c:	d108      	bne.n	8006070 <HAL_UART_Transmit+0x6c>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	e003      	b.n	8006078 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006074:	2300      	movs	r3, #0
 8006076:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006078:	e030      	b.n	80060dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2200      	movs	r2, #0
 8006082:	2180      	movs	r1, #128	@ 0x80
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f001 fba1 	bl	80077cc <UART_WaitOnFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d005      	beq.n	800609c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2220      	movs	r2, #32
 8006094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e03d      	b.n	8006118 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10b      	bne.n	80060ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	3302      	adds	r3, #2
 80060b6:	61bb      	str	r3, [r7, #24]
 80060b8:	e007      	b.n	80060ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	781a      	ldrb	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	3301      	adds	r3, #1
 80060c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1c8      	bne.n	800607a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2200      	movs	r2, #0
 80060f0:	2140      	movs	r1, #64	@ 0x40
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f001 fb6a 	bl	80077cc <UART_WaitOnFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d005      	beq.n	800610a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e006      	b.n	8006118 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2220      	movs	r2, #32
 800610e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	e000      	b.n	8006118 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006116:	2302      	movs	r3, #2
  }
}
 8006118:	4618      	mov	r0, r3
 800611a:	3720      	adds	r7, #32
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	@ 0x28
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006136:	2b20      	cmp	r3, #32
 8006138:	f040 80b5 	bne.w	80062a6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <HAL_UART_Receive+0x28>
 8006142:	88fb      	ldrh	r3, [r7, #6]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0ad      	b.n	80062a8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2222      	movs	r2, #34	@ 0x22
 8006158:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006162:	f7fb fbaf 	bl	80018c4 <HAL_GetTick>
 8006166:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	88fa      	ldrh	r2, [r7, #6]
 800616c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	88fa      	ldrh	r2, [r7, #6]
 8006174:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006180:	d10e      	bne.n	80061a0 <HAL_UART_Receive+0x80>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <HAL_UART_Receive+0x76>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006190:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006194:	e02d      	b.n	80061f2 <HAL_UART_Receive+0xd2>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	22ff      	movs	r2, #255	@ 0xff
 800619a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800619e:	e028      	b.n	80061f2 <HAL_UART_Receive+0xd2>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10d      	bne.n	80061c4 <HAL_UART_Receive+0xa4>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <HAL_UART_Receive+0x9a>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	22ff      	movs	r2, #255	@ 0xff
 80061b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80061b8:	e01b      	b.n	80061f2 <HAL_UART_Receive+0xd2>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	227f      	movs	r2, #127	@ 0x7f
 80061be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80061c2:	e016      	b.n	80061f2 <HAL_UART_Receive+0xd2>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061cc:	d10d      	bne.n	80061ea <HAL_UART_Receive+0xca>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <HAL_UART_Receive+0xc0>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	227f      	movs	r2, #127	@ 0x7f
 80061da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80061de:	e008      	b.n	80061f2 <HAL_UART_Receive+0xd2>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	223f      	movs	r2, #63	@ 0x3f
 80061e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80061e8:	e003      	b.n	80061f2 <HAL_UART_Receive+0xd2>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80061f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006202:	d108      	bne.n	8006216 <HAL_UART_Receive+0xf6>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	e003      	b.n	800621e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800621e:	e036      	b.n	800628e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2200      	movs	r2, #0
 8006228:	2120      	movs	r1, #32
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f001 face 	bl	80077cc <UART_WaitOnFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e032      	b.n	80062a8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10c      	bne.n	8006262 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624e:	b29a      	uxth	r2, r3
 8006250:	8a7b      	ldrh	r3, [r7, #18]
 8006252:	4013      	ands	r3, r2
 8006254:	b29a      	uxth	r2, r3
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	3302      	adds	r3, #2
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e00c      	b.n	800627c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	b2da      	uxtb	r2, r3
 800626a:	8a7b      	ldrh	r3, [r7, #18]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	4013      	ands	r3, r2
 8006270:	b2da      	uxtb	r2, r3
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3301      	adds	r3, #1
 800627a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1c2      	bne.n	8006220 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2220      	movs	r2, #32
 800629e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e000      	b.n	80062a8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80062a6:	2302      	movs	r3, #2
  }
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3720      	adds	r7, #32
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b0ba      	sub	sp, #232	@ 0xe8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80062da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80062de:	4013      	ands	r3, r2
 80062e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80062e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d11b      	bne.n	8006324 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d015      	beq.n	8006324 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d105      	bne.n	8006310 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d009      	beq.n	8006324 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8377 	beq.w	8006a08 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
      }
      return;
 8006322:	e371      	b.n	8006a08 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 8123 	beq.w	8006574 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800632e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006332:	4b8d      	ldr	r3, [pc, #564]	@ (8006568 <HAL_UART_IRQHandler+0x2b8>)
 8006334:	4013      	ands	r3, r2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800633a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800633e:	4b8b      	ldr	r3, [pc, #556]	@ (800656c <HAL_UART_IRQHandler+0x2bc>)
 8006340:	4013      	ands	r3, r2
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 8116 	beq.w	8006574 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d011      	beq.n	8006378 <HAL_UART_IRQHandler+0xc8>
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2201      	movs	r2, #1
 8006366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636e:	f043 0201 	orr.w	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d011      	beq.n	80063a8 <HAL_UART_IRQHandler+0xf8>
 8006384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00b      	beq.n	80063a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2202      	movs	r2, #2
 8006396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639e:	f043 0204 	orr.w	r2, r3, #4
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d011      	beq.n	80063d8 <HAL_UART_IRQHandler+0x128>
 80063b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2204      	movs	r2, #4
 80063c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ce:	f043 0202 	orr.w	r2, r3, #2
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d017      	beq.n	8006414 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d105      	bne.n	80063fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80063f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80063f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006568 <HAL_UART_IRQHandler+0x2b8>)
 80063f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2208      	movs	r2, #8
 8006402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800640a:	f043 0208 	orr.w	r2, r3, #8
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800641c:	2b00      	cmp	r3, #0
 800641e:	d012      	beq.n	8006446 <HAL_UART_IRQHandler+0x196>
 8006420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006424:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00c      	beq.n	8006446 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006434:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643c:	f043 0220 	orr.w	r2, r3, #32
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 82dd 	beq.w	8006a0c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d013      	beq.n	8006486 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800645e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d105      	bne.n	8006476 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800646a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800646e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d007      	beq.n	8006486 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649a:	2b40      	cmp	r3, #64	@ 0x40
 800649c:	d005      	beq.n	80064aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800649e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d054      	beq.n	8006554 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 f9fc 	bl	80078a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ba:	2b40      	cmp	r3, #64	@ 0x40
 80064bc:	d146      	bne.n	800654c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3308      	adds	r3, #8
 80064e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1d9      	bne.n	80064be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006510:	2b00      	cmp	r3, #0
 8006512:	d017      	beq.n	8006544 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800651a:	4a15      	ldr	r2, [pc, #84]	@ (8006570 <HAL_UART_IRQHandler+0x2c0>)
 800651c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006524:	4618      	mov	r0, r3
 8006526:	f7fb fe5b 	bl	80021e0 <HAL_DMA_Abort_IT>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d019      	beq.n	8006564 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800653e:	4610      	mov	r0, r2
 8006540:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006542:	e00f      	b.n	8006564 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fa77 	bl	8006a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654a:	e00b      	b.n	8006564 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fa73 	bl	8006a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006552:	e007      	b.n	8006564 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fa6f 	bl	8006a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006562:	e253      	b.n	8006a0c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006564:	bf00      	nop
    return;
 8006566:	e251      	b.n	8006a0c <HAL_UART_IRQHandler+0x75c>
 8006568:	10000001 	.word	0x10000001
 800656c:	04000120 	.word	0x04000120
 8006570:	08007975 	.word	0x08007975

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006578:	2b01      	cmp	r3, #1
 800657a:	f040 81e7 	bne.w	800694c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800657e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 81e0 	beq.w	800694c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800658c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 81d9 	beq.w	800694c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2210      	movs	r2, #16
 80065a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ac:	2b40      	cmp	r3, #64	@ 0x40
 80065ae:	f040 8151 	bne.w	8006854 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a96      	ldr	r2, [pc, #600]	@ (8006814 <HAL_UART_IRQHandler+0x564>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d068      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a93      	ldr	r2, [pc, #588]	@ (8006818 <HAL_UART_IRQHandler+0x568>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d061      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a91      	ldr	r2, [pc, #580]	@ (800681c <HAL_UART_IRQHandler+0x56c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d05a      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a8e      	ldr	r2, [pc, #568]	@ (8006820 <HAL_UART_IRQHandler+0x570>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d053      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a8c      	ldr	r2, [pc, #560]	@ (8006824 <HAL_UART_IRQHandler+0x574>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d04c      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a89      	ldr	r2, [pc, #548]	@ (8006828 <HAL_UART_IRQHandler+0x578>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d045      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a87      	ldr	r2, [pc, #540]	@ (800682c <HAL_UART_IRQHandler+0x57c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d03e      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a84      	ldr	r2, [pc, #528]	@ (8006830 <HAL_UART_IRQHandler+0x580>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d037      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a82      	ldr	r2, [pc, #520]	@ (8006834 <HAL_UART_IRQHandler+0x584>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d030      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a7f      	ldr	r2, [pc, #508]	@ (8006838 <HAL_UART_IRQHandler+0x588>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d029      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a7d      	ldr	r2, [pc, #500]	@ (800683c <HAL_UART_IRQHandler+0x58c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d022      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a7a      	ldr	r2, [pc, #488]	@ (8006840 <HAL_UART_IRQHandler+0x590>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d01b      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a78      	ldr	r2, [pc, #480]	@ (8006844 <HAL_UART_IRQHandler+0x594>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d014      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a75      	ldr	r2, [pc, #468]	@ (8006848 <HAL_UART_IRQHandler+0x598>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00d      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a73      	ldr	r2, [pc, #460]	@ (800684c <HAL_UART_IRQHandler+0x59c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d006      	beq.n	8006692 <HAL_UART_IRQHandler+0x3e2>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a70      	ldr	r2, [pc, #448]	@ (8006850 <HAL_UART_IRQHandler+0x5a0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d106      	bne.n	80066a0 <HAL_UART_IRQHandler+0x3f0>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	b29b      	uxth	r3, r3
 800669e:	e005      	b.n	80066ac <HAL_UART_IRQHandler+0x3fc>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 81ab 	beq.w	8006a10 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066c4:	429a      	cmp	r2, r3
 80066c6:	f080 81a3 	bcs.w	8006a10 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066e0:	f000 8087 	beq.w	80067f2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006700:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800670e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006712:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800671a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800671e:	e841 2300 	strex	r3, r2, [r1]
 8006722:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006726:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1da      	bne.n	80066e4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3308      	adds	r3, #8
 8006734:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800673e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006740:	f023 0301 	bic.w	r3, r3, #1
 8006744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3308      	adds	r3, #8
 800674e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006752:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006756:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800675a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e1      	bne.n	800672e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3308      	adds	r3, #8
 8006770:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800677a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800677c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006780:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800678e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006790:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006794:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800679c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e3      	bne.n	800676a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067c0:	f023 0310 	bic.w	r3, r3, #16
 80067c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	461a      	mov	r2, r3
 80067ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e4      	bne.n	80067b0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fb f9d9 	bl	8001ba4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006804:	b29b      	uxth	r3, r3
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	b29b      	uxth	r3, r3
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f91d 	bl	8006a4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006812:	e0fd      	b.n	8006a10 <HAL_UART_IRQHandler+0x760>
 8006814:	40020010 	.word	0x40020010
 8006818:	40020028 	.word	0x40020028
 800681c:	40020040 	.word	0x40020040
 8006820:	40020058 	.word	0x40020058
 8006824:	40020070 	.word	0x40020070
 8006828:	40020088 	.word	0x40020088
 800682c:	400200a0 	.word	0x400200a0
 8006830:	400200b8 	.word	0x400200b8
 8006834:	40020410 	.word	0x40020410
 8006838:	40020428 	.word	0x40020428
 800683c:	40020440 	.word	0x40020440
 8006840:	40020458 	.word	0x40020458
 8006844:	40020470 	.word	0x40020470
 8006848:	40020488 	.word	0x40020488
 800684c:	400204a0 	.word	0x400204a0
 8006850:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006860:	b29b      	uxth	r3, r3
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80cf 	beq.w	8006a14 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006876:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80ca 	beq.w	8006a14 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800688e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006890:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006894:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80068a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80068a4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e4      	bne.n	8006880 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3308      	adds	r3, #8
 80068bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	623b      	str	r3, [r7, #32]
   return(result);
 80068c6:	6a3a      	ldr	r2, [r7, #32]
 80068c8:	4b55      	ldr	r3, [pc, #340]	@ (8006a20 <HAL_UART_IRQHandler+0x770>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3308      	adds	r3, #8
 80068d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068da:	633a      	str	r2, [r7, #48]	@ 0x30
 80068dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e3      	bne.n	80068b6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0310 	bic.w	r3, r3, #16
 8006916:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006924:	61fb      	str	r3, [r7, #28]
 8006926:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	69b9      	ldr	r1, [r7, #24]
 800692a:	69fa      	ldr	r2, [r7, #28]
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	617b      	str	r3, [r7, #20]
   return(result);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e4      	bne.n	8006902 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800693e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006942:	4619      	mov	r1, r3
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f881 	bl	8006a4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800694a:	e063      	b.n	8006a14 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800694c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006950:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00e      	beq.n	8006976 <HAL_UART_IRQHandler+0x6c6>
 8006958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800695c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800696c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 f8ac 	bl	8007acc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006974:	e051      	b.n	8006a1a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800697a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800697e:	2b00      	cmp	r3, #0
 8006980:	d014      	beq.n	80069ac <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800698a:	2b00      	cmp	r3, #0
 800698c:	d105      	bne.n	800699a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800698e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d03a      	beq.n	8006a18 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
    }
    return;
 80069aa:	e035      	b.n	8006a18 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <HAL_UART_IRQHandler+0x71c>
 80069b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 ffeb 	bl	80079a0 <UART_EndTransmit_IT>
    return;
 80069ca:	e026      	b.n	8006a1a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <HAL_UART_IRQHandler+0x73c>
 80069d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 f885 	bl	8007af4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069ea:	e016      	b.n	8006a1a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80069ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d010      	beq.n	8006a1a <HAL_UART_IRQHandler+0x76a>
 80069f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	da0c      	bge.n	8006a1a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 f86d 	bl	8007ae0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a06:	e008      	b.n	8006a1a <HAL_UART_IRQHandler+0x76a>
      return;
 8006a08:	bf00      	nop
 8006a0a:	e006      	b.n	8006a1a <HAL_UART_IRQHandler+0x76a>
    return;
 8006a0c:	bf00      	nop
 8006a0e:	e004      	b.n	8006a1a <HAL_UART_IRQHandler+0x76a>
      return;
 8006a10:	bf00      	nop
 8006a12:	e002      	b.n	8006a1a <HAL_UART_IRQHandler+0x76a>
      return;
 8006a14:	bf00      	nop
 8006a16:	e000      	b.n	8006a1a <HAL_UART_IRQHandler+0x76a>
    return;
 8006a18:	bf00      	nop
  }
}
 8006a1a:	37e8      	adds	r7, #232	@ 0xe8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	effffffe 	.word	0xeffffffe

08006a24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a68:	b092      	sub	sp, #72	@ 0x48
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4bbe      	ldr	r3, [pc, #760]	@ (8006d8c <UART_SetConfig+0x328>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	6812      	ldr	r2, [r2, #0]
 8006a9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4ab3      	ldr	r2, [pc, #716]	@ (8006d90 <UART_SetConfig+0x32c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006acc:	4313      	orrs	r3, r2
 8006ace:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	4baf      	ldr	r3, [pc, #700]	@ (8006d94 <UART_SetConfig+0x330>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aea:	f023 010f 	bic.w	r1, r3, #15
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4aa6      	ldr	r2, [pc, #664]	@ (8006d98 <UART_SetConfig+0x334>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d177      	bne.n	8006bf4 <UART_SetConfig+0x190>
 8006b04:	4ba5      	ldr	r3, [pc, #660]	@ (8006d9c <UART_SetConfig+0x338>)
 8006b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b0c:	2b28      	cmp	r3, #40	@ 0x28
 8006b0e:	d86d      	bhi.n	8006bec <UART_SetConfig+0x188>
 8006b10:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <UART_SetConfig+0xb4>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006bbd 	.word	0x08006bbd
 8006b1c:	08006bed 	.word	0x08006bed
 8006b20:	08006bed 	.word	0x08006bed
 8006b24:	08006bed 	.word	0x08006bed
 8006b28:	08006bed 	.word	0x08006bed
 8006b2c:	08006bed 	.word	0x08006bed
 8006b30:	08006bed 	.word	0x08006bed
 8006b34:	08006bed 	.word	0x08006bed
 8006b38:	08006bc5 	.word	0x08006bc5
 8006b3c:	08006bed 	.word	0x08006bed
 8006b40:	08006bed 	.word	0x08006bed
 8006b44:	08006bed 	.word	0x08006bed
 8006b48:	08006bed 	.word	0x08006bed
 8006b4c:	08006bed 	.word	0x08006bed
 8006b50:	08006bed 	.word	0x08006bed
 8006b54:	08006bed 	.word	0x08006bed
 8006b58:	08006bcd 	.word	0x08006bcd
 8006b5c:	08006bed 	.word	0x08006bed
 8006b60:	08006bed 	.word	0x08006bed
 8006b64:	08006bed 	.word	0x08006bed
 8006b68:	08006bed 	.word	0x08006bed
 8006b6c:	08006bed 	.word	0x08006bed
 8006b70:	08006bed 	.word	0x08006bed
 8006b74:	08006bed 	.word	0x08006bed
 8006b78:	08006bd5 	.word	0x08006bd5
 8006b7c:	08006bed 	.word	0x08006bed
 8006b80:	08006bed 	.word	0x08006bed
 8006b84:	08006bed 	.word	0x08006bed
 8006b88:	08006bed 	.word	0x08006bed
 8006b8c:	08006bed 	.word	0x08006bed
 8006b90:	08006bed 	.word	0x08006bed
 8006b94:	08006bed 	.word	0x08006bed
 8006b98:	08006bdd 	.word	0x08006bdd
 8006b9c:	08006bed 	.word	0x08006bed
 8006ba0:	08006bed 	.word	0x08006bed
 8006ba4:	08006bed 	.word	0x08006bed
 8006ba8:	08006bed 	.word	0x08006bed
 8006bac:	08006bed 	.word	0x08006bed
 8006bb0:	08006bed 	.word	0x08006bed
 8006bb4:	08006bed 	.word	0x08006bed
 8006bb8:	08006be5 	.word	0x08006be5
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc2:	e222      	b.n	800700a <UART_SetConfig+0x5a6>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bca:	e21e      	b.n	800700a <UART_SetConfig+0x5a6>
 8006bcc:	2308      	movs	r3, #8
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd2:	e21a      	b.n	800700a <UART_SetConfig+0x5a6>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bda:	e216      	b.n	800700a <UART_SetConfig+0x5a6>
 8006bdc:	2320      	movs	r3, #32
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be2:	e212      	b.n	800700a <UART_SetConfig+0x5a6>
 8006be4:	2340      	movs	r3, #64	@ 0x40
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bea:	e20e      	b.n	800700a <UART_SetConfig+0x5a6>
 8006bec:	2380      	movs	r3, #128	@ 0x80
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bf2:	e20a      	b.n	800700a <UART_SetConfig+0x5a6>
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a69      	ldr	r2, [pc, #420]	@ (8006da0 <UART_SetConfig+0x33c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d130      	bne.n	8006c60 <UART_SetConfig+0x1fc>
 8006bfe:	4b67      	ldr	r3, [pc, #412]	@ (8006d9c <UART_SetConfig+0x338>)
 8006c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2b05      	cmp	r3, #5
 8006c08:	d826      	bhi.n	8006c58 <UART_SetConfig+0x1f4>
 8006c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <UART_SetConfig+0x1ac>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c29 	.word	0x08006c29
 8006c14:	08006c31 	.word	0x08006c31
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006c41 	.word	0x08006c41
 8006c20:	08006c49 	.word	0x08006c49
 8006c24:	08006c51 	.word	0x08006c51
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2e:	e1ec      	b.n	800700a <UART_SetConfig+0x5a6>
 8006c30:	2304      	movs	r3, #4
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c36:	e1e8      	b.n	800700a <UART_SetConfig+0x5a6>
 8006c38:	2308      	movs	r3, #8
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3e:	e1e4      	b.n	800700a <UART_SetConfig+0x5a6>
 8006c40:	2310      	movs	r3, #16
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c46:	e1e0      	b.n	800700a <UART_SetConfig+0x5a6>
 8006c48:	2320      	movs	r3, #32
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4e:	e1dc      	b.n	800700a <UART_SetConfig+0x5a6>
 8006c50:	2340      	movs	r3, #64	@ 0x40
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c56:	e1d8      	b.n	800700a <UART_SetConfig+0x5a6>
 8006c58:	2380      	movs	r3, #128	@ 0x80
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5e:	e1d4      	b.n	800700a <UART_SetConfig+0x5a6>
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a4f      	ldr	r2, [pc, #316]	@ (8006da4 <UART_SetConfig+0x340>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d130      	bne.n	8006ccc <UART_SetConfig+0x268>
 8006c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8006d9c <UART_SetConfig+0x338>)
 8006c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	2b05      	cmp	r3, #5
 8006c74:	d826      	bhi.n	8006cc4 <UART_SetConfig+0x260>
 8006c76:	a201      	add	r2, pc, #4	@ (adr r2, 8006c7c <UART_SetConfig+0x218>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006c95 	.word	0x08006c95
 8006c80:	08006c9d 	.word	0x08006c9d
 8006c84:	08006ca5 	.word	0x08006ca5
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	2300      	movs	r3, #0
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9a:	e1b6      	b.n	800700a <UART_SetConfig+0x5a6>
 8006c9c:	2304      	movs	r3, #4
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca2:	e1b2      	b.n	800700a <UART_SetConfig+0x5a6>
 8006ca4:	2308      	movs	r3, #8
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006caa:	e1ae      	b.n	800700a <UART_SetConfig+0x5a6>
 8006cac:	2310      	movs	r3, #16
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb2:	e1aa      	b.n	800700a <UART_SetConfig+0x5a6>
 8006cb4:	2320      	movs	r3, #32
 8006cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cba:	e1a6      	b.n	800700a <UART_SetConfig+0x5a6>
 8006cbc:	2340      	movs	r3, #64	@ 0x40
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc2:	e1a2      	b.n	800700a <UART_SetConfig+0x5a6>
 8006cc4:	2380      	movs	r3, #128	@ 0x80
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cca:	e19e      	b.n	800700a <UART_SetConfig+0x5a6>
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a35      	ldr	r2, [pc, #212]	@ (8006da8 <UART_SetConfig+0x344>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d130      	bne.n	8006d38 <UART_SetConfig+0x2d4>
 8006cd6:	4b31      	ldr	r3, [pc, #196]	@ (8006d9c <UART_SetConfig+0x338>)
 8006cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	2b05      	cmp	r3, #5
 8006ce0:	d826      	bhi.n	8006d30 <UART_SetConfig+0x2cc>
 8006ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce8 <UART_SetConfig+0x284>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006d01 	.word	0x08006d01
 8006cec:	08006d09 	.word	0x08006d09
 8006cf0:	08006d11 	.word	0x08006d11
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d21 	.word	0x08006d21
 8006cfc:	08006d29 	.word	0x08006d29
 8006d00:	2300      	movs	r3, #0
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d06:	e180      	b.n	800700a <UART_SetConfig+0x5a6>
 8006d08:	2304      	movs	r3, #4
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0e:	e17c      	b.n	800700a <UART_SetConfig+0x5a6>
 8006d10:	2308      	movs	r3, #8
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d16:	e178      	b.n	800700a <UART_SetConfig+0x5a6>
 8006d18:	2310      	movs	r3, #16
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1e:	e174      	b.n	800700a <UART_SetConfig+0x5a6>
 8006d20:	2320      	movs	r3, #32
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d26:	e170      	b.n	800700a <UART_SetConfig+0x5a6>
 8006d28:	2340      	movs	r3, #64	@ 0x40
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d2e:	e16c      	b.n	800700a <UART_SetConfig+0x5a6>
 8006d30:	2380      	movs	r3, #128	@ 0x80
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d36:	e168      	b.n	800700a <UART_SetConfig+0x5a6>
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006dac <UART_SetConfig+0x348>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d142      	bne.n	8006dc8 <UART_SetConfig+0x364>
 8006d42:	4b16      	ldr	r3, [pc, #88]	@ (8006d9c <UART_SetConfig+0x338>)
 8006d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	2b05      	cmp	r3, #5
 8006d4c:	d838      	bhi.n	8006dc0 <UART_SetConfig+0x35c>
 8006d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d54 <UART_SetConfig+0x2f0>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d6d 	.word	0x08006d6d
 8006d58:	08006d75 	.word	0x08006d75
 8006d5c:	08006d7d 	.word	0x08006d7d
 8006d60:	08006d85 	.word	0x08006d85
 8006d64:	08006db1 	.word	0x08006db1
 8006d68:	08006db9 	.word	0x08006db9
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d72:	e14a      	b.n	800700a <UART_SetConfig+0x5a6>
 8006d74:	2304      	movs	r3, #4
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d7a:	e146      	b.n	800700a <UART_SetConfig+0x5a6>
 8006d7c:	2308      	movs	r3, #8
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d82:	e142      	b.n	800700a <UART_SetConfig+0x5a6>
 8006d84:	2310      	movs	r3, #16
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d8a:	e13e      	b.n	800700a <UART_SetConfig+0x5a6>
 8006d8c:	cfff69f3 	.word	0xcfff69f3
 8006d90:	58000c00 	.word	0x58000c00
 8006d94:	11fff4ff 	.word	0x11fff4ff
 8006d98:	40011000 	.word	0x40011000
 8006d9c:	58024400 	.word	0x58024400
 8006da0:	40004400 	.word	0x40004400
 8006da4:	40004800 	.word	0x40004800
 8006da8:	40004c00 	.word	0x40004c00
 8006dac:	40005000 	.word	0x40005000
 8006db0:	2320      	movs	r3, #32
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db6:	e128      	b.n	800700a <UART_SetConfig+0x5a6>
 8006db8:	2340      	movs	r3, #64	@ 0x40
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dbe:	e124      	b.n	800700a <UART_SetConfig+0x5a6>
 8006dc0:	2380      	movs	r3, #128	@ 0x80
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e120      	b.n	800700a <UART_SetConfig+0x5a6>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4acb      	ldr	r2, [pc, #812]	@ (80070fc <UART_SetConfig+0x698>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d176      	bne.n	8006ec0 <UART_SetConfig+0x45c>
 8006dd2:	4bcb      	ldr	r3, [pc, #812]	@ (8007100 <UART_SetConfig+0x69c>)
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dda:	2b28      	cmp	r3, #40	@ 0x28
 8006ddc:	d86c      	bhi.n	8006eb8 <UART_SetConfig+0x454>
 8006dde:	a201      	add	r2, pc, #4	@ (adr r2, 8006de4 <UART_SetConfig+0x380>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006e89 	.word	0x08006e89
 8006de8:	08006eb9 	.word	0x08006eb9
 8006dec:	08006eb9 	.word	0x08006eb9
 8006df0:	08006eb9 	.word	0x08006eb9
 8006df4:	08006eb9 	.word	0x08006eb9
 8006df8:	08006eb9 	.word	0x08006eb9
 8006dfc:	08006eb9 	.word	0x08006eb9
 8006e00:	08006eb9 	.word	0x08006eb9
 8006e04:	08006e91 	.word	0x08006e91
 8006e08:	08006eb9 	.word	0x08006eb9
 8006e0c:	08006eb9 	.word	0x08006eb9
 8006e10:	08006eb9 	.word	0x08006eb9
 8006e14:	08006eb9 	.word	0x08006eb9
 8006e18:	08006eb9 	.word	0x08006eb9
 8006e1c:	08006eb9 	.word	0x08006eb9
 8006e20:	08006eb9 	.word	0x08006eb9
 8006e24:	08006e99 	.word	0x08006e99
 8006e28:	08006eb9 	.word	0x08006eb9
 8006e2c:	08006eb9 	.word	0x08006eb9
 8006e30:	08006eb9 	.word	0x08006eb9
 8006e34:	08006eb9 	.word	0x08006eb9
 8006e38:	08006eb9 	.word	0x08006eb9
 8006e3c:	08006eb9 	.word	0x08006eb9
 8006e40:	08006eb9 	.word	0x08006eb9
 8006e44:	08006ea1 	.word	0x08006ea1
 8006e48:	08006eb9 	.word	0x08006eb9
 8006e4c:	08006eb9 	.word	0x08006eb9
 8006e50:	08006eb9 	.word	0x08006eb9
 8006e54:	08006eb9 	.word	0x08006eb9
 8006e58:	08006eb9 	.word	0x08006eb9
 8006e5c:	08006eb9 	.word	0x08006eb9
 8006e60:	08006eb9 	.word	0x08006eb9
 8006e64:	08006ea9 	.word	0x08006ea9
 8006e68:	08006eb9 	.word	0x08006eb9
 8006e6c:	08006eb9 	.word	0x08006eb9
 8006e70:	08006eb9 	.word	0x08006eb9
 8006e74:	08006eb9 	.word	0x08006eb9
 8006e78:	08006eb9 	.word	0x08006eb9
 8006e7c:	08006eb9 	.word	0x08006eb9
 8006e80:	08006eb9 	.word	0x08006eb9
 8006e84:	08006eb1 	.word	0x08006eb1
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e8e:	e0bc      	b.n	800700a <UART_SetConfig+0x5a6>
 8006e90:	2304      	movs	r3, #4
 8006e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e96:	e0b8      	b.n	800700a <UART_SetConfig+0x5a6>
 8006e98:	2308      	movs	r3, #8
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e9e:	e0b4      	b.n	800700a <UART_SetConfig+0x5a6>
 8006ea0:	2310      	movs	r3, #16
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea6:	e0b0      	b.n	800700a <UART_SetConfig+0x5a6>
 8006ea8:	2320      	movs	r3, #32
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eae:	e0ac      	b.n	800700a <UART_SetConfig+0x5a6>
 8006eb0:	2340      	movs	r3, #64	@ 0x40
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb6:	e0a8      	b.n	800700a <UART_SetConfig+0x5a6>
 8006eb8:	2380      	movs	r3, #128	@ 0x80
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ebe:	e0a4      	b.n	800700a <UART_SetConfig+0x5a6>
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a8f      	ldr	r2, [pc, #572]	@ (8007104 <UART_SetConfig+0x6a0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d130      	bne.n	8006f2c <UART_SetConfig+0x4c8>
 8006eca:	4b8d      	ldr	r3, [pc, #564]	@ (8007100 <UART_SetConfig+0x69c>)
 8006ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ece:	f003 0307 	and.w	r3, r3, #7
 8006ed2:	2b05      	cmp	r3, #5
 8006ed4:	d826      	bhi.n	8006f24 <UART_SetConfig+0x4c0>
 8006ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8006edc <UART_SetConfig+0x478>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006ef5 	.word	0x08006ef5
 8006ee0:	08006efd 	.word	0x08006efd
 8006ee4:	08006f05 	.word	0x08006f05
 8006ee8:	08006f0d 	.word	0x08006f0d
 8006eec:	08006f15 	.word	0x08006f15
 8006ef0:	08006f1d 	.word	0x08006f1d
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006efa:	e086      	b.n	800700a <UART_SetConfig+0x5a6>
 8006efc:	2304      	movs	r3, #4
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f02:	e082      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f04:	2308      	movs	r3, #8
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0a:	e07e      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f12:	e07a      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f14:	2320      	movs	r3, #32
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1a:	e076      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f1c:	2340      	movs	r3, #64	@ 0x40
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f22:	e072      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f24:	2380      	movs	r3, #128	@ 0x80
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2a:	e06e      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a75      	ldr	r2, [pc, #468]	@ (8007108 <UART_SetConfig+0x6a4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d130      	bne.n	8006f98 <UART_SetConfig+0x534>
 8006f36:	4b72      	ldr	r3, [pc, #456]	@ (8007100 <UART_SetConfig+0x69c>)
 8006f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3a:	f003 0307 	and.w	r3, r3, #7
 8006f3e:	2b05      	cmp	r3, #5
 8006f40:	d826      	bhi.n	8006f90 <UART_SetConfig+0x52c>
 8006f42:	a201      	add	r2, pc, #4	@ (adr r2, 8006f48 <UART_SetConfig+0x4e4>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006f61 	.word	0x08006f61
 8006f4c:	08006f69 	.word	0x08006f69
 8006f50:	08006f71 	.word	0x08006f71
 8006f54:	08006f79 	.word	0x08006f79
 8006f58:	08006f81 	.word	0x08006f81
 8006f5c:	08006f89 	.word	0x08006f89
 8006f60:	2300      	movs	r3, #0
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f66:	e050      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f68:	2304      	movs	r3, #4
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6e:	e04c      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f70:	2308      	movs	r3, #8
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f76:	e048      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f78:	2310      	movs	r3, #16
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7e:	e044      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f80:	2320      	movs	r3, #32
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f86:	e040      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f88:	2340      	movs	r3, #64	@ 0x40
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f8e:	e03c      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f90:	2380      	movs	r3, #128	@ 0x80
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f96:	e038      	b.n	800700a <UART_SetConfig+0x5a6>
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a5b      	ldr	r2, [pc, #364]	@ (800710c <UART_SetConfig+0x6a8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d130      	bne.n	8007004 <UART_SetConfig+0x5a0>
 8006fa2:	4b57      	ldr	r3, [pc, #348]	@ (8007100 <UART_SetConfig+0x69c>)
 8006fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa6:	f003 0307 	and.w	r3, r3, #7
 8006faa:	2b05      	cmp	r3, #5
 8006fac:	d826      	bhi.n	8006ffc <UART_SetConfig+0x598>
 8006fae:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb4 <UART_SetConfig+0x550>)
 8006fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb4:	08006fcd 	.word	0x08006fcd
 8006fb8:	08006fd5 	.word	0x08006fd5
 8006fbc:	08006fdd 	.word	0x08006fdd
 8006fc0:	08006fe5 	.word	0x08006fe5
 8006fc4:	08006fed 	.word	0x08006fed
 8006fc8:	08006ff5 	.word	0x08006ff5
 8006fcc:	2302      	movs	r3, #2
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd2:	e01a      	b.n	800700a <UART_SetConfig+0x5a6>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fda:	e016      	b.n	800700a <UART_SetConfig+0x5a6>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe2:	e012      	b.n	800700a <UART_SetConfig+0x5a6>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fea:	e00e      	b.n	800700a <UART_SetConfig+0x5a6>
 8006fec:	2320      	movs	r3, #32
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ff2:	e00a      	b.n	800700a <UART_SetConfig+0x5a6>
 8006ff4:	2340      	movs	r3, #64	@ 0x40
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ffa:	e006      	b.n	800700a <UART_SetConfig+0x5a6>
 8006ffc:	2380      	movs	r3, #128	@ 0x80
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007002:	e002      	b.n	800700a <UART_SetConfig+0x5a6>
 8007004:	2380      	movs	r3, #128	@ 0x80
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a3f      	ldr	r2, [pc, #252]	@ (800710c <UART_SetConfig+0x6a8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	f040 80f8 	bne.w	8007206 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007016:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800701a:	2b20      	cmp	r3, #32
 800701c:	dc46      	bgt.n	80070ac <UART_SetConfig+0x648>
 800701e:	2b02      	cmp	r3, #2
 8007020:	f2c0 8082 	blt.w	8007128 <UART_SetConfig+0x6c4>
 8007024:	3b02      	subs	r3, #2
 8007026:	2b1e      	cmp	r3, #30
 8007028:	d87e      	bhi.n	8007128 <UART_SetConfig+0x6c4>
 800702a:	a201      	add	r2, pc, #4	@ (adr r2, 8007030 <UART_SetConfig+0x5cc>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	080070b3 	.word	0x080070b3
 8007034:	08007129 	.word	0x08007129
 8007038:	080070bb 	.word	0x080070bb
 800703c:	08007129 	.word	0x08007129
 8007040:	08007129 	.word	0x08007129
 8007044:	08007129 	.word	0x08007129
 8007048:	080070cb 	.word	0x080070cb
 800704c:	08007129 	.word	0x08007129
 8007050:	08007129 	.word	0x08007129
 8007054:	08007129 	.word	0x08007129
 8007058:	08007129 	.word	0x08007129
 800705c:	08007129 	.word	0x08007129
 8007060:	08007129 	.word	0x08007129
 8007064:	08007129 	.word	0x08007129
 8007068:	080070db 	.word	0x080070db
 800706c:	08007129 	.word	0x08007129
 8007070:	08007129 	.word	0x08007129
 8007074:	08007129 	.word	0x08007129
 8007078:	08007129 	.word	0x08007129
 800707c:	08007129 	.word	0x08007129
 8007080:	08007129 	.word	0x08007129
 8007084:	08007129 	.word	0x08007129
 8007088:	08007129 	.word	0x08007129
 800708c:	08007129 	.word	0x08007129
 8007090:	08007129 	.word	0x08007129
 8007094:	08007129 	.word	0x08007129
 8007098:	08007129 	.word	0x08007129
 800709c:	08007129 	.word	0x08007129
 80070a0:	08007129 	.word	0x08007129
 80070a4:	08007129 	.word	0x08007129
 80070a8:	0800711b 	.word	0x0800711b
 80070ac:	2b40      	cmp	r3, #64	@ 0x40
 80070ae:	d037      	beq.n	8007120 <UART_SetConfig+0x6bc>
 80070b0:	e03a      	b.n	8007128 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80070b2:	f7fd ff29 	bl	8004f08 <HAL_RCCEx_GetD3PCLK1Freq>
 80070b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80070b8:	e03c      	b.n	8007134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fd ff38 	bl	8004f34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c8:	e034      	b.n	8007134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ca:	f107 0318 	add.w	r3, r7, #24
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe f884 	bl	80051dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070d8:	e02c      	b.n	8007134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070da:	4b09      	ldr	r3, [pc, #36]	@ (8007100 <UART_SetConfig+0x69c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d016      	beq.n	8007114 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070e6:	4b06      	ldr	r3, [pc, #24]	@ (8007100 <UART_SetConfig+0x69c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	08db      	lsrs	r3, r3, #3
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	4a07      	ldr	r2, [pc, #28]	@ (8007110 <UART_SetConfig+0x6ac>)
 80070f2:	fa22 f303 	lsr.w	r3, r2, r3
 80070f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070f8:	e01c      	b.n	8007134 <UART_SetConfig+0x6d0>
 80070fa:	bf00      	nop
 80070fc:	40011400 	.word	0x40011400
 8007100:	58024400 	.word	0x58024400
 8007104:	40007800 	.word	0x40007800
 8007108:	40007c00 	.word	0x40007c00
 800710c:	58000c00 	.word	0x58000c00
 8007110:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007114:	4b9d      	ldr	r3, [pc, #628]	@ (800738c <UART_SetConfig+0x928>)
 8007116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007118:	e00c      	b.n	8007134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800711a:	4b9d      	ldr	r3, [pc, #628]	@ (8007390 <UART_SetConfig+0x92c>)
 800711c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800711e:	e009      	b.n	8007134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007120:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007126:	e005      	b.n	8007134 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007132:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 81de 	beq.w	80074f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007140:	4a94      	ldr	r2, [pc, #592]	@ (8007394 <UART_SetConfig+0x930>)
 8007142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007146:	461a      	mov	r2, r3
 8007148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714a:	fbb3 f3f2 	udiv	r3, r3, r2
 800714e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	4613      	mov	r3, r2
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	4413      	add	r3, r2
 800715a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800715c:	429a      	cmp	r2, r3
 800715e:	d305      	bcc.n	800716c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007168:	429a      	cmp	r2, r3
 800716a:	d903      	bls.n	8007174 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007172:	e1c1      	b.n	80074f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007176:	2200      	movs	r2, #0
 8007178:	60bb      	str	r3, [r7, #8]
 800717a:	60fa      	str	r2, [r7, #12]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007180:	4a84      	ldr	r2, [pc, #528]	@ (8007394 <UART_SetConfig+0x930>)
 8007182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007186:	b29b      	uxth	r3, r3
 8007188:	2200      	movs	r2, #0
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	607a      	str	r2, [r7, #4]
 800718e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007192:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007196:	f7f9 f8a3 	bl	80002e0 <__aeabi_uldivmod>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4610      	mov	r0, r2
 80071a0:	4619      	mov	r1, r3
 80071a2:	f04f 0200 	mov.w	r2, #0
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	020b      	lsls	r3, r1, #8
 80071ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80071b0:	0202      	lsls	r2, r0, #8
 80071b2:	6979      	ldr	r1, [r7, #20]
 80071b4:	6849      	ldr	r1, [r1, #4]
 80071b6:	0849      	lsrs	r1, r1, #1
 80071b8:	2000      	movs	r0, #0
 80071ba:	460c      	mov	r4, r1
 80071bc:	4605      	mov	r5, r0
 80071be:	eb12 0804 	adds.w	r8, r2, r4
 80071c2:	eb43 0905 	adc.w	r9, r3, r5
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	469a      	mov	sl, r3
 80071ce:	4693      	mov	fp, r2
 80071d0:	4652      	mov	r2, sl
 80071d2:	465b      	mov	r3, fp
 80071d4:	4640      	mov	r0, r8
 80071d6:	4649      	mov	r1, r9
 80071d8:	f7f9 f882 	bl	80002e0 <__aeabi_uldivmod>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4613      	mov	r3, r2
 80071e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ea:	d308      	bcc.n	80071fe <UART_SetConfig+0x79a>
 80071ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071f2:	d204      	bcs.n	80071fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071fa:	60da      	str	r2, [r3, #12]
 80071fc:	e17c      	b.n	80074f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007204:	e178      	b.n	80074f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800720e:	f040 80c5 	bne.w	800739c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007212:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007216:	2b20      	cmp	r3, #32
 8007218:	dc48      	bgt.n	80072ac <UART_SetConfig+0x848>
 800721a:	2b00      	cmp	r3, #0
 800721c:	db7b      	blt.n	8007316 <UART_SetConfig+0x8b2>
 800721e:	2b20      	cmp	r3, #32
 8007220:	d879      	bhi.n	8007316 <UART_SetConfig+0x8b2>
 8007222:	a201      	add	r2, pc, #4	@ (adr r2, 8007228 <UART_SetConfig+0x7c4>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	080072b3 	.word	0x080072b3
 800722c:	080072bb 	.word	0x080072bb
 8007230:	08007317 	.word	0x08007317
 8007234:	08007317 	.word	0x08007317
 8007238:	080072c3 	.word	0x080072c3
 800723c:	08007317 	.word	0x08007317
 8007240:	08007317 	.word	0x08007317
 8007244:	08007317 	.word	0x08007317
 8007248:	080072d3 	.word	0x080072d3
 800724c:	08007317 	.word	0x08007317
 8007250:	08007317 	.word	0x08007317
 8007254:	08007317 	.word	0x08007317
 8007258:	08007317 	.word	0x08007317
 800725c:	08007317 	.word	0x08007317
 8007260:	08007317 	.word	0x08007317
 8007264:	08007317 	.word	0x08007317
 8007268:	080072e3 	.word	0x080072e3
 800726c:	08007317 	.word	0x08007317
 8007270:	08007317 	.word	0x08007317
 8007274:	08007317 	.word	0x08007317
 8007278:	08007317 	.word	0x08007317
 800727c:	08007317 	.word	0x08007317
 8007280:	08007317 	.word	0x08007317
 8007284:	08007317 	.word	0x08007317
 8007288:	08007317 	.word	0x08007317
 800728c:	08007317 	.word	0x08007317
 8007290:	08007317 	.word	0x08007317
 8007294:	08007317 	.word	0x08007317
 8007298:	08007317 	.word	0x08007317
 800729c:	08007317 	.word	0x08007317
 80072a0:	08007317 	.word	0x08007317
 80072a4:	08007317 	.word	0x08007317
 80072a8:	08007309 	.word	0x08007309
 80072ac:	2b40      	cmp	r3, #64	@ 0x40
 80072ae:	d02e      	beq.n	800730e <UART_SetConfig+0x8aa>
 80072b0:	e031      	b.n	8007316 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b2:	f7fc fbb1 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 80072b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80072b8:	e033      	b.n	8007322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072ba:	f7fc fbc3 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 80072be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80072c0:	e02f      	b.n	8007322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fd fe34 	bl	8004f34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d0:	e027      	b.n	8007322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072d2:	f107 0318 	add.w	r3, r7, #24
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fd ff80 	bl	80051dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072e0:	e01f      	b.n	8007322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072e2:	4b2d      	ldr	r3, [pc, #180]	@ (8007398 <UART_SetConfig+0x934>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d009      	beq.n	8007302 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007398 <UART_SetConfig+0x934>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	08db      	lsrs	r3, r3, #3
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	4a24      	ldr	r2, [pc, #144]	@ (800738c <UART_SetConfig+0x928>)
 80072fa:	fa22 f303 	lsr.w	r3, r2, r3
 80072fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007300:	e00f      	b.n	8007322 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007302:	4b22      	ldr	r3, [pc, #136]	@ (800738c <UART_SetConfig+0x928>)
 8007304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007306:	e00c      	b.n	8007322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007308:	4b21      	ldr	r3, [pc, #132]	@ (8007390 <UART_SetConfig+0x92c>)
 800730a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800730c:	e009      	b.n	8007322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007314:	e005      	b.n	8007322 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007320:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 80e7 	beq.w	80074f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732e:	4a19      	ldr	r2, [pc, #100]	@ (8007394 <UART_SetConfig+0x930>)
 8007330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007334:	461a      	mov	r2, r3
 8007336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007338:	fbb3 f3f2 	udiv	r3, r3, r2
 800733c:	005a      	lsls	r2, r3, #1
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	085b      	lsrs	r3, r3, #1
 8007344:	441a      	add	r2, r3
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	fbb2 f3f3 	udiv	r3, r2, r3
 800734e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007352:	2b0f      	cmp	r3, #15
 8007354:	d916      	bls.n	8007384 <UART_SetConfig+0x920>
 8007356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800735c:	d212      	bcs.n	8007384 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	b29b      	uxth	r3, r3
 8007362:	f023 030f 	bic.w	r3, r3, #15
 8007366:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736a:	085b      	lsrs	r3, r3, #1
 800736c:	b29b      	uxth	r3, r3
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	b29a      	uxth	r2, r3
 8007374:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007376:	4313      	orrs	r3, r2
 8007378:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007380:	60da      	str	r2, [r3, #12]
 8007382:	e0b9      	b.n	80074f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800738a:	e0b5      	b.n	80074f8 <UART_SetConfig+0xa94>
 800738c:	03d09000 	.word	0x03d09000
 8007390:	003d0900 	.word	0x003d0900
 8007394:	0800abbc 	.word	0x0800abbc
 8007398:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800739c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	dc49      	bgt.n	8007438 <UART_SetConfig+0x9d4>
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	db7c      	blt.n	80074a2 <UART_SetConfig+0xa3e>
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d87a      	bhi.n	80074a2 <UART_SetConfig+0xa3e>
 80073ac:	a201      	add	r2, pc, #4	@ (adr r2, 80073b4 <UART_SetConfig+0x950>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	0800743f 	.word	0x0800743f
 80073b8:	08007447 	.word	0x08007447
 80073bc:	080074a3 	.word	0x080074a3
 80073c0:	080074a3 	.word	0x080074a3
 80073c4:	0800744f 	.word	0x0800744f
 80073c8:	080074a3 	.word	0x080074a3
 80073cc:	080074a3 	.word	0x080074a3
 80073d0:	080074a3 	.word	0x080074a3
 80073d4:	0800745f 	.word	0x0800745f
 80073d8:	080074a3 	.word	0x080074a3
 80073dc:	080074a3 	.word	0x080074a3
 80073e0:	080074a3 	.word	0x080074a3
 80073e4:	080074a3 	.word	0x080074a3
 80073e8:	080074a3 	.word	0x080074a3
 80073ec:	080074a3 	.word	0x080074a3
 80073f0:	080074a3 	.word	0x080074a3
 80073f4:	0800746f 	.word	0x0800746f
 80073f8:	080074a3 	.word	0x080074a3
 80073fc:	080074a3 	.word	0x080074a3
 8007400:	080074a3 	.word	0x080074a3
 8007404:	080074a3 	.word	0x080074a3
 8007408:	080074a3 	.word	0x080074a3
 800740c:	080074a3 	.word	0x080074a3
 8007410:	080074a3 	.word	0x080074a3
 8007414:	080074a3 	.word	0x080074a3
 8007418:	080074a3 	.word	0x080074a3
 800741c:	080074a3 	.word	0x080074a3
 8007420:	080074a3 	.word	0x080074a3
 8007424:	080074a3 	.word	0x080074a3
 8007428:	080074a3 	.word	0x080074a3
 800742c:	080074a3 	.word	0x080074a3
 8007430:	080074a3 	.word	0x080074a3
 8007434:	08007495 	.word	0x08007495
 8007438:	2b40      	cmp	r3, #64	@ 0x40
 800743a:	d02e      	beq.n	800749a <UART_SetConfig+0xa36>
 800743c:	e031      	b.n	80074a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800743e:	f7fc faeb 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8007442:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007444:	e033      	b.n	80074ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007446:	f7fc fafd 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 800744a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800744c:	e02f      	b.n	80074ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800744e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007452:	4618      	mov	r0, r3
 8007454:	f7fd fd6e 	bl	8004f34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800745c:	e027      	b.n	80074ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800745e:	f107 0318 	add.w	r3, r7, #24
 8007462:	4618      	mov	r0, r3
 8007464:	f7fd feba 	bl	80051dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800746c:	e01f      	b.n	80074ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800746e:	4b2d      	ldr	r3, [pc, #180]	@ (8007524 <UART_SetConfig+0xac0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d009      	beq.n	800748e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800747a:	4b2a      	ldr	r3, [pc, #168]	@ (8007524 <UART_SetConfig+0xac0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	08db      	lsrs	r3, r3, #3
 8007480:	f003 0303 	and.w	r3, r3, #3
 8007484:	4a28      	ldr	r2, [pc, #160]	@ (8007528 <UART_SetConfig+0xac4>)
 8007486:	fa22 f303 	lsr.w	r3, r2, r3
 800748a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800748c:	e00f      	b.n	80074ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800748e:	4b26      	ldr	r3, [pc, #152]	@ (8007528 <UART_SetConfig+0xac4>)
 8007490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007492:	e00c      	b.n	80074ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007494:	4b25      	ldr	r3, [pc, #148]	@ (800752c <UART_SetConfig+0xac8>)
 8007496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007498:	e009      	b.n	80074ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800749a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800749e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074a0:	e005      	b.n	80074ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80074ac:	bf00      	nop
    }

    if (pclk != 0U)
 80074ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d021      	beq.n	80074f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007530 <UART_SetConfig+0xacc>)
 80074ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074be:	461a      	mov	r2, r3
 80074c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	085b      	lsrs	r3, r3, #1
 80074cc:	441a      	add	r2, r3
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074da:	2b0f      	cmp	r3, #15
 80074dc:	d909      	bls.n	80074f2 <UART_SetConfig+0xa8e>
 80074de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074e4:	d205      	bcs.n	80074f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60da      	str	r2, [r3, #12]
 80074f0:	e002      	b.n	80074f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2201      	movs	r2, #1
 8007504:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2200      	movs	r2, #0
 800750c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2200      	movs	r2, #0
 8007512:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007514:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007518:	4618      	mov	r0, r3
 800751a:	3748      	adds	r7, #72	@ 0x48
 800751c:	46bd      	mov	sp, r7
 800751e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007522:	bf00      	nop
 8007524:	58024400 	.word	0x58024400
 8007528:	03d09000 	.word	0x03d09000
 800752c:	003d0900 	.word	0x003d0900
 8007530:	0800abbc 	.word	0x0800abbc

08007534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007540:	f003 0308 	and.w	r3, r3, #8
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00a      	beq.n	80075e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ea:	f003 0320 	and.w	r3, r3, #32
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01a      	beq.n	800764a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007632:	d10a      	bne.n	800764a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800764e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	605a      	str	r2, [r3, #4]
  }
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b098      	sub	sp, #96	@ 0x60
 800767c:	af02      	add	r7, sp, #8
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007688:	f7fa f91c 	bl	80018c4 <HAL_GetTick>
 800768c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0308 	and.w	r3, r3, #8
 8007698:	2b08      	cmp	r3, #8
 800769a:	d12f      	bne.n	80076fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800769c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076a4:	2200      	movs	r2, #0
 80076a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f88e 	bl	80077cc <UART_WaitOnFlagUntilTimeout>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d022      	beq.n	80076fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	461a      	mov	r2, r3
 80076d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e6      	bne.n	80076b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e063      	b.n	80077c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0304 	and.w	r3, r3, #4
 8007706:	2b04      	cmp	r3, #4
 8007708:	d149      	bne.n	800779e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800770a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007712:	2200      	movs	r2, #0
 8007714:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f857 	bl	80077cc <UART_WaitOnFlagUntilTimeout>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d03c      	beq.n	800779e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	623b      	str	r3, [r7, #32]
   return(result);
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007742:	633b      	str	r3, [r7, #48]	@ 0x30
 8007744:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e6      	bne.n	8007724 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3308      	adds	r3, #8
 800775c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	60fb      	str	r3, [r7, #12]
   return(result);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f023 0301 	bic.w	r3, r3, #1
 800776c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3308      	adds	r3, #8
 8007774:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007776:	61fa      	str	r2, [r7, #28]
 8007778:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	69b9      	ldr	r1, [r7, #24]
 800777c:	69fa      	ldr	r2, [r7, #28]
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	617b      	str	r3, [r7, #20]
   return(result);
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e5      	bne.n	8007756 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e012      	b.n	80077c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3758      	adds	r7, #88	@ 0x58
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	4613      	mov	r3, r2
 80077da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077dc:	e04f      	b.n	800787e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d04b      	beq.n	800787e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e6:	f7fa f86d 	bl	80018c4 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d302      	bcc.n	80077fc <UART_WaitOnFlagUntilTimeout+0x30>
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e04e      	b.n	800789e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	2b00      	cmp	r3, #0
 800780c:	d037      	beq.n	800787e <UART_WaitOnFlagUntilTimeout+0xb2>
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b80      	cmp	r3, #128	@ 0x80
 8007812:	d034      	beq.n	800787e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b40      	cmp	r3, #64	@ 0x40
 8007818:	d031      	beq.n	800787e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b08      	cmp	r3, #8
 8007826:	d110      	bne.n	800784a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2208      	movs	r2, #8
 800782e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 f839 	bl	80078a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2208      	movs	r2, #8
 800783a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e029      	b.n	800789e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007858:	d111      	bne.n	800787e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007862:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f81f 	bl	80078a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2220      	movs	r2, #32
 800786e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e00f      	b.n	800789e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4013      	ands	r3, r2
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	429a      	cmp	r2, r3
 800788c:	bf0c      	ite	eq
 800788e:	2301      	moveq	r3, #1
 8007890:	2300      	movne	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	461a      	mov	r2, r3
 8007896:	79fb      	ldrb	r3, [r7, #7]
 8007898:	429a      	cmp	r2, r3
 800789a:	d0a0      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b095      	sub	sp, #84	@ 0x54
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80078d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e6      	bne.n	80078b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80078f2:	69fa      	ldr	r2, [r7, #28]
 80078f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007970 <UART_EndRxTransfer+0xc8>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3308      	adds	r3, #8
 8007900:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007902:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007904:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e5      	bne.n	80078e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800791a:	2b01      	cmp	r3, #1
 800791c:	d118      	bne.n	8007950 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	60bb      	str	r3, [r7, #8]
   return(result);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f023 0310 	bic.w	r3, r3, #16
 8007932:	647b      	str	r3, [r7, #68]	@ 0x44
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6979      	ldr	r1, [r7, #20]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	613b      	str	r3, [r7, #16]
   return(result);
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e6      	bne.n	800791e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2220      	movs	r2, #32
 8007954:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007964:	bf00      	nop
 8007966:	3754      	adds	r7, #84	@ 0x54
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	effffffe 	.word	0xeffffffe

08007974 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007980:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f7ff f850 	bl	8006a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007998:	bf00      	nop
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079bc:	61fb      	str	r3, [r7, #28]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	61bb      	str	r3, [r7, #24]
 80079c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	6979      	ldr	r1, [r7, #20]
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	613b      	str	r3, [r7, #16]
   return(result);
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e6      	bne.n	80079a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2220      	movs	r2, #32
 80079de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff f81b 	bl	8006a24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ee:	bf00      	nop
 80079f0:	3720      	adds	r7, #32
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e056      	b.n	8007abe <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d106      	bne.n	8007a28 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f7f9 fcc8 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2224      	movs	r2, #36	@ 0x24
 8007a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0201 	bic.w	r2, r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f7ff fd73 	bl	8007534 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7ff f808 	bl	8006a64 <UART_SetConfig>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e02f      	b.n	8007abe <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689a      	ldr	r2, [r3, #8]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a6c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	055b      	lsls	r3, r3, #21
 8007a86:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	041b      	lsls	r3, r3, #16
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac8 <HAL_RS485Ex_Init+0xd0>)
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	6979      	ldr	r1, [r7, #20]
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f042 0201 	orr.w	r2, r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f7ff fdde 	bl	8007678 <UART_CheckIdleState>
 8007abc:	4603      	mov	r3, r0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	fc00ffff 	.word	0xfc00ffff

08007acc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d101      	bne.n	8007b1e <HAL_UARTEx_DisableFifoMode+0x16>
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	e027      	b.n	8007b6e <HAL_UARTEx_DisableFifoMode+0x66>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2224      	movs	r2, #36	@ 0x24
 8007b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0201 	bic.w	r2, r2, #1
 8007b44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e02d      	b.n	8007bee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2224      	movs	r2, #36	@ 0x24
 8007b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0201 	bic.w	r2, r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f850 	bl	8007c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d101      	bne.n	8007c0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	e02d      	b.n	8007c6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2224      	movs	r2, #36	@ 0x24
 8007c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0201 	bic.w	r2, r2, #1
 8007c34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f812 	bl	8007c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d108      	bne.n	8007c96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c94:	e031      	b.n	8007cfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c96:	2310      	movs	r3, #16
 8007c98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c9a:	2310      	movs	r3, #16
 8007c9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	0e5b      	lsrs	r3, r3, #25
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	0f5b      	lsrs	r3, r3, #29
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	7b3a      	ldrb	r2, [r7, #12]
 8007cc2:	4911      	ldr	r1, [pc, #68]	@ (8007d08 <UARTEx_SetNbDataToProcess+0x94>)
 8007cc4:	5c8a      	ldrb	r2, [r1, r2]
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cca:	7b3a      	ldrb	r2, [r7, #12]
 8007ccc:	490f      	ldr	r1, [pc, #60]	@ (8007d0c <UARTEx_SetNbDataToProcess+0x98>)
 8007cce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	7b7a      	ldrb	r2, [r7, #13]
 8007ce0:	4909      	ldr	r1, [pc, #36]	@ (8007d08 <UARTEx_SetNbDataToProcess+0x94>)
 8007ce2:	5c8a      	ldrb	r2, [r1, r2]
 8007ce4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ce8:	7b7a      	ldrb	r2, [r7, #13]
 8007cea:	4908      	ldr	r1, [pc, #32]	@ (8007d0c <UARTEx_SetNbDataToProcess+0x98>)
 8007cec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cee:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007cfa:	bf00      	nop
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	0800abd4 	.word	0x0800abd4
 8007d0c:	0800abdc 	.word	0x0800abdc

08007d10 <__NVIC_SetPriority>:
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	6039      	str	r1, [r7, #0]
 8007d1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	db0a      	blt.n	8007d3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	490c      	ldr	r1, [pc, #48]	@ (8007d5c <__NVIC_SetPriority+0x4c>)
 8007d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d2e:	0112      	lsls	r2, r2, #4
 8007d30:	b2d2      	uxtb	r2, r2
 8007d32:	440b      	add	r3, r1
 8007d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007d38:	e00a      	b.n	8007d50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	4908      	ldr	r1, [pc, #32]	@ (8007d60 <__NVIC_SetPriority+0x50>)
 8007d40:	88fb      	ldrh	r3, [r7, #6]
 8007d42:	f003 030f 	and.w	r3, r3, #15
 8007d46:	3b04      	subs	r3, #4
 8007d48:	0112      	lsls	r2, r2, #4
 8007d4a:	b2d2      	uxtb	r2, r2
 8007d4c:	440b      	add	r3, r1
 8007d4e:	761a      	strb	r2, [r3, #24]
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	e000e100 	.word	0xe000e100
 8007d60:	e000ed00 	.word	0xe000ed00

08007d64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007d68:	4b05      	ldr	r3, [pc, #20]	@ (8007d80 <SysTick_Handler+0x1c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007d6c:	f001 fe20 	bl	80099b0 <xTaskGetSchedulerState>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d001      	beq.n	8007d7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007d76:	f002 fc17 	bl	800a5a8 <xPortSysTickHandler>
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	e000e010 	.word	0xe000e010

08007d84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007d88:	2100      	movs	r1, #0
 8007d8a:	f06f 0004 	mvn.w	r0, #4
 8007d8e:	f7ff ffbf 	bl	8007d10 <__NVIC_SetPriority>
#endif
}
 8007d92:	bf00      	nop
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d9e:	f3ef 8305 	mrs	r3, IPSR
 8007da2:	603b      	str	r3, [r7, #0]
  return(result);
 8007da4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007daa:	f06f 0305 	mvn.w	r3, #5
 8007dae:	607b      	str	r3, [r7, #4]
 8007db0:	e00c      	b.n	8007dcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007db2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ddc <osKernelInitialize+0x44>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d105      	bne.n	8007dc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007dba:	4b08      	ldr	r3, [pc, #32]	@ (8007ddc <osKernelInitialize+0x44>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	607b      	str	r3, [r7, #4]
 8007dc4:	e002      	b.n	8007dcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007dcc:	687b      	ldr	r3, [r7, #4]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	240002ec 	.word	0x240002ec

08007de0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007de6:	f3ef 8305 	mrs	r3, IPSR
 8007dea:	603b      	str	r3, [r7, #0]
  return(result);
 8007dec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <osKernelStart+0x1a>
    stat = osErrorISR;
 8007df2:	f06f 0305 	mvn.w	r3, #5
 8007df6:	607b      	str	r3, [r7, #4]
 8007df8:	e010      	b.n	8007e1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8007e28 <osKernelStart+0x48>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d109      	bne.n	8007e16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e02:	f7ff ffbf 	bl	8007d84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e06:	4b08      	ldr	r3, [pc, #32]	@ (8007e28 <osKernelStart+0x48>)
 8007e08:	2202      	movs	r2, #2
 8007e0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e0c:	f001 f982 	bl	8009114 <vTaskStartScheduler>
      stat = osOK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	607b      	str	r3, [r7, #4]
 8007e14:	e002      	b.n	8007e1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007e16:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e1c:	687b      	ldr	r3, [r7, #4]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	240002ec 	.word	0x240002ec

08007e2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08e      	sub	sp, #56	@ 0x38
 8007e30:	af04      	add	r7, sp, #16
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e3c:	f3ef 8305 	mrs	r3, IPSR
 8007e40:	617b      	str	r3, [r7, #20]
  return(result);
 8007e42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d17e      	bne.n	8007f46 <osThreadNew+0x11a>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d07b      	beq.n	8007f46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e4e:	2380      	movs	r3, #128	@ 0x80
 8007e50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e52:	2318      	movs	r3, #24
 8007e54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d045      	beq.n	8007ef2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <osThreadNew+0x48>
        name = attr->name;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d008      	beq.n	8007e9a <osThreadNew+0x6e>
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	2b38      	cmp	r3, #56	@ 0x38
 8007e8c:	d805      	bhi.n	8007e9a <osThreadNew+0x6e>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <osThreadNew+0x72>
        return (NULL);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e054      	b.n	8007f48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	089b      	lsrs	r3, r3, #2
 8007eac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00e      	beq.n	8007ed4 <osThreadNew+0xa8>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	2b5b      	cmp	r3, #91	@ 0x5b
 8007ebc:	d90a      	bls.n	8007ed4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d006      	beq.n	8007ed4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <osThreadNew+0xa8>
        mem = 1;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	61bb      	str	r3, [r7, #24]
 8007ed2:	e010      	b.n	8007ef6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10c      	bne.n	8007ef6 <osThreadNew+0xca>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d108      	bne.n	8007ef6 <osThreadNew+0xca>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d104      	bne.n	8007ef6 <osThreadNew+0xca>
          mem = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	e001      	b.n	8007ef6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d110      	bne.n	8007f1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f04:	9202      	str	r2, [sp, #8]
 8007f06:	9301      	str	r3, [sp, #4]
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	6a3a      	ldr	r2, [r7, #32]
 8007f10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 fe1a 	bl	8008b4c <xTaskCreateStatic>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	e013      	b.n	8007f46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d110      	bne.n	8007f46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	f107 0310 	add.w	r3, r7, #16
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 fe68 	bl	8008c0c <xTaskCreate>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d001      	beq.n	8007f46 <osThreadNew+0x11a>
            hTask = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f46:	693b      	ldr	r3, [r7, #16]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3728      	adds	r7, #40	@ 0x28
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f58:	f3ef 8305 	mrs	r3, IPSR
 8007f5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <osDelay+0x1c>
    stat = osErrorISR;
 8007f64:	f06f 0305 	mvn.w	r3, #5
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	e007      	b.n	8007f7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 ff8e 	bl	8008e98 <vTaskDelay>
    }
  }

  return (stat);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4a07      	ldr	r2, [pc, #28]	@ (8007fb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	4a06      	ldr	r2, [pc, #24]	@ (8007fb8 <vApplicationGetIdleTaskMemory+0x30>)
 8007f9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2280      	movs	r2, #128	@ 0x80
 8007fa4:	601a      	str	r2, [r3, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	240002f0 	.word	0x240002f0
 8007fb8:	2400034c 	.word	0x2400034c

08007fbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4a07      	ldr	r2, [pc, #28]	@ (8007fe8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007fcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4a06      	ldr	r2, [pc, #24]	@ (8007fec <vApplicationGetTimerTaskMemory+0x30>)
 8007fd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fda:	601a      	str	r2, [r3, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	2400054c 	.word	0x2400054c
 8007fec:	240005a8 	.word	0x240005a8

08007ff0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f103 0208 	add.w	r2, r3, #8
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f04f 32ff 	mov.w	r2, #4294967295
 8008008:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f103 0208 	add.w	r2, r3, #8
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f103 0208 	add.w	r2, r3, #8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	601a      	str	r2, [r3, #0]
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008092:	b480      	push	{r7}
 8008094:	b085      	sub	sp, #20
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d103      	bne.n	80080b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	e00c      	b.n	80080cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3308      	adds	r3, #8
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	e002      	b.n	80080c0 <vListInsert+0x2e>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d2f6      	bcs.n	80080ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	601a      	str	r2, [r3, #0]
}
 80080f8:	bf00      	nop
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	6892      	ldr	r2, [r2, #8]
 800811a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6852      	ldr	r2, [r2, #4]
 8008124:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	429a      	cmp	r2, r3
 800812e:	d103      	bne.n	8008138 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	1e5a      	subs	r2, r3, #1
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10b      	bne.n	8008184 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800817e:	bf00      	nop
 8008180:	bf00      	nop
 8008182:	e7fd      	b.n	8008180 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008184:	f002 f980 	bl	800a488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008190:	68f9      	ldr	r1, [r7, #12]
 8008192:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008194:	fb01 f303 	mul.w	r3, r1, r3
 8008198:	441a      	add	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b4:	3b01      	subs	r3, #1
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081ba:	fb01 f303 	mul.w	r3, r1, r3
 80081be:	441a      	add	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	22ff      	movs	r2, #255	@ 0xff
 80081c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	22ff      	movs	r2, #255	@ 0xff
 80081d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d114      	bne.n	8008204 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d01a      	beq.n	8008218 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3310      	adds	r3, #16
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fa22 	bl	8009630 <xTaskRemoveFromEventList>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d012      	beq.n	8008218 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008228 <xQueueGenericReset+0xd0>)
 80081f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	e009      	b.n	8008218 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3310      	adds	r3, #16
 8008208:	4618      	mov	r0, r3
 800820a:	f7ff fef1 	bl	8007ff0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3324      	adds	r3, #36	@ 0x24
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff feec 	bl	8007ff0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008218:	f002 f968 	bl	800a4ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800821c:	2301      	movs	r3, #1
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08e      	sub	sp, #56	@ 0x38
 8008230:	af02      	add	r7, sp, #8
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10b      	bne.n	8008258 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	e7fd      	b.n	8008254 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	e7fd      	b.n	8008272 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <xQueueGenericCreateStatic+0x56>
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <xQueueGenericCreateStatic+0x5a>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <xQueueGenericCreateStatic+0x5c>
 8008286:	2300      	movs	r3, #0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10b      	bne.n	80082a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	623b      	str	r3, [r7, #32]
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	e7fd      	b.n	80082a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d102      	bne.n	80082b0 <xQueueGenericCreateStatic+0x84>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <xQueueGenericCreateStatic+0x88>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e000      	b.n	80082b6 <xQueueGenericCreateStatic+0x8a>
 80082b4:	2300      	movs	r3, #0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10b      	bne.n	80082d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	61fb      	str	r3, [r7, #28]
}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	e7fd      	b.n	80082ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082d2:	2350      	movs	r3, #80	@ 0x50
 80082d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b50      	cmp	r3, #80	@ 0x50
 80082da:	d00b      	beq.n	80082f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	61bb      	str	r3, [r7, #24]
}
 80082ee:	bf00      	nop
 80082f0:	bf00      	nop
 80082f2:	e7fd      	b.n	80082f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80082fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00d      	beq.n	800831c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008308:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800830c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	4613      	mov	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f805 	bl	8008326 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800831c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800831e:	4618      	mov	r0, r3
 8008320:	3730      	adds	r7, #48	@ 0x30
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	607a      	str	r2, [r7, #4]
 8008332:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d103      	bne.n	8008342 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	e002      	b.n	8008348 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008354:	2101      	movs	r1, #1
 8008356:	69b8      	ldr	r0, [r7, #24]
 8008358:	f7ff fefe 	bl	8008158 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	78fa      	ldrb	r2, [r7, #3]
 8008360:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008364:	bf00      	nop
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08e      	sub	sp, #56	@ 0x38
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800837a:	2300      	movs	r3, #0
 800837c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10b      	bne.n	80083a0 <xQueueGenericSend+0x34>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800839a:	bf00      	nop
 800839c:	bf00      	nop
 800839e:	e7fd      	b.n	800839c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d103      	bne.n	80083ae <xQueueGenericSend+0x42>
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <xQueueGenericSend+0x46>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e000      	b.n	80083b4 <xQueueGenericSend+0x48>
 80083b2:	2300      	movs	r3, #0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10b      	bne.n	80083d0 <xQueueGenericSend+0x64>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	e7fd      	b.n	80083cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d103      	bne.n	80083de <xQueueGenericSend+0x72>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <xQueueGenericSend+0x76>
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <xQueueGenericSend+0x78>
 80083e2:	2300      	movs	r3, #0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10b      	bne.n	8008400 <xQueueGenericSend+0x94>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	623b      	str	r3, [r7, #32]
}
 80083fa:	bf00      	nop
 80083fc:	bf00      	nop
 80083fe:	e7fd      	b.n	80083fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008400:	f001 fad6 	bl	80099b0 <xTaskGetSchedulerState>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <xQueueGenericSend+0xa4>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <xQueueGenericSend+0xa8>
 8008410:	2301      	movs	r3, #1
 8008412:	e000      	b.n	8008416 <xQueueGenericSend+0xaa>
 8008414:	2300      	movs	r3, #0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10b      	bne.n	8008432 <xQueueGenericSend+0xc6>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	61fb      	str	r3, [r7, #28]
}
 800842c:	bf00      	nop
 800842e:	bf00      	nop
 8008430:	e7fd      	b.n	800842e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008432:	f002 f829 	bl	800a488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800843a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800843e:	429a      	cmp	r2, r3
 8008440:	d302      	bcc.n	8008448 <xQueueGenericSend+0xdc>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d129      	bne.n	800849c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800844e:	f000 fa0f 	bl	8008870 <prvCopyDataToQueue>
 8008452:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008458:	2b00      	cmp	r3, #0
 800845a:	d010      	beq.n	800847e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	3324      	adds	r3, #36	@ 0x24
 8008460:	4618      	mov	r0, r3
 8008462:	f001 f8e5 	bl	8009630 <xTaskRemoveFromEventList>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d013      	beq.n	8008494 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800846c:	4b3f      	ldr	r3, [pc, #252]	@ (800856c <xQueueGenericSend+0x200>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	e00a      	b.n	8008494 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800847e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008484:	4b39      	ldr	r3, [pc, #228]	@ (800856c <xQueueGenericSend+0x200>)
 8008486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008494:	f002 f82a 	bl	800a4ec <vPortExitCritical>
				return pdPASS;
 8008498:	2301      	movs	r3, #1
 800849a:	e063      	b.n	8008564 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d103      	bne.n	80084aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084a2:	f002 f823 	bl	800a4ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	e05c      	b.n	8008564 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d106      	bne.n	80084be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084b0:	f107 0314 	add.w	r3, r7, #20
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 f91f 	bl	80096f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084ba:	2301      	movs	r3, #1
 80084bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084be:	f002 f815 	bl	800a4ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084c2:	f000 fe8f 	bl	80091e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084c6:	f001 ffdf 	bl	800a488 <vPortEnterCritical>
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084d0:	b25b      	sxtb	r3, r3
 80084d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d6:	d103      	bne.n	80084e0 <xQueueGenericSend+0x174>
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084e6:	b25b      	sxtb	r3, r3
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ec:	d103      	bne.n	80084f6 <xQueueGenericSend+0x18a>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084f6:	f001 fff9 	bl	800a4ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084fa:	1d3a      	adds	r2, r7, #4
 80084fc:	f107 0314 	add.w	r3, r7, #20
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f001 f90e 	bl	8009724 <xTaskCheckForTimeOut>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d124      	bne.n	8008558 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800850e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008510:	f000 faa6 	bl	8008a60 <prvIsQueueFull>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d018      	beq.n	800854c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	3310      	adds	r3, #16
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	4611      	mov	r1, r2
 8008522:	4618      	mov	r0, r3
 8008524:	f001 f832 	bl	800958c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008528:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800852a:	f000 fa31 	bl	8008990 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800852e:	f000 fe67 	bl	8009200 <xTaskResumeAll>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	f47f af7c 	bne.w	8008432 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800853a:	4b0c      	ldr	r3, [pc, #48]	@ (800856c <xQueueGenericSend+0x200>)
 800853c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	e772      	b.n	8008432 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800854c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800854e:	f000 fa1f 	bl	8008990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008552:	f000 fe55 	bl	8009200 <xTaskResumeAll>
 8008556:	e76c      	b.n	8008432 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800855a:	f000 fa19 	bl	8008990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800855e:	f000 fe4f 	bl	8009200 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008562:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008564:	4618      	mov	r0, r3
 8008566:	3738      	adds	r7, #56	@ 0x38
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	e000ed04 	.word	0xe000ed04

08008570 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b090      	sub	sp, #64	@ 0x40
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10b      	bne.n	80085a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800859a:	bf00      	nop
 800859c:	bf00      	nop
 800859e:	e7fd      	b.n	800859c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <xQueueGenericSendFromISR+0x3e>
 80085a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <xQueueGenericSendFromISR+0x42>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e000      	b.n	80085b4 <xQueueGenericSendFromISR+0x44>
 80085b2:	2300      	movs	r3, #0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10b      	bne.n	80085d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	e7fd      	b.n	80085cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d103      	bne.n	80085de <xQueueGenericSendFromISR+0x6e>
 80085d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d101      	bne.n	80085e2 <xQueueGenericSendFromISR+0x72>
 80085de:	2301      	movs	r3, #1
 80085e0:	e000      	b.n	80085e4 <xQueueGenericSendFromISR+0x74>
 80085e2:	2300      	movs	r3, #0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10b      	bne.n	8008600 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	623b      	str	r3, [r7, #32]
}
 80085fa:	bf00      	nop
 80085fc:	bf00      	nop
 80085fe:	e7fd      	b.n	80085fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008600:	f002 f822 	bl	800a648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008604:	f3ef 8211 	mrs	r2, BASEPRI
 8008608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	61fa      	str	r2, [r7, #28]
 800861a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800861c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800861e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008628:	429a      	cmp	r2, r3
 800862a:	d302      	bcc.n	8008632 <xQueueGenericSendFromISR+0xc2>
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d12f      	bne.n	8008692 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008634:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008638:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800863c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008640:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	68b9      	ldr	r1, [r7, #8]
 8008646:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008648:	f000 f912 	bl	8008870 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800864c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008654:	d112      	bne.n	800867c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865a:	2b00      	cmp	r3, #0
 800865c:	d016      	beq.n	800868c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800865e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008660:	3324      	adds	r3, #36	@ 0x24
 8008662:	4618      	mov	r0, r3
 8008664:	f000 ffe4 	bl	8009630 <xTaskRemoveFromEventList>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00e      	beq.n	800868c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00b      	beq.n	800868c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	e007      	b.n	800868c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800867c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008680:	3301      	adds	r3, #1
 8008682:	b2db      	uxtb	r3, r3
 8008684:	b25a      	sxtb	r2, r3
 8008686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800868c:	2301      	movs	r3, #1
 800868e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008690:	e001      	b.n	8008696 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008692:	2300      	movs	r3, #0
 8008694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008698:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3740      	adds	r7, #64	@ 0x40
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08c      	sub	sp, #48	@ 0x30
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10b      	bne.n	80086de <xQueueReceive+0x32>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	623b      	str	r3, [r7, #32]
}
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	e7fd      	b.n	80086da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d103      	bne.n	80086ec <xQueueReceive+0x40>
 80086e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <xQueueReceive+0x44>
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <xQueueReceive+0x46>
 80086f0:	2300      	movs	r3, #0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <xQueueReceive+0x62>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	61fb      	str	r3, [r7, #28]
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800870e:	f001 f94f 	bl	80099b0 <xTaskGetSchedulerState>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d102      	bne.n	800871e <xQueueReceive+0x72>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <xQueueReceive+0x76>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <xQueueReceive+0x78>
 8008722:	2300      	movs	r3, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10b      	bne.n	8008740 <xQueueReceive+0x94>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	61bb      	str	r3, [r7, #24]
}
 800873a:	bf00      	nop
 800873c:	bf00      	nop
 800873e:	e7fd      	b.n	800873c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008740:	f001 fea2 	bl	800a488 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008748:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800874a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01f      	beq.n	8008790 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008750:	68b9      	ldr	r1, [r7, #8]
 8008752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008754:	f000 f8f6 	bl	8008944 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875a:	1e5a      	subs	r2, r3, #1
 800875c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00f      	beq.n	8008788 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	3310      	adds	r3, #16
 800876c:	4618      	mov	r0, r3
 800876e:	f000 ff5f 	bl	8009630 <xTaskRemoveFromEventList>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d007      	beq.n	8008788 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008778:	4b3c      	ldr	r3, [pc, #240]	@ (800886c <xQueueReceive+0x1c0>)
 800877a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008788:	f001 feb0 	bl	800a4ec <vPortExitCritical>
				return pdPASS;
 800878c:	2301      	movs	r3, #1
 800878e:	e069      	b.n	8008864 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d103      	bne.n	800879e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008796:	f001 fea9 	bl	800a4ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800879a:	2300      	movs	r3, #0
 800879c:	e062      	b.n	8008864 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800879e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d106      	bne.n	80087b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087a4:	f107 0310 	add.w	r3, r7, #16
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 ffa5 	bl	80096f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087ae:	2301      	movs	r3, #1
 80087b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087b2:	f001 fe9b 	bl	800a4ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087b6:	f000 fd15 	bl	80091e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087ba:	f001 fe65 	bl	800a488 <vPortEnterCritical>
 80087be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ca:	d103      	bne.n	80087d4 <xQueueReceive+0x128>
 80087cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e0:	d103      	bne.n	80087ea <xQueueReceive+0x13e>
 80087e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087ea:	f001 fe7f 	bl	800a4ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087ee:	1d3a      	adds	r2, r7, #4
 80087f0:	f107 0310 	add.w	r3, r7, #16
 80087f4:	4611      	mov	r1, r2
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 ff94 	bl	8009724 <xTaskCheckForTimeOut>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d123      	bne.n	800884a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008804:	f000 f916 	bl	8008a34 <prvIsQueueEmpty>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d017      	beq.n	800883e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800880e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008810:	3324      	adds	r3, #36	@ 0x24
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f000 feb8 	bl	800958c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800881c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800881e:	f000 f8b7 	bl	8008990 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008822:	f000 fced 	bl	8009200 <xTaskResumeAll>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d189      	bne.n	8008740 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800882c:	4b0f      	ldr	r3, [pc, #60]	@ (800886c <xQueueReceive+0x1c0>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	e780      	b.n	8008740 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800883e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008840:	f000 f8a6 	bl	8008990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008844:	f000 fcdc 	bl	8009200 <xTaskResumeAll>
 8008848:	e77a      	b.n	8008740 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800884a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800884c:	f000 f8a0 	bl	8008990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008850:	f000 fcd6 	bl	8009200 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008856:	f000 f8ed 	bl	8008a34 <prvIsQueueEmpty>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	f43f af6f 	beq.w	8008740 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008862:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008864:	4618      	mov	r0, r3
 8008866:	3730      	adds	r7, #48	@ 0x30
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800887c:	2300      	movs	r3, #0
 800887e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008884:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10d      	bne.n	80088aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d14d      	bne.n	8008932 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	4618      	mov	r0, r3
 800889c:	f001 f8a6 	bl	80099ec <xTaskPriorityDisinherit>
 80088a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	609a      	str	r2, [r3, #8]
 80088a8:	e043      	b.n	8008932 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d119      	bne.n	80088e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6858      	ldr	r0, [r3, #4]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b8:	461a      	mov	r2, r3
 80088ba:	68b9      	ldr	r1, [r7, #8]
 80088bc:	f002 f920 	bl	800ab00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c8:	441a      	add	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d32b      	bcc.n	8008932 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	605a      	str	r2, [r3, #4]
 80088e2:	e026      	b.n	8008932 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	68d8      	ldr	r0, [r3, #12]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ec:	461a      	mov	r2, r3
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	f002 f906 	bl	800ab00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088fc:	425b      	negs	r3, r3
 80088fe:	441a      	add	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d207      	bcs.n	8008920 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008918:	425b      	negs	r3, r3
 800891a:	441a      	add	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b02      	cmp	r3, #2
 8008924:	d105      	bne.n	8008932 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	3b01      	subs	r3, #1
 8008930:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800893a:	697b      	ldr	r3, [r7, #20]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008952:	2b00      	cmp	r3, #0
 8008954:	d018      	beq.n	8008988 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895e:	441a      	add	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	429a      	cmp	r2, r3
 800896e:	d303      	bcc.n	8008978 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68d9      	ldr	r1, [r3, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008980:	461a      	mov	r2, r3
 8008982:	6838      	ldr	r0, [r7, #0]
 8008984:	f002 f8bc 	bl	800ab00 <memcpy>
	}
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008998:	f001 fd76 	bl	800a488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089a4:	e011      	b.n	80089ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d012      	beq.n	80089d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3324      	adds	r3, #36	@ 0x24
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fe3c 	bl	8009630 <xTaskRemoveFromEventList>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089be:	f000 ff15 	bl	80097ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dce9      	bgt.n	80089a6 <prvUnlockQueue+0x16>
 80089d2:	e000      	b.n	80089d6 <prvUnlockQueue+0x46>
					break;
 80089d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	22ff      	movs	r2, #255	@ 0xff
 80089da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80089de:	f001 fd85 	bl	800a4ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089e2:	f001 fd51 	bl	800a488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089ee:	e011      	b.n	8008a14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d012      	beq.n	8008a1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3310      	adds	r3, #16
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 fe17 	bl	8009630 <xTaskRemoveFromEventList>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a08:	f000 fef0 	bl	80097ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	dce9      	bgt.n	80089f0 <prvUnlockQueue+0x60>
 8008a1c:	e000      	b.n	8008a20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	22ff      	movs	r2, #255	@ 0xff
 8008a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008a28:	f001 fd60 	bl	800a4ec <vPortExitCritical>
}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a3c:	f001 fd24 	bl	800a488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d102      	bne.n	8008a4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	e001      	b.n	8008a52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a52:	f001 fd4b 	bl	800a4ec <vPortExitCritical>

	return xReturn;
 8008a56:	68fb      	ldr	r3, [r7, #12]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a68:	f001 fd0e 	bl	800a488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d102      	bne.n	8008a7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	e001      	b.n	8008a82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a82:	f001 fd33 	bl	800a4ec <vPortExitCritical>

	return xReturn;
 8008a86:	68fb      	ldr	r3, [r7, #12]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e014      	b.n	8008aca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8008ae0 <vQueueAddToRegistry+0x50>)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10b      	bne.n	8008ac4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008aac:	490c      	ldr	r1, [pc, #48]	@ (8008ae0 <vQueueAddToRegistry+0x50>)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8008ae0 <vQueueAddToRegistry+0x50>)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	4413      	add	r3, r2
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ac2:	e006      	b.n	8008ad2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b07      	cmp	r3, #7
 8008ace:	d9e7      	bls.n	8008aa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ad0:	bf00      	nop
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	240009a8 	.word	0x240009a8

08008ae4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008af4:	f001 fcc8 	bl	800a488 <vPortEnterCritical>
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008afe:	b25b      	sxtb	r3, r3
 8008b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b04:	d103      	bne.n	8008b0e <vQueueWaitForMessageRestricted+0x2a>
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b14:	b25b      	sxtb	r3, r3
 8008b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1a:	d103      	bne.n	8008b24 <vQueueWaitForMessageRestricted+0x40>
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b24:	f001 fce2 	bl	800a4ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d106      	bne.n	8008b3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	3324      	adds	r3, #36	@ 0x24
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	68b9      	ldr	r1, [r7, #8]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 fd4d 	bl	80095d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b3e:	6978      	ldr	r0, [r7, #20]
 8008b40:	f7ff ff26 	bl	8008990 <prvUnlockQueue>
	}
 8008b44:	bf00      	nop
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08e      	sub	sp, #56	@ 0x38
 8008b50:	af04      	add	r7, sp, #16
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
 8008b58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10b      	bne.n	8008b78 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	623b      	str	r3, [r7, #32]
}
 8008b72:	bf00      	nop
 8008b74:	bf00      	nop
 8008b76:	e7fd      	b.n	8008b74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10b      	bne.n	8008b96 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	61fb      	str	r3, [r7, #28]
}
 8008b90:	bf00      	nop
 8008b92:	bf00      	nop
 8008b94:	e7fd      	b.n	8008b92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b96:	235c      	movs	r3, #92	@ 0x5c
 8008b98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b9e:	d00b      	beq.n	8008bb8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	61bb      	str	r3, [r7, #24]
}
 8008bb2:	bf00      	nop
 8008bb4:	bf00      	nop
 8008bb6:	e7fd      	b.n	8008bb4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008bb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d01e      	beq.n	8008bfe <xTaskCreateStatic+0xb2>
 8008bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d01b      	beq.n	8008bfe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008bd8:	2300      	movs	r3, #0
 8008bda:	9303      	str	r3, [sp, #12]
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	9302      	str	r3, [sp, #8]
 8008be0:	f107 0314 	add.w	r3, r7, #20
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 f850 	bl	8008c96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008bf8:	f000 f8de 	bl	8008db8 <prvAddNewTaskToReadyList>
 8008bfc:	e001      	b.n	8008c02 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c02:	697b      	ldr	r3, [r7, #20]
	}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3728      	adds	r7, #40	@ 0x28
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08c      	sub	sp, #48	@ 0x30
 8008c10:	af04      	add	r7, sp, #16
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c1c:	88fb      	ldrh	r3, [r7, #6]
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4618      	mov	r0, r3
 8008c22:	f001 fd53 	bl	800a6cc <pvPortMalloc>
 8008c26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00e      	beq.n	8008c4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c2e:	205c      	movs	r0, #92	@ 0x5c
 8008c30:	f001 fd4c 	bl	800a6cc <pvPortMalloc>
 8008c34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c42:	e005      	b.n	8008c50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c44:	6978      	ldr	r0, [r7, #20]
 8008c46:	f001 fe0f 	bl	800a868 <vPortFree>
 8008c4a:	e001      	b.n	8008c50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d017      	beq.n	8008c86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c5e:	88fa      	ldrh	r2, [r7, #6]
 8008c60:	2300      	movs	r3, #0
 8008c62:	9303      	str	r3, [sp, #12]
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	9302      	str	r3, [sp, #8]
 8008c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6a:	9301      	str	r3, [sp, #4]
 8008c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	68b9      	ldr	r1, [r7, #8]
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 f80e 	bl	8008c96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c7a:	69f8      	ldr	r0, [r7, #28]
 8008c7c:	f000 f89c 	bl	8008db8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c80:	2301      	movs	r3, #1
 8008c82:	61bb      	str	r3, [r7, #24]
 8008c84:	e002      	b.n	8008c8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c86:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c8c:	69bb      	ldr	r3, [r7, #24]
	}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3720      	adds	r7, #32
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b088      	sub	sp, #32
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	60b9      	str	r1, [r7, #8]
 8008ca0:	607a      	str	r2, [r7, #4]
 8008ca2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	461a      	mov	r2, r3
 8008cae:	21a5      	movs	r1, #165	@ 0xa5
 8008cb0:	f001 fefa 	bl	800aaa8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008cbe:	440b      	add	r3, r1
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	f023 0307 	bic.w	r3, r3, #7
 8008ccc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	f003 0307 	and.w	r3, r3, #7
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00b      	beq.n	8008cf0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cdc:	f383 8811 	msr	BASEPRI, r3
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	617b      	str	r3, [r7, #20]
}
 8008cea:	bf00      	nop
 8008cec:	bf00      	nop
 8008cee:	e7fd      	b.n	8008cec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d01f      	beq.n	8008d36 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	e012      	b.n	8008d22 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	4413      	add	r3, r2
 8008d02:	7819      	ldrb	r1, [r3, #0]
 8008d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	4413      	add	r3, r2
 8008d0a:	3334      	adds	r3, #52	@ 0x34
 8008d0c:	460a      	mov	r2, r1
 8008d0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	4413      	add	r3, r2
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d006      	beq.n	8008d2a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	61fb      	str	r3, [r7, #28]
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	2b0f      	cmp	r3, #15
 8008d26:	d9e9      	bls.n	8008cfc <prvInitialiseNewTask+0x66>
 8008d28:	e000      	b.n	8008d2c <prvInitialiseNewTask+0x96>
			{
				break;
 8008d2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d34:	e003      	b.n	8008d3e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d40:	2b37      	cmp	r3, #55	@ 0x37
 8008d42:	d901      	bls.n	8008d48 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d44:	2337      	movs	r3, #55	@ 0x37
 8008d46:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d52:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d56:	2200      	movs	r2, #0
 8008d58:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff f966 	bl	8008030 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d66:	3318      	adds	r3, #24
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7ff f961 	bl	8008030 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d76:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d82:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d86:	2200      	movs	r2, #0
 8008d88:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	68f9      	ldr	r1, [r7, #12]
 8008d96:	69b8      	ldr	r0, [r7, #24]
 8008d98:	f001 fa46 	bl	800a228 <pxPortInitialiseStack>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dae:	bf00      	nop
 8008db0:	3720      	adds	r7, #32
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008dc0:	f001 fb62 	bl	800a488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8008e7c <prvAddNewTaskToReadyList+0xc4>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	4a2c      	ldr	r2, [pc, #176]	@ (8008e7c <prvAddNewTaskToReadyList+0xc4>)
 8008dcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008dce:	4b2c      	ldr	r3, [pc, #176]	@ (8008e80 <prvAddNewTaskToReadyList+0xc8>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d109      	bne.n	8008dea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8008e80 <prvAddNewTaskToReadyList+0xc8>)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ddc:	4b27      	ldr	r3, [pc, #156]	@ (8008e7c <prvAddNewTaskToReadyList+0xc4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d110      	bne.n	8008e06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008de4:	f000 fd26 	bl	8009834 <prvInitialiseTaskLists>
 8008de8:	e00d      	b.n	8008e06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008dea:	4b26      	ldr	r3, [pc, #152]	@ (8008e84 <prvAddNewTaskToReadyList+0xcc>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d109      	bne.n	8008e06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008df2:	4b23      	ldr	r3, [pc, #140]	@ (8008e80 <prvAddNewTaskToReadyList+0xc8>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d802      	bhi.n	8008e06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e00:	4a1f      	ldr	r2, [pc, #124]	@ (8008e80 <prvAddNewTaskToReadyList+0xc8>)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e06:	4b20      	ldr	r3, [pc, #128]	@ (8008e88 <prvAddNewTaskToReadyList+0xd0>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8008e88 <prvAddNewTaskToReadyList+0xd0>)
 8008e0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e10:	4b1d      	ldr	r3, [pc, #116]	@ (8008e88 <prvAddNewTaskToReadyList+0xd0>)
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8008e8c <prvAddNewTaskToReadyList+0xd4>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d903      	bls.n	8008e2c <prvAddNewTaskToReadyList+0x74>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e28:	4a18      	ldr	r2, [pc, #96]	@ (8008e8c <prvAddNewTaskToReadyList+0xd4>)
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4a15      	ldr	r2, [pc, #84]	@ (8008e90 <prvAddNewTaskToReadyList+0xd8>)
 8008e3a:	441a      	add	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4619      	mov	r1, r3
 8008e42:	4610      	mov	r0, r2
 8008e44:	f7ff f901 	bl	800804a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e48:	f001 fb50 	bl	800a4ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e84 <prvAddNewTaskToReadyList+0xcc>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00e      	beq.n	8008e72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e54:	4b0a      	ldr	r3, [pc, #40]	@ (8008e80 <prvAddNewTaskToReadyList+0xc8>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d207      	bcs.n	8008e72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e62:	4b0c      	ldr	r3, [pc, #48]	@ (8008e94 <prvAddNewTaskToReadyList+0xdc>)
 8008e64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e72:	bf00      	nop
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	24000ebc 	.word	0x24000ebc
 8008e80:	240009e8 	.word	0x240009e8
 8008e84:	24000ec8 	.word	0x24000ec8
 8008e88:	24000ed8 	.word	0x24000ed8
 8008e8c:	24000ec4 	.word	0x24000ec4
 8008e90:	240009ec 	.word	0x240009ec
 8008e94:	e000ed04 	.word	0xe000ed04

08008e98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d018      	beq.n	8008edc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008eaa:	4b14      	ldr	r3, [pc, #80]	@ (8008efc <vTaskDelay+0x64>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <vTaskDelay+0x32>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	60bb      	str	r3, [r7, #8]
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008eca:	f000 f98b 	bl	80091e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ece:	2100      	movs	r1, #0
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fdfb 	bl	8009acc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ed6:	f000 f993 	bl	8009200 <xTaskResumeAll>
 8008eda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d107      	bne.n	8008ef2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008ee2:	4b07      	ldr	r3, [pc, #28]	@ (8008f00 <vTaskDelay+0x68>)
 8008ee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ef2:	bf00      	nop
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	24000ee4 	.word	0x24000ee4
 8008f00:	e000ed04 	.word	0xe000ed04

08008f04 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008f0c:	f001 fabc 	bl	800a488 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d102      	bne.n	8008f1c <vTaskSuspend+0x18>
 8008f16:	4b30      	ldr	r3, [pc, #192]	@ (8008fd8 <vTaskSuspend+0xd4>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	e000      	b.n	8008f1e <vTaskSuspend+0x1a>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7ff f8ed 	bl	8008104 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d004      	beq.n	8008f3c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3318      	adds	r3, #24
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff f8e4 	bl	8008104 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3304      	adds	r3, #4
 8008f40:	4619      	mov	r1, r3
 8008f42:	4826      	ldr	r0, [pc, #152]	@ (8008fdc <vTaskSuspend+0xd8>)
 8008f44:	f7ff f881 	bl	800804a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d103      	bne.n	8008f5c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008f5c:	f001 fac6 	bl	800a4ec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008f60:	4b1f      	ldr	r3, [pc, #124]	@ (8008fe0 <vTaskSuspend+0xdc>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008f68:	f001 fa8e 	bl	800a488 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008f6c:	f000 fd00 	bl	8009970 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008f70:	f001 fabc 	bl	800a4ec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008f74:	4b18      	ldr	r3, [pc, #96]	@ (8008fd8 <vTaskSuspend+0xd4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d128      	bne.n	8008fd0 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8008f7e:	4b18      	ldr	r3, [pc, #96]	@ (8008fe0 <vTaskSuspend+0xdc>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d018      	beq.n	8008fb8 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008f86:	4b17      	ldr	r3, [pc, #92]	@ (8008fe4 <vTaskSuspend+0xe0>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00b      	beq.n	8008fa6 <vTaskSuspend+0xa2>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	60bb      	str	r3, [r7, #8]
}
 8008fa0:	bf00      	nop
 8008fa2:	bf00      	nop
 8008fa4:	e7fd      	b.n	8008fa2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8008fa6:	4b10      	ldr	r3, [pc, #64]	@ (8008fe8 <vTaskSuspend+0xe4>)
 8008fa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fb6:	e00b      	b.n	8008fd0 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008fb8:	4b08      	ldr	r3, [pc, #32]	@ (8008fdc <vTaskSuspend+0xd8>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8008fec <vTaskSuspend+0xe8>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d103      	bne.n	8008fcc <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8008fc4:	4b04      	ldr	r3, [pc, #16]	@ (8008fd8 <vTaskSuspend+0xd4>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	601a      	str	r2, [r3, #0]
	}
 8008fca:	e001      	b.n	8008fd0 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8008fcc:	f000 fa80 	bl	80094d0 <vTaskSwitchContext>
	}
 8008fd0:	bf00      	nop
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	240009e8 	.word	0x240009e8
 8008fdc:	24000ea8 	.word	0x24000ea8
 8008fe0:	24000ec8 	.word	0x24000ec8
 8008fe4:	24000ee4 	.word	0x24000ee4
 8008fe8:	e000ed04 	.word	0xe000ed04
 8008fec:	24000ebc 	.word	0x24000ebc

08008ff0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10b      	bne.n	800901e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	60fb      	str	r3, [r7, #12]
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	e7fd      	b.n	800901a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	4a0a      	ldr	r2, [pc, #40]	@ (800904c <prvTaskIsTaskSuspended+0x5c>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d10a      	bne.n	800903e <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902c:	4a08      	ldr	r2, [pc, #32]	@ (8009050 <prvTaskIsTaskSuspended+0x60>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d005      	beq.n	800903e <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800903a:	2301      	movs	r3, #1
 800903c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800903e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009040:	4618      	mov	r0, r3
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	24000ea8 	.word	0x24000ea8
 8009050:	24000e7c 	.word	0x24000e7c

08009054 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10b      	bne.n	800907e <vTaskResume+0x2a>
	__asm volatile
 8009066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906a:	f383 8811 	msr	BASEPRI, r3
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	60bb      	str	r3, [r7, #8]
}
 8009078:	bf00      	nop
 800907a:	bf00      	nop
 800907c:	e7fd      	b.n	800907a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800907e:	4b21      	ldr	r3, [pc, #132]	@ (8009104 <vTaskResume+0xb0>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	429a      	cmp	r2, r3
 8009086:	d038      	beq.n	80090fa <vTaskResume+0xa6>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d035      	beq.n	80090fa <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800908e:	f001 f9fb 	bl	800a488 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f7ff ffac 	bl	8008ff0 <prvTaskIsTaskSuspended>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d02b      	beq.n	80090f6 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3304      	adds	r3, #4
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7ff f82e 	bl	8008104 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ac:	4b16      	ldr	r3, [pc, #88]	@ (8009108 <vTaskResume+0xb4>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d903      	bls.n	80090bc <vTaskResume+0x68>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b8:	4a13      	ldr	r2, [pc, #76]	@ (8009108 <vTaskResume+0xb4>)
 80090ba:	6013      	str	r3, [r2, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c0:	4613      	mov	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4413      	add	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4a10      	ldr	r2, [pc, #64]	@ (800910c <vTaskResume+0xb8>)
 80090ca:	441a      	add	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3304      	adds	r3, #4
 80090d0:	4619      	mov	r1, r3
 80090d2:	4610      	mov	r0, r2
 80090d4:	f7fe ffb9 	bl	800804a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090dc:	4b09      	ldr	r3, [pc, #36]	@ (8009104 <vTaskResume+0xb0>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d307      	bcc.n	80090f6 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80090e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009110 <vTaskResume+0xbc>)
 80090e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80090f6:	f001 f9f9 	bl	800a4ec <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	240009e8 	.word	0x240009e8
 8009108:	24000ec4 	.word	0x24000ec4
 800910c:	240009ec 	.word	0x240009ec
 8009110:	e000ed04 	.word	0xe000ed04

08009114 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08a      	sub	sp, #40	@ 0x28
 8009118:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800911e:	2300      	movs	r3, #0
 8009120:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009122:	463a      	mov	r2, r7
 8009124:	1d39      	adds	r1, r7, #4
 8009126:	f107 0308 	add.w	r3, r7, #8
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe ff2c 	bl	8007f88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	9202      	str	r2, [sp, #8]
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	2300      	movs	r3, #0
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	2300      	movs	r3, #0
 8009140:	460a      	mov	r2, r1
 8009142:	4922      	ldr	r1, [pc, #136]	@ (80091cc <vTaskStartScheduler+0xb8>)
 8009144:	4822      	ldr	r0, [pc, #136]	@ (80091d0 <vTaskStartScheduler+0xbc>)
 8009146:	f7ff fd01 	bl	8008b4c <xTaskCreateStatic>
 800914a:	4603      	mov	r3, r0
 800914c:	4a21      	ldr	r2, [pc, #132]	@ (80091d4 <vTaskStartScheduler+0xc0>)
 800914e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009150:	4b20      	ldr	r3, [pc, #128]	@ (80091d4 <vTaskStartScheduler+0xc0>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009158:	2301      	movs	r3, #1
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e001      	b.n	8009162 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800915e:	2300      	movs	r3, #0
 8009160:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d102      	bne.n	800916e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009168:	f000 fd04 	bl	8009b74 <xTimerCreateTimerTask>
 800916c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d116      	bne.n	80091a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	613b      	str	r3, [r7, #16]
}
 8009186:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009188:	4b13      	ldr	r3, [pc, #76]	@ (80091d8 <vTaskStartScheduler+0xc4>)
 800918a:	f04f 32ff 	mov.w	r2, #4294967295
 800918e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009190:	4b12      	ldr	r3, [pc, #72]	@ (80091dc <vTaskStartScheduler+0xc8>)
 8009192:	2201      	movs	r2, #1
 8009194:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009196:	4b12      	ldr	r3, [pc, #72]	@ (80091e0 <vTaskStartScheduler+0xcc>)
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800919c:	f001 f8d0 	bl	800a340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091a0:	e00f      	b.n	80091c2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a8:	d10b      	bne.n	80091c2 <vTaskStartScheduler+0xae>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	60fb      	str	r3, [r7, #12]
}
 80091bc:	bf00      	nop
 80091be:	bf00      	nop
 80091c0:	e7fd      	b.n	80091be <vTaskStartScheduler+0xaa>
}
 80091c2:	bf00      	nop
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	0800ab4c 	.word	0x0800ab4c
 80091d0:	08009805 	.word	0x08009805
 80091d4:	24000ee0 	.word	0x24000ee0
 80091d8:	24000edc 	.word	0x24000edc
 80091dc:	24000ec8 	.word	0x24000ec8
 80091e0:	24000ec0 	.word	0x24000ec0

080091e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091e4:	b480      	push	{r7}
 80091e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091e8:	4b04      	ldr	r3, [pc, #16]	@ (80091fc <vTaskSuspendAll+0x18>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3301      	adds	r3, #1
 80091ee:	4a03      	ldr	r2, [pc, #12]	@ (80091fc <vTaskSuspendAll+0x18>)
 80091f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091f2:	bf00      	nop
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	24000ee4 	.word	0x24000ee4

08009200 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009206:	2300      	movs	r3, #0
 8009208:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800920a:	2300      	movs	r3, #0
 800920c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800920e:	4b42      	ldr	r3, [pc, #264]	@ (8009318 <xTaskResumeAll+0x118>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10b      	bne.n	800922e <xTaskResumeAll+0x2e>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	603b      	str	r3, [r7, #0]
}
 8009228:	bf00      	nop
 800922a:	bf00      	nop
 800922c:	e7fd      	b.n	800922a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800922e:	f001 f92b 	bl	800a488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009232:	4b39      	ldr	r3, [pc, #228]	@ (8009318 <xTaskResumeAll+0x118>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3b01      	subs	r3, #1
 8009238:	4a37      	ldr	r2, [pc, #220]	@ (8009318 <xTaskResumeAll+0x118>)
 800923a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800923c:	4b36      	ldr	r3, [pc, #216]	@ (8009318 <xTaskResumeAll+0x118>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d162      	bne.n	800930a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009244:	4b35      	ldr	r3, [pc, #212]	@ (800931c <xTaskResumeAll+0x11c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d05e      	beq.n	800930a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800924c:	e02f      	b.n	80092ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800924e:	4b34      	ldr	r3, [pc, #208]	@ (8009320 <xTaskResumeAll+0x120>)
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	3318      	adds	r3, #24
 800925a:	4618      	mov	r0, r3
 800925c:	f7fe ff52 	bl	8008104 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3304      	adds	r3, #4
 8009264:	4618      	mov	r0, r3
 8009266:	f7fe ff4d 	bl	8008104 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800926e:	4b2d      	ldr	r3, [pc, #180]	@ (8009324 <xTaskResumeAll+0x124>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	429a      	cmp	r2, r3
 8009274:	d903      	bls.n	800927e <xTaskResumeAll+0x7e>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927a:	4a2a      	ldr	r2, [pc, #168]	@ (8009324 <xTaskResumeAll+0x124>)
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009282:	4613      	mov	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4a27      	ldr	r2, [pc, #156]	@ (8009328 <xTaskResumeAll+0x128>)
 800928c:	441a      	add	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3304      	adds	r3, #4
 8009292:	4619      	mov	r1, r3
 8009294:	4610      	mov	r0, r2
 8009296:	f7fe fed8 	bl	800804a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800929e:	4b23      	ldr	r3, [pc, #140]	@ (800932c <xTaskResumeAll+0x12c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d302      	bcc.n	80092ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80092a8:	4b21      	ldr	r3, [pc, #132]	@ (8009330 <xTaskResumeAll+0x130>)
 80092aa:	2201      	movs	r2, #1
 80092ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092ae:	4b1c      	ldr	r3, [pc, #112]	@ (8009320 <xTaskResumeAll+0x120>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1cb      	bne.n	800924e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092bc:	f000 fb58 	bl	8009970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092c0:	4b1c      	ldr	r3, [pc, #112]	@ (8009334 <xTaskResumeAll+0x134>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d010      	beq.n	80092ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092cc:	f000 f846 	bl	800935c <xTaskIncrementTick>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80092d6:	4b16      	ldr	r3, [pc, #88]	@ (8009330 <xTaskResumeAll+0x130>)
 80092d8:	2201      	movs	r2, #1
 80092da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3b01      	subs	r3, #1
 80092e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1f1      	bne.n	80092cc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80092e8:	4b12      	ldr	r3, [pc, #72]	@ (8009334 <xTaskResumeAll+0x134>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092ee:	4b10      	ldr	r3, [pc, #64]	@ (8009330 <xTaskResumeAll+0x130>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d009      	beq.n	800930a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092f6:	2301      	movs	r3, #1
 80092f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092fa:	4b0f      	ldr	r3, [pc, #60]	@ (8009338 <xTaskResumeAll+0x138>)
 80092fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800930a:	f001 f8ef 	bl	800a4ec <vPortExitCritical>

	return xAlreadyYielded;
 800930e:	68bb      	ldr	r3, [r7, #8]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	24000ee4 	.word	0x24000ee4
 800931c:	24000ebc 	.word	0x24000ebc
 8009320:	24000e7c 	.word	0x24000e7c
 8009324:	24000ec4 	.word	0x24000ec4
 8009328:	240009ec 	.word	0x240009ec
 800932c:	240009e8 	.word	0x240009e8
 8009330:	24000ed0 	.word	0x24000ed0
 8009334:	24000ecc 	.word	0x24000ecc
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009342:	4b05      	ldr	r3, [pc, #20]	@ (8009358 <xTaskGetTickCount+0x1c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009348:	687b      	ldr	r3, [r7, #4]
}
 800934a:	4618      	mov	r0, r3
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	24000ec0 	.word	0x24000ec0

0800935c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009362:	2300      	movs	r3, #0
 8009364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009366:	4b4f      	ldr	r3, [pc, #316]	@ (80094a4 <xTaskIncrementTick+0x148>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	f040 8090 	bne.w	8009490 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009370:	4b4d      	ldr	r3, [pc, #308]	@ (80094a8 <xTaskIncrementTick+0x14c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3301      	adds	r3, #1
 8009376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009378:	4a4b      	ldr	r2, [pc, #300]	@ (80094a8 <xTaskIncrementTick+0x14c>)
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d121      	bne.n	80093c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009384:	4b49      	ldr	r3, [pc, #292]	@ (80094ac <xTaskIncrementTick+0x150>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	603b      	str	r3, [r7, #0]
}
 80093a0:	bf00      	nop
 80093a2:	bf00      	nop
 80093a4:	e7fd      	b.n	80093a2 <xTaskIncrementTick+0x46>
 80093a6:	4b41      	ldr	r3, [pc, #260]	@ (80094ac <xTaskIncrementTick+0x150>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	4b40      	ldr	r3, [pc, #256]	@ (80094b0 <xTaskIncrementTick+0x154>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a3e      	ldr	r2, [pc, #248]	@ (80094ac <xTaskIncrementTick+0x150>)
 80093b2:	6013      	str	r3, [r2, #0]
 80093b4:	4a3e      	ldr	r2, [pc, #248]	@ (80094b0 <xTaskIncrementTick+0x154>)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	4b3e      	ldr	r3, [pc, #248]	@ (80094b4 <xTaskIncrementTick+0x158>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3301      	adds	r3, #1
 80093c0:	4a3c      	ldr	r2, [pc, #240]	@ (80094b4 <xTaskIncrementTick+0x158>)
 80093c2:	6013      	str	r3, [r2, #0]
 80093c4:	f000 fad4 	bl	8009970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093c8:	4b3b      	ldr	r3, [pc, #236]	@ (80094b8 <xTaskIncrementTick+0x15c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d349      	bcc.n	8009466 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093d2:	4b36      	ldr	r3, [pc, #216]	@ (80094ac <xTaskIncrementTick+0x150>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093dc:	4b36      	ldr	r3, [pc, #216]	@ (80094b8 <xTaskIncrementTick+0x15c>)
 80093de:	f04f 32ff 	mov.w	r2, #4294967295
 80093e2:	601a      	str	r2, [r3, #0]
					break;
 80093e4:	e03f      	b.n	8009466 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093e6:	4b31      	ldr	r3, [pc, #196]	@ (80094ac <xTaskIncrementTick+0x150>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d203      	bcs.n	8009406 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093fe:	4a2e      	ldr	r2, [pc, #184]	@ (80094b8 <xTaskIncrementTick+0x15c>)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009404:	e02f      	b.n	8009466 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	3304      	adds	r3, #4
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe fe7a 	bl	8008104 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009414:	2b00      	cmp	r3, #0
 8009416:	d004      	beq.n	8009422 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	3318      	adds	r3, #24
 800941c:	4618      	mov	r0, r3
 800941e:	f7fe fe71 	bl	8008104 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009426:	4b25      	ldr	r3, [pc, #148]	@ (80094bc <xTaskIncrementTick+0x160>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	429a      	cmp	r2, r3
 800942c:	d903      	bls.n	8009436 <xTaskIncrementTick+0xda>
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009432:	4a22      	ldr	r2, [pc, #136]	@ (80094bc <xTaskIncrementTick+0x160>)
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4a1f      	ldr	r2, [pc, #124]	@ (80094c0 <xTaskIncrementTick+0x164>)
 8009444:	441a      	add	r2, r3
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	3304      	adds	r3, #4
 800944a:	4619      	mov	r1, r3
 800944c:	4610      	mov	r0, r2
 800944e:	f7fe fdfc 	bl	800804a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009456:	4b1b      	ldr	r3, [pc, #108]	@ (80094c4 <xTaskIncrementTick+0x168>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945c:	429a      	cmp	r2, r3
 800945e:	d3b8      	bcc.n	80093d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009460:	2301      	movs	r3, #1
 8009462:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009464:	e7b5      	b.n	80093d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009466:	4b17      	ldr	r3, [pc, #92]	@ (80094c4 <xTaskIncrementTick+0x168>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946c:	4914      	ldr	r1, [pc, #80]	@ (80094c0 <xTaskIncrementTick+0x164>)
 800946e:	4613      	mov	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	440b      	add	r3, r1
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d901      	bls.n	8009482 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800947e:	2301      	movs	r3, #1
 8009480:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009482:	4b11      	ldr	r3, [pc, #68]	@ (80094c8 <xTaskIncrementTick+0x16c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d007      	beq.n	800949a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800948a:	2301      	movs	r3, #1
 800948c:	617b      	str	r3, [r7, #20]
 800948e:	e004      	b.n	800949a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009490:	4b0e      	ldr	r3, [pc, #56]	@ (80094cc <xTaskIncrementTick+0x170>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3301      	adds	r3, #1
 8009496:	4a0d      	ldr	r2, [pc, #52]	@ (80094cc <xTaskIncrementTick+0x170>)
 8009498:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800949a:	697b      	ldr	r3, [r7, #20]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	24000ee4 	.word	0x24000ee4
 80094a8:	24000ec0 	.word	0x24000ec0
 80094ac:	24000e74 	.word	0x24000e74
 80094b0:	24000e78 	.word	0x24000e78
 80094b4:	24000ed4 	.word	0x24000ed4
 80094b8:	24000edc 	.word	0x24000edc
 80094bc:	24000ec4 	.word	0x24000ec4
 80094c0:	240009ec 	.word	0x240009ec
 80094c4:	240009e8 	.word	0x240009e8
 80094c8:	24000ed0 	.word	0x24000ed0
 80094cc:	24000ecc 	.word	0x24000ecc

080094d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094d6:	4b28      	ldr	r3, [pc, #160]	@ (8009578 <vTaskSwitchContext+0xa8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094de:	4b27      	ldr	r3, [pc, #156]	@ (800957c <vTaskSwitchContext+0xac>)
 80094e0:	2201      	movs	r2, #1
 80094e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094e4:	e042      	b.n	800956c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80094e6:	4b25      	ldr	r3, [pc, #148]	@ (800957c <vTaskSwitchContext+0xac>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ec:	4b24      	ldr	r3, [pc, #144]	@ (8009580 <vTaskSwitchContext+0xb0>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	e011      	b.n	8009518 <vTaskSwitchContext+0x48>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10b      	bne.n	8009512 <vTaskSwitchContext+0x42>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	607b      	str	r3, [r7, #4]
}
 800950c:	bf00      	nop
 800950e:	bf00      	nop
 8009510:	e7fd      	b.n	800950e <vTaskSwitchContext+0x3e>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3b01      	subs	r3, #1
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	491a      	ldr	r1, [pc, #104]	@ (8009584 <vTaskSwitchContext+0xb4>)
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	440b      	add	r3, r1
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d0e3      	beq.n	80094f4 <vTaskSwitchContext+0x24>
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4a13      	ldr	r2, [pc, #76]	@ (8009584 <vTaskSwitchContext+0xb4>)
 8009538:	4413      	add	r3, r2
 800953a:	60bb      	str	r3, [r7, #8]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	605a      	str	r2, [r3, #4]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	3308      	adds	r3, #8
 800954e:	429a      	cmp	r2, r3
 8009550:	d104      	bne.n	800955c <vTaskSwitchContext+0x8c>
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	605a      	str	r2, [r3, #4]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	4a09      	ldr	r2, [pc, #36]	@ (8009588 <vTaskSwitchContext+0xb8>)
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	4a06      	ldr	r2, [pc, #24]	@ (8009580 <vTaskSwitchContext+0xb0>)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6013      	str	r3, [r2, #0]
}
 800956c:	bf00      	nop
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	24000ee4 	.word	0x24000ee4
 800957c:	24000ed0 	.word	0x24000ed0
 8009580:	24000ec4 	.word	0x24000ec4
 8009584:	240009ec 	.word	0x240009ec
 8009588:	240009e8 	.word	0x240009e8

0800958c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10b      	bne.n	80095b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	60fb      	str	r3, [r7, #12]
}
 80095ae:	bf00      	nop
 80095b0:	bf00      	nop
 80095b2:	e7fd      	b.n	80095b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095b4:	4b07      	ldr	r3, [pc, #28]	@ (80095d4 <vTaskPlaceOnEventList+0x48>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3318      	adds	r3, #24
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7fe fd68 	bl	8008092 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095c2:	2101      	movs	r1, #1
 80095c4:	6838      	ldr	r0, [r7, #0]
 80095c6:	f000 fa81 	bl	8009acc <prvAddCurrentTaskToDelayedList>
}
 80095ca:	bf00      	nop
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	240009e8 	.word	0x240009e8

080095d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10b      	bne.n	8009602 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	617b      	str	r3, [r7, #20]
}
 80095fc:	bf00      	nop
 80095fe:	bf00      	nop
 8009600:	e7fd      	b.n	80095fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009602:	4b0a      	ldr	r3, [pc, #40]	@ (800962c <vTaskPlaceOnEventListRestricted+0x54>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3318      	adds	r3, #24
 8009608:	4619      	mov	r1, r3
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f7fe fd1d 	bl	800804a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009616:	f04f 33ff 	mov.w	r3, #4294967295
 800961a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	68b8      	ldr	r0, [r7, #8]
 8009620:	f000 fa54 	bl	8009acc <prvAddCurrentTaskToDelayedList>
	}
 8009624:	bf00      	nop
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	240009e8 	.word	0x240009e8

08009630 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10b      	bne.n	800965e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	60fb      	str	r3, [r7, #12]
}
 8009658:	bf00      	nop
 800965a:	bf00      	nop
 800965c:	e7fd      	b.n	800965a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	3318      	adds	r3, #24
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fd4e 	bl	8008104 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009668:	4b1d      	ldr	r3, [pc, #116]	@ (80096e0 <xTaskRemoveFromEventList+0xb0>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d11d      	bne.n	80096ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	3304      	adds	r3, #4
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe fd45 	bl	8008104 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800967e:	4b19      	ldr	r3, [pc, #100]	@ (80096e4 <xTaskRemoveFromEventList+0xb4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d903      	bls.n	800968e <xTaskRemoveFromEventList+0x5e>
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968a:	4a16      	ldr	r2, [pc, #88]	@ (80096e4 <xTaskRemoveFromEventList+0xb4>)
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4a13      	ldr	r2, [pc, #76]	@ (80096e8 <xTaskRemoveFromEventList+0xb8>)
 800969c:	441a      	add	r2, r3
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	3304      	adds	r3, #4
 80096a2:	4619      	mov	r1, r3
 80096a4:	4610      	mov	r0, r2
 80096a6:	f7fe fcd0 	bl	800804a <vListInsertEnd>
 80096aa:	e005      	b.n	80096b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	3318      	adds	r3, #24
 80096b0:	4619      	mov	r1, r3
 80096b2:	480e      	ldr	r0, [pc, #56]	@ (80096ec <xTaskRemoveFromEventList+0xbc>)
 80096b4:	f7fe fcc9 	bl	800804a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096bc:	4b0c      	ldr	r3, [pc, #48]	@ (80096f0 <xTaskRemoveFromEventList+0xc0>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d905      	bls.n	80096d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096c6:	2301      	movs	r3, #1
 80096c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096ca:	4b0a      	ldr	r3, [pc, #40]	@ (80096f4 <xTaskRemoveFromEventList+0xc4>)
 80096cc:	2201      	movs	r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	e001      	b.n	80096d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80096d2:	2300      	movs	r3, #0
 80096d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80096d6:	697b      	ldr	r3, [r7, #20]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	24000ee4 	.word	0x24000ee4
 80096e4:	24000ec4 	.word	0x24000ec4
 80096e8:	240009ec 	.word	0x240009ec
 80096ec:	24000e7c 	.word	0x24000e7c
 80096f0:	240009e8 	.word	0x240009e8
 80096f4:	24000ed0 	.word	0x24000ed0

080096f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009700:	4b06      	ldr	r3, [pc, #24]	@ (800971c <vTaskInternalSetTimeOutState+0x24>)
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009708:	4b05      	ldr	r3, [pc, #20]	@ (8009720 <vTaskInternalSetTimeOutState+0x28>)
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	605a      	str	r2, [r3, #4]
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	24000ed4 	.word	0x24000ed4
 8009720:	24000ec0 	.word	0x24000ec0

08009724 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b088      	sub	sp, #32
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10b      	bne.n	800974c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	613b      	str	r3, [r7, #16]
}
 8009746:	bf00      	nop
 8009748:	bf00      	nop
 800974a:	e7fd      	b.n	8009748 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10b      	bne.n	800976a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	60fb      	str	r3, [r7, #12]
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop
 8009768:	e7fd      	b.n	8009766 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800976a:	f000 fe8d 	bl	800a488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800976e:	4b1d      	ldr	r3, [pc, #116]	@ (80097e4 <xTaskCheckForTimeOut+0xc0>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009786:	d102      	bne.n	800978e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009788:	2300      	movs	r3, #0
 800978a:	61fb      	str	r3, [r7, #28]
 800978c:	e023      	b.n	80097d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	4b15      	ldr	r3, [pc, #84]	@ (80097e8 <xTaskCheckForTimeOut+0xc4>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d007      	beq.n	80097aa <xTaskCheckForTimeOut+0x86>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d302      	bcc.n	80097aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097a4:	2301      	movs	r3, #1
 80097a6:	61fb      	str	r3, [r7, #28]
 80097a8:	e015      	b.n	80097d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d20b      	bcs.n	80097cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	1ad2      	subs	r2, r2, r3
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7ff ff99 	bl	80096f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097c6:	2300      	movs	r3, #0
 80097c8:	61fb      	str	r3, [r7, #28]
 80097ca:	e004      	b.n	80097d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2200      	movs	r2, #0
 80097d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097d2:	2301      	movs	r3, #1
 80097d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097d6:	f000 fe89 	bl	800a4ec <vPortExitCritical>

	return xReturn;
 80097da:	69fb      	ldr	r3, [r7, #28]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3720      	adds	r7, #32
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	24000ec0 	.word	0x24000ec0
 80097e8:	24000ed4 	.word	0x24000ed4

080097ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097ec:	b480      	push	{r7}
 80097ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097f0:	4b03      	ldr	r3, [pc, #12]	@ (8009800 <vTaskMissedYield+0x14>)
 80097f2:	2201      	movs	r2, #1
 80097f4:	601a      	str	r2, [r3, #0]
}
 80097f6:	bf00      	nop
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	24000ed0 	.word	0x24000ed0

08009804 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800980c:	f000 f852 	bl	80098b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009810:	4b06      	ldr	r3, [pc, #24]	@ (800982c <prvIdleTask+0x28>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d9f9      	bls.n	800980c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009818:	4b05      	ldr	r3, [pc, #20]	@ (8009830 <prvIdleTask+0x2c>)
 800981a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009828:	e7f0      	b.n	800980c <prvIdleTask+0x8>
 800982a:	bf00      	nop
 800982c:	240009ec 	.word	0x240009ec
 8009830:	e000ed04 	.word	0xe000ed04

08009834 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800983a:	2300      	movs	r3, #0
 800983c:	607b      	str	r3, [r7, #4]
 800983e:	e00c      	b.n	800985a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	4613      	mov	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4a12      	ldr	r2, [pc, #72]	@ (8009894 <prvInitialiseTaskLists+0x60>)
 800984c:	4413      	add	r3, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe fbce 	bl	8007ff0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3301      	adds	r3, #1
 8009858:	607b      	str	r3, [r7, #4]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b37      	cmp	r3, #55	@ 0x37
 800985e:	d9ef      	bls.n	8009840 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009860:	480d      	ldr	r0, [pc, #52]	@ (8009898 <prvInitialiseTaskLists+0x64>)
 8009862:	f7fe fbc5 	bl	8007ff0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009866:	480d      	ldr	r0, [pc, #52]	@ (800989c <prvInitialiseTaskLists+0x68>)
 8009868:	f7fe fbc2 	bl	8007ff0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800986c:	480c      	ldr	r0, [pc, #48]	@ (80098a0 <prvInitialiseTaskLists+0x6c>)
 800986e:	f7fe fbbf 	bl	8007ff0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009872:	480c      	ldr	r0, [pc, #48]	@ (80098a4 <prvInitialiseTaskLists+0x70>)
 8009874:	f7fe fbbc 	bl	8007ff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009878:	480b      	ldr	r0, [pc, #44]	@ (80098a8 <prvInitialiseTaskLists+0x74>)
 800987a:	f7fe fbb9 	bl	8007ff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800987e:	4b0b      	ldr	r3, [pc, #44]	@ (80098ac <prvInitialiseTaskLists+0x78>)
 8009880:	4a05      	ldr	r2, [pc, #20]	@ (8009898 <prvInitialiseTaskLists+0x64>)
 8009882:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009884:	4b0a      	ldr	r3, [pc, #40]	@ (80098b0 <prvInitialiseTaskLists+0x7c>)
 8009886:	4a05      	ldr	r2, [pc, #20]	@ (800989c <prvInitialiseTaskLists+0x68>)
 8009888:	601a      	str	r2, [r3, #0]
}
 800988a:	bf00      	nop
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	240009ec 	.word	0x240009ec
 8009898:	24000e4c 	.word	0x24000e4c
 800989c:	24000e60 	.word	0x24000e60
 80098a0:	24000e7c 	.word	0x24000e7c
 80098a4:	24000e90 	.word	0x24000e90
 80098a8:	24000ea8 	.word	0x24000ea8
 80098ac:	24000e74 	.word	0x24000e74
 80098b0:	24000e78 	.word	0x24000e78

080098b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098ba:	e019      	b.n	80098f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098bc:	f000 fde4 	bl	800a488 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c0:	4b10      	ldr	r3, [pc, #64]	@ (8009904 <prvCheckTasksWaitingTermination+0x50>)
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3304      	adds	r3, #4
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe fc19 	bl	8008104 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009908 <prvCheckTasksWaitingTermination+0x54>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	4a0b      	ldr	r2, [pc, #44]	@ (8009908 <prvCheckTasksWaitingTermination+0x54>)
 80098da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098dc:	4b0b      	ldr	r3, [pc, #44]	@ (800990c <prvCheckTasksWaitingTermination+0x58>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	3b01      	subs	r3, #1
 80098e2:	4a0a      	ldr	r2, [pc, #40]	@ (800990c <prvCheckTasksWaitingTermination+0x58>)
 80098e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098e6:	f000 fe01 	bl	800a4ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f810 	bl	8009910 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098f0:	4b06      	ldr	r3, [pc, #24]	@ (800990c <prvCheckTasksWaitingTermination+0x58>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1e1      	bne.n	80098bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098f8:	bf00      	nop
 80098fa:	bf00      	nop
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	24000e90 	.word	0x24000e90
 8009908:	24000ebc 	.word	0x24000ebc
 800990c:	24000ea4 	.word	0x24000ea4

08009910 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800991e:	2b00      	cmp	r3, #0
 8009920:	d108      	bne.n	8009934 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009926:	4618      	mov	r0, r3
 8009928:	f000 ff9e 	bl	800a868 <vPortFree>
				vPortFree( pxTCB );
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 ff9b 	bl	800a868 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009932:	e019      	b.n	8009968 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800993a:	2b01      	cmp	r3, #1
 800993c:	d103      	bne.n	8009946 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 ff92 	bl	800a868 <vPortFree>
	}
 8009944:	e010      	b.n	8009968 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800994c:	2b02      	cmp	r3, #2
 800994e:	d00b      	beq.n	8009968 <prvDeleteTCB+0x58>
	__asm volatile
 8009950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	60fb      	str	r3, [r7, #12]
}
 8009962:	bf00      	nop
 8009964:	bf00      	nop
 8009966:	e7fd      	b.n	8009964 <prvDeleteTCB+0x54>
	}
 8009968:	bf00      	nop
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009976:	4b0c      	ldr	r3, [pc, #48]	@ (80099a8 <prvResetNextTaskUnblockTime+0x38>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d104      	bne.n	800998a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009980:	4b0a      	ldr	r3, [pc, #40]	@ (80099ac <prvResetNextTaskUnblockTime+0x3c>)
 8009982:	f04f 32ff 	mov.w	r2, #4294967295
 8009986:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009988:	e008      	b.n	800999c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800998a:	4b07      	ldr	r3, [pc, #28]	@ (80099a8 <prvResetNextTaskUnblockTime+0x38>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	4a04      	ldr	r2, [pc, #16]	@ (80099ac <prvResetNextTaskUnblockTime+0x3c>)
 800999a:	6013      	str	r3, [r2, #0]
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	24000e74 	.word	0x24000e74
 80099ac:	24000edc 	.word	0x24000edc

080099b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099b6:	4b0b      	ldr	r3, [pc, #44]	@ (80099e4 <xTaskGetSchedulerState+0x34>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d102      	bne.n	80099c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099be:	2301      	movs	r3, #1
 80099c0:	607b      	str	r3, [r7, #4]
 80099c2:	e008      	b.n	80099d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099c4:	4b08      	ldr	r3, [pc, #32]	@ (80099e8 <xTaskGetSchedulerState+0x38>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d102      	bne.n	80099d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099cc:	2302      	movs	r3, #2
 80099ce:	607b      	str	r3, [r7, #4]
 80099d0:	e001      	b.n	80099d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099d2:	2300      	movs	r3, #0
 80099d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099d6:	687b      	ldr	r3, [r7, #4]
	}
 80099d8:	4618      	mov	r0, r3
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	24000ec8 	.word	0x24000ec8
 80099e8:	24000ee4 	.word	0x24000ee4

080099ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099f8:	2300      	movs	r3, #0
 80099fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d058      	beq.n	8009ab4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a02:	4b2f      	ldr	r3, [pc, #188]	@ (8009ac0 <xTaskPriorityDisinherit+0xd4>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d00b      	beq.n	8009a24 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	60fb      	str	r3, [r7, #12]
}
 8009a1e:	bf00      	nop
 8009a20:	bf00      	nop
 8009a22:	e7fd      	b.n	8009a20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d10b      	bne.n	8009a44 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a30:	f383 8811 	msr	BASEPRI, r3
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	60bb      	str	r3, [r7, #8]
}
 8009a3e:	bf00      	nop
 8009a40:	bf00      	nop
 8009a42:	e7fd      	b.n	8009a40 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a48:	1e5a      	subs	r2, r3, #1
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d02c      	beq.n	8009ab4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d128      	bne.n	8009ab4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	3304      	adds	r3, #4
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fe fb4c 	bl	8008104 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a84:	4b0f      	ldr	r3, [pc, #60]	@ (8009ac4 <xTaskPriorityDisinherit+0xd8>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d903      	bls.n	8009a94 <xTaskPriorityDisinherit+0xa8>
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a90:	4a0c      	ldr	r2, [pc, #48]	@ (8009ac4 <xTaskPriorityDisinherit+0xd8>)
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a98:	4613      	mov	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4a09      	ldr	r2, [pc, #36]	@ (8009ac8 <xTaskPriorityDisinherit+0xdc>)
 8009aa2:	441a      	add	r2, r3
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f7fe facd 	bl	800804a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ab4:	697b      	ldr	r3, [r7, #20]
	}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	240009e8 	.word	0x240009e8
 8009ac4:	24000ec4 	.word	0x24000ec4
 8009ac8:	240009ec 	.word	0x240009ec

08009acc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ad6:	4b21      	ldr	r3, [pc, #132]	@ (8009b5c <prvAddCurrentTaskToDelayedList+0x90>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009adc:	4b20      	ldr	r3, [pc, #128]	@ (8009b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fe fb0e 	bl	8008104 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aee:	d10a      	bne.n	8009b06 <prvAddCurrentTaskToDelayedList+0x3a>
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d007      	beq.n	8009b06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009af6:	4b1a      	ldr	r3, [pc, #104]	@ (8009b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3304      	adds	r3, #4
 8009afc:	4619      	mov	r1, r3
 8009afe:	4819      	ldr	r0, [pc, #100]	@ (8009b64 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b00:	f7fe faa3 	bl	800804a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b04:	e026      	b.n	8009b54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b0e:	4b14      	ldr	r3, [pc, #80]	@ (8009b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d209      	bcs.n	8009b32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b1e:	4b12      	ldr	r3, [pc, #72]	@ (8009b68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	4b0f      	ldr	r3, [pc, #60]	@ (8009b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3304      	adds	r3, #4
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	f7fe fab1 	bl	8008092 <vListInsert>
}
 8009b30:	e010      	b.n	8009b54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b32:	4b0e      	ldr	r3, [pc, #56]	@ (8009b6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	4b0a      	ldr	r3, [pc, #40]	@ (8009b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4610      	mov	r0, r2
 8009b40:	f7fe faa7 	bl	8008092 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b44:	4b0a      	ldr	r3, [pc, #40]	@ (8009b70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d202      	bcs.n	8009b54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b4e:	4a08      	ldr	r2, [pc, #32]	@ (8009b70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	6013      	str	r3, [r2, #0]
}
 8009b54:	bf00      	nop
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	24000ec0 	.word	0x24000ec0
 8009b60:	240009e8 	.word	0x240009e8
 8009b64:	24000ea8 	.word	0x24000ea8
 8009b68:	24000e78 	.word	0x24000e78
 8009b6c:	24000e74 	.word	0x24000e74
 8009b70:	24000edc 	.word	0x24000edc

08009b74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08a      	sub	sp, #40	@ 0x28
 8009b78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b7e:	f000 fb13 	bl	800a1a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b82:	4b1d      	ldr	r3, [pc, #116]	@ (8009bf8 <xTimerCreateTimerTask+0x84>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d021      	beq.n	8009bce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b92:	1d3a      	adds	r2, r7, #4
 8009b94:	f107 0108 	add.w	r1, r7, #8
 8009b98:	f107 030c 	add.w	r3, r7, #12
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe fa0d 	bl	8007fbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	9202      	str	r2, [sp, #8]
 8009baa:	9301      	str	r3, [sp, #4]
 8009bac:	2302      	movs	r3, #2
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	460a      	mov	r2, r1
 8009bb4:	4911      	ldr	r1, [pc, #68]	@ (8009bfc <xTimerCreateTimerTask+0x88>)
 8009bb6:	4812      	ldr	r0, [pc, #72]	@ (8009c00 <xTimerCreateTimerTask+0x8c>)
 8009bb8:	f7fe ffc8 	bl	8008b4c <xTaskCreateStatic>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	4a11      	ldr	r2, [pc, #68]	@ (8009c04 <xTimerCreateTimerTask+0x90>)
 8009bc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009bc2:	4b10      	ldr	r3, [pc, #64]	@ (8009c04 <xTimerCreateTimerTask+0x90>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10b      	bne.n	8009bec <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	613b      	str	r3, [r7, #16]
}
 8009be6:	bf00      	nop
 8009be8:	bf00      	nop
 8009bea:	e7fd      	b.n	8009be8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009bec:	697b      	ldr	r3, [r7, #20]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	24000f18 	.word	0x24000f18
 8009bfc:	0800ab54 	.word	0x0800ab54
 8009c00:	08009d41 	.word	0x08009d41
 8009c04:	24000f1c 	.word	0x24000f1c

08009c08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b08a      	sub	sp, #40	@ 0x28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10b      	bne.n	8009c38 <xTimerGenericCommand+0x30>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	623b      	str	r3, [r7, #32]
}
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
 8009c36:	e7fd      	b.n	8009c34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c38:	4b19      	ldr	r3, [pc, #100]	@ (8009ca0 <xTimerGenericCommand+0x98>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d02a      	beq.n	8009c96 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2b05      	cmp	r3, #5
 8009c50:	dc18      	bgt.n	8009c84 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c52:	f7ff fead 	bl	80099b0 <xTaskGetSchedulerState>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d109      	bne.n	8009c70 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c5c:	4b10      	ldr	r3, [pc, #64]	@ (8009ca0 <xTimerGenericCommand+0x98>)
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	f107 0110 	add.w	r1, r7, #16
 8009c64:	2300      	movs	r3, #0
 8009c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c68:	f7fe fb80 	bl	800836c <xQueueGenericSend>
 8009c6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c6e:	e012      	b.n	8009c96 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c70:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca0 <xTimerGenericCommand+0x98>)
 8009c72:	6818      	ldr	r0, [r3, #0]
 8009c74:	f107 0110 	add.w	r1, r7, #16
 8009c78:	2300      	movs	r3, #0
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f7fe fb76 	bl	800836c <xQueueGenericSend>
 8009c80:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c82:	e008      	b.n	8009c96 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c84:	4b06      	ldr	r3, [pc, #24]	@ (8009ca0 <xTimerGenericCommand+0x98>)
 8009c86:	6818      	ldr	r0, [r3, #0]
 8009c88:	f107 0110 	add.w	r1, r7, #16
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	f7fe fc6e 	bl	8008570 <xQueueGenericSendFromISR>
 8009c94:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3728      	adds	r7, #40	@ 0x28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	24000f18 	.word	0x24000f18

08009ca4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af02      	add	r7, sp, #8
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cae:	4b23      	ldr	r3, [pc, #140]	@ (8009d3c <prvProcessExpiredTimer+0x98>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	3304      	adds	r3, #4
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fe fa21 	bl	8008104 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cc8:	f003 0304 	and.w	r3, r3, #4
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d023      	beq.n	8009d18 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	699a      	ldr	r2, [r3, #24]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	18d1      	adds	r1, r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	6978      	ldr	r0, [r7, #20]
 8009cde:	f000 f8d5 	bl	8009e8c <prvInsertTimerInActiveList>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d020      	beq.n	8009d2a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ce8:	2300      	movs	r3, #0
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	2300      	movs	r3, #0
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	6978      	ldr	r0, [r7, #20]
 8009cf4:	f7ff ff88 	bl	8009c08 <xTimerGenericCommand>
 8009cf8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d114      	bne.n	8009d2a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	60fb      	str	r3, [r7, #12]
}
 8009d12:	bf00      	nop
 8009d14:	bf00      	nop
 8009d16:	e7fd      	b.n	8009d14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d1e:	f023 0301 	bic.w	r3, r3, #1
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	6978      	ldr	r0, [r7, #20]
 8009d30:	4798      	blx	r3
}
 8009d32:	bf00      	nop
 8009d34:	3718      	adds	r7, #24
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	24000f10 	.word	0x24000f10

08009d40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d48:	f107 0308 	add.w	r3, r7, #8
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 f859 	bl	8009e04 <prvGetNextExpireTime>
 8009d52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	4619      	mov	r1, r3
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f000 f805 	bl	8009d68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d5e:	f000 f8d7 	bl	8009f10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d62:	bf00      	nop
 8009d64:	e7f0      	b.n	8009d48 <prvTimerTask+0x8>
	...

08009d68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d72:	f7ff fa37 	bl	80091e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d76:	f107 0308 	add.w	r3, r7, #8
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 f866 	bl	8009e4c <prvSampleTimeNow>
 8009d80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d130      	bne.n	8009dea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10a      	bne.n	8009da4 <prvProcessTimerOrBlockTask+0x3c>
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d806      	bhi.n	8009da4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d96:	f7ff fa33 	bl	8009200 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d9a:	68f9      	ldr	r1, [r7, #12]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7ff ff81 	bl	8009ca4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009da2:	e024      	b.n	8009dee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d008      	beq.n	8009dbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009daa:	4b13      	ldr	r3, [pc, #76]	@ (8009df8 <prvProcessTimerOrBlockTask+0x90>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <prvProcessTimerOrBlockTask+0x50>
 8009db4:	2301      	movs	r3, #1
 8009db6:	e000      	b.n	8009dba <prvProcessTimerOrBlockTask+0x52>
 8009db8:	2300      	movs	r3, #0
 8009dba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8009dfc <prvProcessTimerOrBlockTask+0x94>)
 8009dbe:	6818      	ldr	r0, [r3, #0]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	f7fe fe8b 	bl	8008ae4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009dce:	f7ff fa17 	bl	8009200 <xTaskResumeAll>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10a      	bne.n	8009dee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009dd8:	4b09      	ldr	r3, [pc, #36]	@ (8009e00 <prvProcessTimerOrBlockTask+0x98>)
 8009dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dde:	601a      	str	r2, [r3, #0]
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	f3bf 8f6f 	isb	sy
}
 8009de8:	e001      	b.n	8009dee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009dea:	f7ff fa09 	bl	8009200 <xTaskResumeAll>
}
 8009dee:	bf00      	nop
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	24000f14 	.word	0x24000f14
 8009dfc:	24000f18 	.word	0x24000f18
 8009e00:	e000ed04 	.word	0xe000ed04

08009e04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8009e48 <prvGetNextExpireTime+0x44>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <prvGetNextExpireTime+0x16>
 8009e16:	2201      	movs	r2, #1
 8009e18:	e000      	b.n	8009e1c <prvGetNextExpireTime+0x18>
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d105      	bne.n	8009e34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e28:	4b07      	ldr	r3, [pc, #28]	@ (8009e48 <prvGetNextExpireTime+0x44>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	e001      	b.n	8009e38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e34:	2300      	movs	r3, #0
 8009e36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e38:	68fb      	ldr	r3, [r7, #12]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	24000f10 	.word	0x24000f10

08009e4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e54:	f7ff fa72 	bl	800933c <xTaskGetTickCount>
 8009e58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009e88 <prvSampleTimeNow+0x3c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d205      	bcs.n	8009e70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e64:	f000 f93a 	bl	800a0dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	e002      	b.n	8009e76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e76:	4a04      	ldr	r2, [pc, #16]	@ (8009e88 <prvSampleTimeNow+0x3c>)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	24000f20 	.word	0x24000f20

08009e8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d812      	bhi.n	8009ed8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	1ad2      	subs	r2, r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d302      	bcc.n	8009ec6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	e01b      	b.n	8009efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ec6:	4b10      	ldr	r3, [pc, #64]	@ (8009f08 <prvInsertTimerInActiveList+0x7c>)
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	f7fe f8de 	bl	8008092 <vListInsert>
 8009ed6:	e012      	b.n	8009efe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d206      	bcs.n	8009eee <prvInsertTimerInActiveList+0x62>
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d302      	bcc.n	8009eee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	e007      	b.n	8009efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009eee:	4b07      	ldr	r3, [pc, #28]	@ (8009f0c <prvInsertTimerInActiveList+0x80>)
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f7fe f8ca 	bl	8008092 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009efe:	697b      	ldr	r3, [r7, #20]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	24000f14 	.word	0x24000f14
 8009f0c:	24000f10 	.word	0x24000f10

08009f10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b08e      	sub	sp, #56	@ 0x38
 8009f14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f16:	e0ce      	b.n	800a0b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	da19      	bge.n	8009f52 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f1e:	1d3b      	adds	r3, r7, #4
 8009f20:	3304      	adds	r3, #4
 8009f22:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10b      	bne.n	8009f42 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	61fb      	str	r3, [r7, #28]
}
 8009f3c:	bf00      	nop
 8009f3e:	bf00      	nop
 8009f40:	e7fd      	b.n	8009f3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f48:	6850      	ldr	r0, [r2, #4]
 8009f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f4c:	6892      	ldr	r2, [r2, #8]
 8009f4e:	4611      	mov	r1, r2
 8009f50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f2c0 80ae 	blt.w	800a0b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d004      	beq.n	8009f70 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f68:	3304      	adds	r3, #4
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fe f8ca 	bl	8008104 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f70:	463b      	mov	r3, r7
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff ff6a 	bl	8009e4c <prvSampleTimeNow>
 8009f78:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b09      	cmp	r3, #9
 8009f7e:	f200 8097 	bhi.w	800a0b0 <prvProcessReceivedCommands+0x1a0>
 8009f82:	a201      	add	r2, pc, #4	@ (adr r2, 8009f88 <prvProcessReceivedCommands+0x78>)
 8009f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f88:	08009fb1 	.word	0x08009fb1
 8009f8c:	08009fb1 	.word	0x08009fb1
 8009f90:	08009fb1 	.word	0x08009fb1
 8009f94:	0800a027 	.word	0x0800a027
 8009f98:	0800a03b 	.word	0x0800a03b
 8009f9c:	0800a087 	.word	0x0800a087
 8009fa0:	08009fb1 	.word	0x08009fb1
 8009fa4:	08009fb1 	.word	0x08009fb1
 8009fa8:	0800a027 	.word	0x0800a027
 8009fac:	0800a03b 	.word	0x0800a03b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fb6:	f043 0301 	orr.w	r3, r3, #1
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	18d1      	adds	r1, r2, r3
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fd0:	f7ff ff5c 	bl	8009e8c <prvInsertTimerInActiveList>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d06c      	beq.n	800a0b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fe0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fe8:	f003 0304 	and.w	r3, r3, #4
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d061      	beq.n	800a0b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	441a      	add	r2, r3
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	2100      	movs	r1, #0
 800a000:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a002:	f7ff fe01 	bl	8009c08 <xTimerGenericCommand>
 800a006:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d152      	bne.n	800a0b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	61bb      	str	r3, [r7, #24]
}
 800a020:	bf00      	nop
 800a022:	bf00      	nop
 800a024:	e7fd      	b.n	800a022 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a02c:	f023 0301 	bic.w	r3, r3, #1
 800a030:	b2da      	uxtb	r2, r3
 800a032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a034:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a038:	e03d      	b.n	800a0b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a040:	f043 0301 	orr.w	r3, r3, #1
 800a044:	b2da      	uxtb	r2, r3
 800a046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a048:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a050:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10b      	bne.n	800a072 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	617b      	str	r3, [r7, #20]
}
 800a06c:	bf00      	nop
 800a06e:	bf00      	nop
 800a070:	e7fd      	b.n	800a06e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a074:	699a      	ldr	r2, [r3, #24]
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	18d1      	adds	r1, r2, r3
 800a07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a07e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a080:	f7ff ff04 	bl	8009e8c <prvInsertTimerInActiveList>
					break;
 800a084:	e017      	b.n	800a0b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a08c:	f003 0302 	and.w	r3, r3, #2
 800a090:	2b00      	cmp	r3, #0
 800a092:	d103      	bne.n	800a09c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a094:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a096:	f000 fbe7 	bl	800a868 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a09a:	e00c      	b.n	800a0b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0a2:	f023 0301 	bic.w	r3, r3, #1
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a0ae:	e002      	b.n	800a0b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a0b0:	bf00      	nop
 800a0b2:	e000      	b.n	800a0b6 <prvProcessReceivedCommands+0x1a6>
					break;
 800a0b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0b6:	4b08      	ldr	r3, [pc, #32]	@ (800a0d8 <prvProcessReceivedCommands+0x1c8>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	1d39      	adds	r1, r7, #4
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe faf4 	bl	80086ac <xQueueReceive>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f47f af26 	bne.w	8009f18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a0cc:	bf00      	nop
 800a0ce:	bf00      	nop
 800a0d0:	3730      	adds	r7, #48	@ 0x30
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	24000f18 	.word	0x24000f18

0800a0dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0e2:	e049      	b.n	800a178 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0e4:	4b2e      	ldr	r3, [pc, #184]	@ (800a1a0 <prvSwitchTimerLists+0xc4>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ee:	4b2c      	ldr	r3, [pc, #176]	@ (800a1a0 <prvSwitchTimerLists+0xc4>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fe f801 	bl	8008104 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b00      	cmp	r3, #0
 800a116:	d02f      	beq.n	800a178 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	4413      	add	r3, r2
 800a120:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	429a      	cmp	r2, r3
 800a128:	d90e      	bls.n	800a148 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a136:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a0 <prvSwitchTimerLists+0xc4>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4619      	mov	r1, r3
 800a140:	4610      	mov	r0, r2
 800a142:	f7fd ffa6 	bl	8008092 <vListInsert>
 800a146:	e017      	b.n	800a178 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a148:	2300      	movs	r3, #0
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	2300      	movs	r3, #0
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	2100      	movs	r1, #0
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7ff fd58 	bl	8009c08 <xTimerGenericCommand>
 800a158:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10b      	bne.n	800a178 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	603b      	str	r3, [r7, #0]
}
 800a172:	bf00      	nop
 800a174:	bf00      	nop
 800a176:	e7fd      	b.n	800a174 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a178:	4b09      	ldr	r3, [pc, #36]	@ (800a1a0 <prvSwitchTimerLists+0xc4>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1b0      	bne.n	800a0e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a182:	4b07      	ldr	r3, [pc, #28]	@ (800a1a0 <prvSwitchTimerLists+0xc4>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a188:	4b06      	ldr	r3, [pc, #24]	@ (800a1a4 <prvSwitchTimerLists+0xc8>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a04      	ldr	r2, [pc, #16]	@ (800a1a0 <prvSwitchTimerLists+0xc4>)
 800a18e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a190:	4a04      	ldr	r2, [pc, #16]	@ (800a1a4 <prvSwitchTimerLists+0xc8>)
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	6013      	str	r3, [r2, #0]
}
 800a196:	bf00      	nop
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	24000f10 	.word	0x24000f10
 800a1a4:	24000f14 	.word	0x24000f14

0800a1a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a1ae:	f000 f96b 	bl	800a488 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a1b2:	4b15      	ldr	r3, [pc, #84]	@ (800a208 <prvCheckForValidListAndQueue+0x60>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d120      	bne.n	800a1fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a1ba:	4814      	ldr	r0, [pc, #80]	@ (800a20c <prvCheckForValidListAndQueue+0x64>)
 800a1bc:	f7fd ff18 	bl	8007ff0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a1c0:	4813      	ldr	r0, [pc, #76]	@ (800a210 <prvCheckForValidListAndQueue+0x68>)
 800a1c2:	f7fd ff15 	bl	8007ff0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a1c6:	4b13      	ldr	r3, [pc, #76]	@ (800a214 <prvCheckForValidListAndQueue+0x6c>)
 800a1c8:	4a10      	ldr	r2, [pc, #64]	@ (800a20c <prvCheckForValidListAndQueue+0x64>)
 800a1ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a1cc:	4b12      	ldr	r3, [pc, #72]	@ (800a218 <prvCheckForValidListAndQueue+0x70>)
 800a1ce:	4a10      	ldr	r2, [pc, #64]	@ (800a210 <prvCheckForValidListAndQueue+0x68>)
 800a1d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	4b11      	ldr	r3, [pc, #68]	@ (800a21c <prvCheckForValidListAndQueue+0x74>)
 800a1d8:	4a11      	ldr	r2, [pc, #68]	@ (800a220 <prvCheckForValidListAndQueue+0x78>)
 800a1da:	2110      	movs	r1, #16
 800a1dc:	200a      	movs	r0, #10
 800a1de:	f7fe f825 	bl	800822c <xQueueGenericCreateStatic>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	4a08      	ldr	r2, [pc, #32]	@ (800a208 <prvCheckForValidListAndQueue+0x60>)
 800a1e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a1e8:	4b07      	ldr	r3, [pc, #28]	@ (800a208 <prvCheckForValidListAndQueue+0x60>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d005      	beq.n	800a1fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a1f0:	4b05      	ldr	r3, [pc, #20]	@ (800a208 <prvCheckForValidListAndQueue+0x60>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	490b      	ldr	r1, [pc, #44]	@ (800a224 <prvCheckForValidListAndQueue+0x7c>)
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe fc4a 	bl	8008a90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1fc:	f000 f976 	bl	800a4ec <vPortExitCritical>
}
 800a200:	bf00      	nop
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	24000f18 	.word	0x24000f18
 800a20c:	24000ee8 	.word	0x24000ee8
 800a210:	24000efc 	.word	0x24000efc
 800a214:	24000f10 	.word	0x24000f10
 800a218:	24000f14 	.word	0x24000f14
 800a21c:	24000fc4 	.word	0x24000fc4
 800a220:	24000f24 	.word	0x24000f24
 800a224:	0800ab5c 	.word	0x0800ab5c

0800a228 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3b04      	subs	r3, #4
 800a238:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3b04      	subs	r3, #4
 800a246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	f023 0201 	bic.w	r2, r3, #1
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	3b04      	subs	r3, #4
 800a256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a258:	4a0c      	ldr	r2, [pc, #48]	@ (800a28c <pxPortInitialiseStack+0x64>)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	3b14      	subs	r3, #20
 800a262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3b04      	subs	r3, #4
 800a26e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f06f 0202 	mvn.w	r2, #2
 800a276:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3b20      	subs	r3, #32
 800a27c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a27e:	68fb      	ldr	r3, [r7, #12]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	0800a291 	.word	0x0800a291

0800a290 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a29a:	4b13      	ldr	r3, [pc, #76]	@ (800a2e8 <prvTaskExitError+0x58>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a2:	d00b      	beq.n	800a2bc <prvTaskExitError+0x2c>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	60fb      	str	r3, [r7, #12]
}
 800a2b6:	bf00      	nop
 800a2b8:	bf00      	nop
 800a2ba:	e7fd      	b.n	800a2b8 <prvTaskExitError+0x28>
	__asm volatile
 800a2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	60bb      	str	r3, [r7, #8]
}
 800a2ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a2d0:	bf00      	nop
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0fc      	beq.n	800a2d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2d8:	bf00      	nop
 800a2da:	bf00      	nop
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	24000024 	.word	0x24000024
 800a2ec:	00000000 	.word	0x00000000

0800a2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2f0:	4b07      	ldr	r3, [pc, #28]	@ (800a310 <pxCurrentTCBConst2>)
 800a2f2:	6819      	ldr	r1, [r3, #0]
 800a2f4:	6808      	ldr	r0, [r1, #0]
 800a2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fa:	f380 8809 	msr	PSP, r0
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f04f 0000 	mov.w	r0, #0
 800a306:	f380 8811 	msr	BASEPRI, r0
 800a30a:	4770      	bx	lr
 800a30c:	f3af 8000 	nop.w

0800a310 <pxCurrentTCBConst2>:
 800a310:	240009e8 	.word	0x240009e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a314:	bf00      	nop
 800a316:	bf00      	nop

0800a318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a318:	4808      	ldr	r0, [pc, #32]	@ (800a33c <prvPortStartFirstTask+0x24>)
 800a31a:	6800      	ldr	r0, [r0, #0]
 800a31c:	6800      	ldr	r0, [r0, #0]
 800a31e:	f380 8808 	msr	MSP, r0
 800a322:	f04f 0000 	mov.w	r0, #0
 800a326:	f380 8814 	msr	CONTROL, r0
 800a32a:	b662      	cpsie	i
 800a32c:	b661      	cpsie	f
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	df00      	svc	0
 800a338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a33a:	bf00      	nop
 800a33c:	e000ed08 	.word	0xe000ed08

0800a340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a346:	4b47      	ldr	r3, [pc, #284]	@ (800a464 <xPortStartScheduler+0x124>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a47      	ldr	r2, [pc, #284]	@ (800a468 <xPortStartScheduler+0x128>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d10b      	bne.n	800a368 <xPortStartScheduler+0x28>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	613b      	str	r3, [r7, #16]
}
 800a362:	bf00      	nop
 800a364:	bf00      	nop
 800a366:	e7fd      	b.n	800a364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a368:	4b3e      	ldr	r3, [pc, #248]	@ (800a464 <xPortStartScheduler+0x124>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a3f      	ldr	r2, [pc, #252]	@ (800a46c <xPortStartScheduler+0x12c>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d10b      	bne.n	800a38a <xPortStartScheduler+0x4a>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	60fb      	str	r3, [r7, #12]
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop
 800a388:	e7fd      	b.n	800a386 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a38a:	4b39      	ldr	r3, [pc, #228]	@ (800a470 <xPortStartScheduler+0x130>)
 800a38c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	b2db      	uxtb	r3, r3
 800a394:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	22ff      	movs	r2, #255	@ 0xff
 800a39a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3a4:	78fb      	ldrb	r3, [r7, #3]
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a3ac:	b2da      	uxtb	r2, r3
 800a3ae:	4b31      	ldr	r3, [pc, #196]	@ (800a474 <xPortStartScheduler+0x134>)
 800a3b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3b2:	4b31      	ldr	r3, [pc, #196]	@ (800a478 <xPortStartScheduler+0x138>)
 800a3b4:	2207      	movs	r2, #7
 800a3b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3b8:	e009      	b.n	800a3ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a3ba:	4b2f      	ldr	r3, [pc, #188]	@ (800a478 <xPortStartScheduler+0x138>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	4a2d      	ldr	r2, [pc, #180]	@ (800a478 <xPortStartScheduler+0x138>)
 800a3c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3ce:	78fb      	ldrb	r3, [r7, #3]
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3d6:	2b80      	cmp	r3, #128	@ 0x80
 800a3d8:	d0ef      	beq.n	800a3ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3da:	4b27      	ldr	r3, [pc, #156]	@ (800a478 <xPortStartScheduler+0x138>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f1c3 0307 	rsb	r3, r3, #7
 800a3e2:	2b04      	cmp	r3, #4
 800a3e4:	d00b      	beq.n	800a3fe <xPortStartScheduler+0xbe>
	__asm volatile
 800a3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	60bb      	str	r3, [r7, #8]
}
 800a3f8:	bf00      	nop
 800a3fa:	bf00      	nop
 800a3fc:	e7fd      	b.n	800a3fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3fe:	4b1e      	ldr	r3, [pc, #120]	@ (800a478 <xPortStartScheduler+0x138>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	4a1c      	ldr	r2, [pc, #112]	@ (800a478 <xPortStartScheduler+0x138>)
 800a406:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a408:	4b1b      	ldr	r3, [pc, #108]	@ (800a478 <xPortStartScheduler+0x138>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a410:	4a19      	ldr	r2, [pc, #100]	@ (800a478 <xPortStartScheduler+0x138>)
 800a412:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	b2da      	uxtb	r2, r3
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a41c:	4b17      	ldr	r3, [pc, #92]	@ (800a47c <xPortStartScheduler+0x13c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a16      	ldr	r2, [pc, #88]	@ (800a47c <xPortStartScheduler+0x13c>)
 800a422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a426:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a428:	4b14      	ldr	r3, [pc, #80]	@ (800a47c <xPortStartScheduler+0x13c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a13      	ldr	r2, [pc, #76]	@ (800a47c <xPortStartScheduler+0x13c>)
 800a42e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a432:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a434:	f000 f8da 	bl	800a5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a438:	4b11      	ldr	r3, [pc, #68]	@ (800a480 <xPortStartScheduler+0x140>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a43e:	f000 f8f9 	bl	800a634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a442:	4b10      	ldr	r3, [pc, #64]	@ (800a484 <xPortStartScheduler+0x144>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a0f      	ldr	r2, [pc, #60]	@ (800a484 <xPortStartScheduler+0x144>)
 800a448:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a44c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a44e:	f7ff ff63 	bl	800a318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a452:	f7ff f83d 	bl	80094d0 <vTaskSwitchContext>
	prvTaskExitError();
 800a456:	f7ff ff1b 	bl	800a290 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	e000ed00 	.word	0xe000ed00
 800a468:	410fc271 	.word	0x410fc271
 800a46c:	410fc270 	.word	0x410fc270
 800a470:	e000e400 	.word	0xe000e400
 800a474:	24001014 	.word	0x24001014
 800a478:	24001018 	.word	0x24001018
 800a47c:	e000ed20 	.word	0xe000ed20
 800a480:	24000024 	.word	0x24000024
 800a484:	e000ef34 	.word	0xe000ef34

0800a488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	607b      	str	r3, [r7, #4]
}
 800a4a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a4a2:	4b10      	ldr	r3, [pc, #64]	@ (800a4e4 <vPortEnterCritical+0x5c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	4a0e      	ldr	r2, [pc, #56]	@ (800a4e4 <vPortEnterCritical+0x5c>)
 800a4aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a4e4 <vPortEnterCritical+0x5c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d110      	bne.n	800a4d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e8 <vPortEnterCritical+0x60>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00b      	beq.n	800a4d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	603b      	str	r3, [r7, #0]
}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	e7fd      	b.n	800a4d2 <vPortEnterCritical+0x4a>
	}
}
 800a4d6:	bf00      	nop
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	24000024 	.word	0x24000024
 800a4e8:	e000ed04 	.word	0xe000ed04

0800a4ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4f2:	4b12      	ldr	r3, [pc, #72]	@ (800a53c <vPortExitCritical+0x50>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10b      	bne.n	800a512 <vPortExitCritical+0x26>
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	607b      	str	r3, [r7, #4]
}
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	e7fd      	b.n	800a50e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a512:	4b0a      	ldr	r3, [pc, #40]	@ (800a53c <vPortExitCritical+0x50>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3b01      	subs	r3, #1
 800a518:	4a08      	ldr	r2, [pc, #32]	@ (800a53c <vPortExitCritical+0x50>)
 800a51a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a51c:	4b07      	ldr	r3, [pc, #28]	@ (800a53c <vPortExitCritical+0x50>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d105      	bne.n	800a530 <vPortExitCritical+0x44>
 800a524:	2300      	movs	r3, #0
 800a526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	f383 8811 	msr	BASEPRI, r3
}
 800a52e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	24000024 	.word	0x24000024

0800a540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a540:	f3ef 8009 	mrs	r0, PSP
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	4b15      	ldr	r3, [pc, #84]	@ (800a5a0 <pxCurrentTCBConst>)
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	f01e 0f10 	tst.w	lr, #16
 800a550:	bf08      	it	eq
 800a552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55a:	6010      	str	r0, [r2, #0]
 800a55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a564:	f380 8811 	msr	BASEPRI, r0
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f7fe ffae 	bl	80094d0 <vTaskSwitchContext>
 800a574:	f04f 0000 	mov.w	r0, #0
 800a578:	f380 8811 	msr	BASEPRI, r0
 800a57c:	bc09      	pop	{r0, r3}
 800a57e:	6819      	ldr	r1, [r3, #0]
 800a580:	6808      	ldr	r0, [r1, #0]
 800a582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a586:	f01e 0f10 	tst.w	lr, #16
 800a58a:	bf08      	it	eq
 800a58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a590:	f380 8809 	msr	PSP, r0
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	f3af 8000 	nop.w

0800a5a0 <pxCurrentTCBConst>:
 800a5a0:	240009e8 	.word	0x240009e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop

0800a5a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	607b      	str	r3, [r7, #4]
}
 800a5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5c2:	f7fe fecb 	bl	800935c <xTaskIncrementTick>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5cc:	4b06      	ldr	r3, [pc, #24]	@ (800a5e8 <xPortSysTickHandler+0x40>)
 800a5ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	f383 8811 	msr	BASEPRI, r3
}
 800a5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	e000ed04 	.word	0xe000ed04

0800a5ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a620 <vPortSetupTimerInterrupt+0x34>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a624 <vPortSetupTimerInterrupt+0x38>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a628 <vPortSetupTimerInterrupt+0x3c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a0a      	ldr	r2, [pc, #40]	@ (800a62c <vPortSetupTimerInterrupt+0x40>)
 800a602:	fba2 2303 	umull	r2, r3, r2, r3
 800a606:	099b      	lsrs	r3, r3, #6
 800a608:	4a09      	ldr	r2, [pc, #36]	@ (800a630 <vPortSetupTimerInterrupt+0x44>)
 800a60a:	3b01      	subs	r3, #1
 800a60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a60e:	4b04      	ldr	r3, [pc, #16]	@ (800a620 <vPortSetupTimerInterrupt+0x34>)
 800a610:	2207      	movs	r2, #7
 800a612:	601a      	str	r2, [r3, #0]
}
 800a614:	bf00      	nop
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	e000e010 	.word	0xe000e010
 800a624:	e000e018 	.word	0xe000e018
 800a628:	24000014 	.word	0x24000014
 800a62c:	10624dd3 	.word	0x10624dd3
 800a630:	e000e014 	.word	0xe000e014

0800a634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a644 <vPortEnableVFP+0x10>
 800a638:	6801      	ldr	r1, [r0, #0]
 800a63a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a63e:	6001      	str	r1, [r0, #0]
 800a640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a642:	bf00      	nop
 800a644:	e000ed88 	.word	0xe000ed88

0800a648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a64e:	f3ef 8305 	mrs	r3, IPSR
 800a652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2b0f      	cmp	r3, #15
 800a658:	d915      	bls.n	800a686 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a65a:	4a18      	ldr	r2, [pc, #96]	@ (800a6bc <vPortValidateInterruptPriority+0x74>)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4413      	add	r3, r2
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a664:	4b16      	ldr	r3, [pc, #88]	@ (800a6c0 <vPortValidateInterruptPriority+0x78>)
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	7afa      	ldrb	r2, [r7, #11]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d20b      	bcs.n	800a686 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	607b      	str	r3, [r7, #4]
}
 800a680:	bf00      	nop
 800a682:	bf00      	nop
 800a684:	e7fd      	b.n	800a682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a686:	4b0f      	ldr	r3, [pc, #60]	@ (800a6c4 <vPortValidateInterruptPriority+0x7c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a68e:	4b0e      	ldr	r3, [pc, #56]	@ (800a6c8 <vPortValidateInterruptPriority+0x80>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	429a      	cmp	r2, r3
 800a694:	d90b      	bls.n	800a6ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	603b      	str	r3, [r7, #0]
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	e7fd      	b.n	800a6aa <vPortValidateInterruptPriority+0x62>
	}
 800a6ae:	bf00      	nop
 800a6b0:	3714      	adds	r7, #20
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	e000e3f0 	.word	0xe000e3f0
 800a6c0:	24001014 	.word	0x24001014
 800a6c4:	e000ed0c 	.word	0xe000ed0c
 800a6c8:	24001018 	.word	0x24001018

0800a6cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08a      	sub	sp, #40	@ 0x28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6d8:	f7fe fd84 	bl	80091e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6dc:	4b5c      	ldr	r3, [pc, #368]	@ (800a850 <pvPortMalloc+0x184>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6e4:	f000 f924 	bl	800a930 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6e8:	4b5a      	ldr	r3, [pc, #360]	@ (800a854 <pvPortMalloc+0x188>)
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f040 8095 	bne.w	800a820 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d01e      	beq.n	800a73a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a6fc:	2208      	movs	r2, #8
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4413      	add	r3, r2
 800a702:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f003 0307 	and.w	r3, r3, #7
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d015      	beq.n	800a73a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f023 0307 	bic.w	r3, r3, #7
 800a714:	3308      	adds	r3, #8
 800a716:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f003 0307 	and.w	r3, r3, #7
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00b      	beq.n	800a73a <pvPortMalloc+0x6e>
	__asm volatile
 800a722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a726:	f383 8811 	msr	BASEPRI, r3
 800a72a:	f3bf 8f6f 	isb	sy
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	617b      	str	r3, [r7, #20]
}
 800a734:	bf00      	nop
 800a736:	bf00      	nop
 800a738:	e7fd      	b.n	800a736 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d06f      	beq.n	800a820 <pvPortMalloc+0x154>
 800a740:	4b45      	ldr	r3, [pc, #276]	@ (800a858 <pvPortMalloc+0x18c>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	429a      	cmp	r2, r3
 800a748:	d86a      	bhi.n	800a820 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a74a:	4b44      	ldr	r3, [pc, #272]	@ (800a85c <pvPortMalloc+0x190>)
 800a74c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a74e:	4b43      	ldr	r3, [pc, #268]	@ (800a85c <pvPortMalloc+0x190>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a754:	e004      	b.n	800a760 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	429a      	cmp	r2, r3
 800a768:	d903      	bls.n	800a772 <pvPortMalloc+0xa6>
 800a76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1f1      	bne.n	800a756 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a772:	4b37      	ldr	r3, [pc, #220]	@ (800a850 <pvPortMalloc+0x184>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a778:	429a      	cmp	r2, r3
 800a77a:	d051      	beq.n	800a820 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a77c:	6a3b      	ldr	r3, [r7, #32]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2208      	movs	r2, #8
 800a782:	4413      	add	r3, r2
 800a784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	6a3b      	ldr	r3, [r7, #32]
 800a78c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	1ad2      	subs	r2, r2, r3
 800a796:	2308      	movs	r3, #8
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d920      	bls.n	800a7e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a79e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	f003 0307 	and.w	r3, r3, #7
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00b      	beq.n	800a7c8 <pvPortMalloc+0xfc>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	613b      	str	r3, [r7, #16]
}
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
 800a7c6:	e7fd      	b.n	800a7c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	1ad2      	subs	r2, r2, r3
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7da:	69b8      	ldr	r0, [r7, #24]
 800a7dc:	f000 f90a 	bl	800a9f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a858 <pvPortMalloc+0x18c>)
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	4a1b      	ldr	r2, [pc, #108]	@ (800a858 <pvPortMalloc+0x18c>)
 800a7ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a858 <pvPortMalloc+0x18c>)
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a860 <pvPortMalloc+0x194>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d203      	bcs.n	800a802 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7fa:	4b17      	ldr	r3, [pc, #92]	@ (800a858 <pvPortMalloc+0x18c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a18      	ldr	r2, [pc, #96]	@ (800a860 <pvPortMalloc+0x194>)
 800a800:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a804:	685a      	ldr	r2, [r3, #4]
 800a806:	4b13      	ldr	r3, [pc, #76]	@ (800a854 <pvPortMalloc+0x188>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	431a      	orrs	r2, r3
 800a80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a812:	2200      	movs	r2, #0
 800a814:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a816:	4b13      	ldr	r3, [pc, #76]	@ (800a864 <pvPortMalloc+0x198>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3301      	adds	r3, #1
 800a81c:	4a11      	ldr	r2, [pc, #68]	@ (800a864 <pvPortMalloc+0x198>)
 800a81e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a820:	f7fe fcee 	bl	8009200 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00b      	beq.n	800a846 <pvPortMalloc+0x17a>
	__asm volatile
 800a82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	60fb      	str	r3, [r7, #12]
}
 800a840:	bf00      	nop
 800a842:	bf00      	nop
 800a844:	e7fd      	b.n	800a842 <pvPortMalloc+0x176>
	return pvReturn;
 800a846:	69fb      	ldr	r3, [r7, #28]
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3728      	adds	r7, #40	@ 0x28
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	24004c24 	.word	0x24004c24
 800a854:	24004c38 	.word	0x24004c38
 800a858:	24004c28 	.word	0x24004c28
 800a85c:	24004c1c 	.word	0x24004c1c
 800a860:	24004c2c 	.word	0x24004c2c
 800a864:	24004c30 	.word	0x24004c30

0800a868 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d04f      	beq.n	800a91a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a87a:	2308      	movs	r3, #8
 800a87c:	425b      	negs	r3, r3
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	4413      	add	r3, r2
 800a882:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	4b25      	ldr	r3, [pc, #148]	@ (800a924 <vPortFree+0xbc>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4013      	ands	r3, r2
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10b      	bne.n	800a8ae <vPortFree+0x46>
	__asm volatile
 800a896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	60fb      	str	r3, [r7, #12]
}
 800a8a8:	bf00      	nop
 800a8aa:	bf00      	nop
 800a8ac:	e7fd      	b.n	800a8aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00b      	beq.n	800a8ce <vPortFree+0x66>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	60bb      	str	r3, [r7, #8]
}
 800a8c8:	bf00      	nop
 800a8ca:	bf00      	nop
 800a8cc:	e7fd      	b.n	800a8ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	4b14      	ldr	r3, [pc, #80]	@ (800a924 <vPortFree+0xbc>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d01e      	beq.n	800a91a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d11a      	bne.n	800a91a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a924 <vPortFree+0xbc>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	43db      	mvns	r3, r3
 800a8ee:	401a      	ands	r2, r3
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8f4:	f7fe fc76 	bl	80091e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a928 <vPortFree+0xc0>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4413      	add	r3, r2
 800a902:	4a09      	ldr	r2, [pc, #36]	@ (800a928 <vPortFree+0xc0>)
 800a904:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a906:	6938      	ldr	r0, [r7, #16]
 800a908:	f000 f874 	bl	800a9f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a90c:	4b07      	ldr	r3, [pc, #28]	@ (800a92c <vPortFree+0xc4>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3301      	adds	r3, #1
 800a912:	4a06      	ldr	r2, [pc, #24]	@ (800a92c <vPortFree+0xc4>)
 800a914:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a916:	f7fe fc73 	bl	8009200 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a91a:	bf00      	nop
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	24004c38 	.word	0x24004c38
 800a928:	24004c28 	.word	0x24004c28
 800a92c:	24004c34 	.word	0x24004c34

0800a930 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a936:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a93a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a93c:	4b27      	ldr	r3, [pc, #156]	@ (800a9dc <prvHeapInit+0xac>)
 800a93e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f003 0307 	and.w	r3, r3, #7
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00c      	beq.n	800a964 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	3307      	adds	r3, #7
 800a94e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f023 0307 	bic.w	r3, r3, #7
 800a956:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	4a1f      	ldr	r2, [pc, #124]	@ (800a9dc <prvHeapInit+0xac>)
 800a960:	4413      	add	r3, r2
 800a962:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a968:	4a1d      	ldr	r2, [pc, #116]	@ (800a9e0 <prvHeapInit+0xb0>)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a96e:	4b1c      	ldr	r3, [pc, #112]	@ (800a9e0 <prvHeapInit+0xb0>)
 800a970:	2200      	movs	r2, #0
 800a972:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	4413      	add	r3, r2
 800a97a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a97c:	2208      	movs	r2, #8
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	1a9b      	subs	r3, r3, r2
 800a982:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 0307 	bic.w	r3, r3, #7
 800a98a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4a15      	ldr	r2, [pc, #84]	@ (800a9e4 <prvHeapInit+0xb4>)
 800a990:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a992:	4b14      	ldr	r3, [pc, #80]	@ (800a9e4 <prvHeapInit+0xb4>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2200      	movs	r2, #0
 800a998:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a99a:	4b12      	ldr	r3, [pc, #72]	@ (800a9e4 <prvHeapInit+0xb4>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	1ad2      	subs	r2, r2, r3
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a9e4 <prvHeapInit+0xb4>)
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a9e8 <prvHeapInit+0xb8>)
 800a9be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	4a09      	ldr	r2, [pc, #36]	@ (800a9ec <prvHeapInit+0xbc>)
 800a9c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9c8:	4b09      	ldr	r3, [pc, #36]	@ (800a9f0 <prvHeapInit+0xc0>)
 800a9ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a9ce:	601a      	str	r2, [r3, #0]
}
 800a9d0:	bf00      	nop
 800a9d2:	3714      	adds	r7, #20
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	2400101c 	.word	0x2400101c
 800a9e0:	24004c1c 	.word	0x24004c1c
 800a9e4:	24004c24 	.word	0x24004c24
 800a9e8:	24004c2c 	.word	0x24004c2c
 800a9ec:	24004c28 	.word	0x24004c28
 800a9f0:	24004c38 	.word	0x24004c38

0800a9f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9fc:	4b28      	ldr	r3, [pc, #160]	@ (800aaa0 <prvInsertBlockIntoFreeList+0xac>)
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	e002      	b.n	800aa08 <prvInsertBlockIntoFreeList+0x14>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d8f7      	bhi.n	800aa02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d108      	bne.n	800aa36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	441a      	add	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	441a      	add	r2, r3
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d118      	bne.n	800aa7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	4b15      	ldr	r3, [pc, #84]	@ (800aaa4 <prvInsertBlockIntoFreeList+0xb0>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d00d      	beq.n	800aa72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	441a      	add	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	601a      	str	r2, [r3, #0]
 800aa70:	e008      	b.n	800aa84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa72:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa4 <prvInsertBlockIntoFreeList+0xb0>)
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	e003      	b.n	800aa84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d002      	beq.n	800aa92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa92:	bf00      	nop
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	24004c1c 	.word	0x24004c1c
 800aaa4:	24004c24 	.word	0x24004c24

0800aaa8 <memset>:
 800aaa8:	4402      	add	r2, r0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d100      	bne.n	800aab2 <memset+0xa>
 800aab0:	4770      	bx	lr
 800aab2:	f803 1b01 	strb.w	r1, [r3], #1
 800aab6:	e7f9      	b.n	800aaac <memset+0x4>

0800aab8 <__libc_init_array>:
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	4d0d      	ldr	r5, [pc, #52]	@ (800aaf0 <__libc_init_array+0x38>)
 800aabc:	4c0d      	ldr	r4, [pc, #52]	@ (800aaf4 <__libc_init_array+0x3c>)
 800aabe:	1b64      	subs	r4, r4, r5
 800aac0:	10a4      	asrs	r4, r4, #2
 800aac2:	2600      	movs	r6, #0
 800aac4:	42a6      	cmp	r6, r4
 800aac6:	d109      	bne.n	800aadc <__libc_init_array+0x24>
 800aac8:	4d0b      	ldr	r5, [pc, #44]	@ (800aaf8 <__libc_init_array+0x40>)
 800aaca:	4c0c      	ldr	r4, [pc, #48]	@ (800aafc <__libc_init_array+0x44>)
 800aacc:	f000 f826 	bl	800ab1c <_init>
 800aad0:	1b64      	subs	r4, r4, r5
 800aad2:	10a4      	asrs	r4, r4, #2
 800aad4:	2600      	movs	r6, #0
 800aad6:	42a6      	cmp	r6, r4
 800aad8:	d105      	bne.n	800aae6 <__libc_init_array+0x2e>
 800aada:	bd70      	pop	{r4, r5, r6, pc}
 800aadc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aae0:	4798      	blx	r3
 800aae2:	3601      	adds	r6, #1
 800aae4:	e7ee      	b.n	800aac4 <__libc_init_array+0xc>
 800aae6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaea:	4798      	blx	r3
 800aaec:	3601      	adds	r6, #1
 800aaee:	e7f2      	b.n	800aad6 <__libc_init_array+0x1e>
 800aaf0:	0800abec 	.word	0x0800abec
 800aaf4:	0800abec 	.word	0x0800abec
 800aaf8:	0800abec 	.word	0x0800abec
 800aafc:	0800abf0 	.word	0x0800abf0

0800ab00 <memcpy>:
 800ab00:	440a      	add	r2, r1
 800ab02:	4291      	cmp	r1, r2
 800ab04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab08:	d100      	bne.n	800ab0c <memcpy+0xc>
 800ab0a:	4770      	bx	lr
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab16:	4291      	cmp	r1, r2
 800ab18:	d1f9      	bne.n	800ab0e <memcpy+0xe>
 800ab1a:	bd10      	pop	{r4, pc}

0800ab1c <_init>:
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1e:	bf00      	nop
 800ab20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab22:	bc08      	pop	{r3}
 800ab24:	469e      	mov	lr, r3
 800ab26:	4770      	bx	lr

0800ab28 <_fini>:
 800ab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2a:	bf00      	nop
 800ab2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab2e:	bc08      	pop	{r3}
 800ab30:	469e      	mov	lr, r3
 800ab32:	4770      	bx	lr
